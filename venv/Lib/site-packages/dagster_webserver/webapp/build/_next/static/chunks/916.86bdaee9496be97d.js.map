{"version":3,"file":"static/chunks/916.86bdaee9496be97d.js","mappings":"iME2NqBA,8TF7MRC,aAAe,SAAoCC,CAAAA,EAC9D,IAAOC,EAAqBD,EAArBC,YAAAA,CAAcC,EAAOF,EAAPE,GAAAA,CAEfC,EAAkBC,CAAAA,EAAAA,EAAAA,EAAAA,IAExB,MACE,GAAAC,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOC,eAAgB,gBAAiBC,WAAY,UAAU,YACnF,GAAAN,EAAAC,IAAA,EAACM,EAAAA,EAAIA,CAAAA,CAACC,cAAeX,YACnB,GAAAG,EAAAS,GAAA,EAACC,EAAAA,CAAOA,CAAAA,CAACC,GAAG,WAAWC,MAAM,WAAWC,GAAG,uBAC3C,GAAAb,EAAAS,GAAA,EAACC,EAAAA,CAAOA,CAAAA,CAACC,GAAG,OAAOC,MAAM,OAAOC,GAAG,mBACnC,GAAAb,EAAAS,GAAA,EAACC,EAAAA,CAAOA,CAAAA,CAACC,GAAG,YAAYC,MAAM,YAAYC,GAAG,wBAC7C,GAAAb,EAAAS,GAAA,EAACC,EAAAA,CAAOA,CAAAA,CAACC,GAAG,UAAUC,MAAM,UAAUC,GAAG,sBACzC,GAAAb,EAAAS,GAAA,EAACC,EAAAA,CAAOA,CAAAA,CACNC,GAAG,MACHC,MACE,GAAAZ,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOU,IAAK,EAAGR,WAAY,QAAQ,YACxD,GAAAN,EAAAS,GAAA,EAACM,MAAAA,UAAI,qBACJjB,EAAgBkB,OAAO,CACtB,GAAAhB,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cAEjB,GAAAlB,EAAAS,GAAA,EAACM,MAAAA,CACCI,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdC,gBACEzB,CAA2B,IAA3BA,EAAgB0B,MAAM,CAAaC,CAAAA,EAAAA,EAAAA,EAAAA,IAAoBC,CAAAA,EAAAA,EAAAA,EAAAA,GAC3D,OAKRb,GAAG,8BAEL,GAAAb,EAAAS,GAAA,EAACC,EAAAA,CAAOA,CAAAA,CAACC,GAAG,YAAYC,MAAM,YAAYC,GAAG,wBAC7C,GAAAb,EAAAS,GAAA,EAACC,EAAAA,CAAOA,CAAAA,CAACC,GAAG,YAAYC,MAAM,YAAYC,GAAG,2BAE9CjB,EACC,GAAAI,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACC,OAAQ,CAAC,WACtB,GAAA5B,EAAAS,GAAA,EAACoB,EAAAA,EAAqBA,CAAAA,CAACjC,aAAcA,MAErC,OAGV,kjCCtDO,IAAMkC,EAA2BC,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,kBA6CvCC,EAAAA,CAAqBA,gVCnBlB,IAAMC,0CAA4C,SAAAC,CAAA,MAoEpBC,EAiEzBA,EApIVC,EAAAA,EAAAA,eAAAA,CACAC,EAAAA,EAAAA,YAAAA,CACAC,EAAAA,EAAAA,YAAAA,CACAC,EAAAA,EAAAA,iBAAAA,CAOgCC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAmD,CACjFC,SAAU,WACVC,OAAQC,EAAAA,WAAiB,CAAC,SAAAT,CAAA,MAAEU,EAAAA,EAAAA,QAAAA,CAC1B,OAAO,IAAIC,IACTD,EACIE,KAAKC,KAAK,CAACH,GACX,CACEI,EAAAA,GAAqBA,CAACC,OAAO,CAC7BD,EAAAA,GAAqBA,CAACE,OAAO,CAC7BF,EAAAA,GAAqBA,CAACG,OAAO,CAC9B,CAET,EAAG,EAAE,EACLC,OAAQT,EAAAA,WAAiB,CAAC,SAACU,CAAAA,EACzB,MAAO,CAACT,SAAUE,KAAKQ,SAAS,CAACC,MAAMC,IAAI,CAACH,GAAK,CACnD,EAAG,EAAE,CACP,MAhBOT,EAAyBJ,CAAAA,CAAAA,EAAAA,CAAfiB,EAAejB,CAAAA,CAAAA,EAAAA,CAkBOkB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAGrC,CACAC,MAAO7B,EACP8B,UAAW,CACThB,SAAUD,EAAAA,OAAa,CAAC,kBAAMY,MAAMC,IAAI,CAACZ,IAAW,CAACA,EAAS,CAChE,EACAiB,oBAAqB,SAACC,CAAAA,EACpB,IAIOC,EAJDA,EAAQD,EAAKE,oBAAoB,CACvC,GAAKD,EAAME,MAAM,CAGjB,cAAOF,CAAAA,EAAAA,CAAK,CAACG,GAAc,GAApBH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAsBpD,EAAE,EAEjCwD,eAAgB,SAACL,CAAAA,QACf,CAAKA,MAAAA,EAAAA,KAAAA,EAAAA,EAAME,oBAAoB,EAGxBF,EAAKE,oBAAoB,CAFvB,EAAE,EAIbI,SApDc,EAqDhB,GAtBOjC,EAAgCuB,EAAhCvB,WAAAA,CAAakC,EAAmBX,EAAnBW,eAAAA,CAiDpB,MAzBAC,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BnC,EAAa,IAAO,CAACkC,EAAgBE,aAAa,EAE5E5B,EAAAA,SAAe,CAAC,WACd,GAAI0B,EAAgBE,aAAa,CAAE,CACjC,IAAMR,EAAAA,OAAQ5B,CAAAA,EAAAA,EAAY2B,IAAI,GAAhB3B,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkB6B,oBAAoB,CACpD,GAAID,GAASA,EAAME,MAAM,CAAE,CACzB,IAFY9B,EAEE4B,EACFA,EADNS,EAAAA,OAAQT,CAAAA,EAAAA,CAAK,CAACA,EAAME,MAAM,CAAG,EAAE,GAAvBF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyBU,SAAS,CAC1CC,EAAAA,OAAMX,CAAAA,EAAAA,CAAK,CAAC,EAAE,GAARA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAUY,YAAY,CAC9BH,GAASE,GACXpC,EAAa,CAACkC,EAAOE,EAAI,CAE7B,CACF,MACEpC,EAAasC,KAAAA,EAEjB,EAAG,CAACP,EAAgBE,aAAa,CAAkB,OAAhBpC,CAAAA,EAAAA,EAAY2B,IAAI,GAAhB3B,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkB6B,oBAAoB,CAAE1B,EAAa,EAExFK,EAAAA,SAAe,CAAC,WACV0B,EAAgBE,aAAa,CAC/BhC,EAAkBgB,MAAMC,IAAI,CAACZ,IAE7BL,EAAkBqC,KAAAA,EAEtB,EAAG,CAACP,EAAgBE,aAAa,CAAEhC,EAAmBK,EAAS,EAG7D,GAAA5C,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,WACF,GAAAF,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CAACE,eAAgB,gBAAiBC,WAAY,QAAQ,EAC5DqB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,EACtCC,OAAQ,CAACC,IAAK,EAAE,EAChBC,OAAO,gBAEP,GAAAjF,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOU,IAAK,EAAGR,WAAY,QAAQ,YACxD,GAAAN,EAAAS,GAAA,EAACyE,EAAAA,CAAWA,CAAAA,CACVC,YAAa,IAAItC,IAAI,CAAC,cAAc,EACpCuC,QAAS,CACP,CAACzE,GAAI,cAAe0E,MAAO,aAAa,EACxC,CAAC1E,GAAI,OAAQ0E,MAAO,MAAM,EAC3B,CACDC,QAAS,SAAC3E,CAAAA,EACR0B,EAAa1B,EACf,IAED,EAAamD,IAAI,CAAqC,KAAlC,GAAA9D,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,iBAExC,GAAAlB,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOU,IAAK,GAAIR,WAAY,QAAQ,YACzD,GAAAN,EAAAS,GAAA,EAAC8E,eAAAA,CACC3C,SAAUA,EACVa,YAAaA,EACb+B,OAAQxC,EAAAA,GAAqBA,CAACC,OAAO,GAEvC,GAAAjD,EAAAS,GAAA,EAAC8E,eAAAA,CACC3C,SAAUA,EACVa,YAAaA,EACb+B,OAAQxC,EAAAA,GAAqBA,CAACE,OAAO,GAEvC,GAAAlD,EAAAS,GAAA,EAAC8E,eAAAA,CACC3C,SAAUA,EACVa,YAAaA,EACb+B,OAAQxC,EAAAA,GAAqBA,CAACG,OAAO,GAEvC,GAAAnD,EAAAS,GAAA,EAAC8E,eAAAA,CACC3C,SAAUA,EACVa,YAAaA,EACb+B,OAAQxC,EAAAA,GAAqBA,CAACyC,OAAO,SAI3C,GAAAzF,EAAAC,IAAA,EAACyF,EAAAA,WACC,GAAA1F,EAAAS,GAAA,EAACkF,QAAAA,UACC,GAAA3F,EAAAC,IAAA,EAAC2F,KAAAA,WACC,GAAA5F,EAAAS,GAAA,EAACoF,KAAAA,CAAG1E,MAAO,CAACC,MAAO,GAAG,WAAG,cACzB,GAAApB,EAAAS,GAAA,EAACoF,KAAAA,CAAG1E,MAAO,CAACC,MAAO,EAAE,WAAG,WACxB,GAAApB,EAAAS,GAAA,EAACoF,KAAAA,CAAG1E,MAAO,CAACC,MAAO,EAAE,WAAG,aACxB,GAAApB,EAAAS,GAAA,EAACoF,KAAAA,CAAG1E,MAAO,CAACC,MAAO,GAAG,WAAG,gBAG7B,GAAApB,EAAAS,GAAA,EAACqF,QAAAA,UAE+C,OAA5C3D,CAAAA,EAAAA,EAAY2B,IAAI,EAAI3B,EAAY4D,YAAY,GAA5C5D,KAAAA,IAAAA,EAAAA,KAAAA,EAAD6D,EAAgDhC,oBAAoB,CAACiC,GAAG,CACvE,SAACC,CAAAA,CAAMC,CAAAA,EAEL,IAAMC,EACJD,IAAAA,GACAD,EAAKV,MAAM,GAAKxC,EAAAA,GAAqBA,CAACC,OAAO,EAC7C,CAACoB,EAAgBE,aAAa,CAEhC,MACE,GAAAvE,EAAAC,IAAA,EAAC2F,KAAAA,WACC,GAAA5F,EAAAS,GAAA,EAAC4F,KAAAA,UACC,GAAArG,EAAAS,GAAA,EAAC6F,EAAAA,CAASA,CAAAA,CACR7B,UAAW,CAAC8B,KAAML,EAAKzB,SAAS,EAChC+B,WAAY,CAACC,aAAc,EAAI,MAGnC,GAAAzG,EAAAS,GAAA,EAAC4F,KAAAA,UACC,GAAArG,EAAAS,GAAA,EAACiG,EAAAA,CAAaA,CAAAA,CAACR,KAAMA,EAAMS,eAAgBP,MAE7C,GAAApG,EAAAS,GAAA,EAAC4F,KAAAA,UACED,EACC,MAEA,GAAApG,EAAAS,GAAA,EAACmG,EAAAA,CAAWA,CAAAA,CAACC,UAAWX,EAAKzB,SAAS,CAAEqC,QAASZ,EAAKvB,YAAY,KAGtE,GAAA3E,EAAAS,GAAA,EAAC4F,KAAAA,UACE,CAACrD,EAAAA,GAAqBA,CAACyC,OAAO,CAAEzC,EAAAA,GAAqBA,CAACE,OAAO,CAAC,CAAC6D,QAAQ,CACtEb,EAAKV,MAAM,EAEX,GAAAxF,EAAAS,GAAA,EAACuG,EAAAA,CAAUA,CAAAA,CACT1B,QAAS,WACPlD,EAAgB8D,EAClB,WAEA,GAAAlG,EAAAC,IAAA,EAACgH,EAAAA,EAAKA,CAAAA,WACHf,EAAKgB,kCAAkC,CAAC,mCAI7C,UA/BGhB,EAAKvF,EAAE,CAoCpB,QAIN,GAAAX,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACgG,cAAe,MAAM,WAChC,GAAAnH,EAAAS,GAAA,EAAC2G,EAAAA,EAAqBA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAK/C,QAInC,EAEMgD,EAAe5H,CAAAA,EAAA,GACnB,GAAA6H,EAAAC,CAAA,EADmB9H,EAClBuD,EAAAA,GAAqBA,CAACyC,OAAO,CAAG,kBACjC,GAAA6B,EAAAC,CAAA,EAFmB9H,EAElBuD,EAAAA,GAAqBA,CAACC,OAAO,CAAG,WACjC,GAAAqE,EAAAC,CAAA,EAHmB9H,EAGlBuD,EAAAA,GAAqBA,CAACG,OAAO,CAAG,UACjC,GAAAmE,EAAAC,CAAA,EAJmB9H,EAIlBuD,EAAAA,GAAqBA,CAACE,OAAO,CAAG,aAJdzD,CAAA,EAOrB,SAAS8F,eAAerD,CAQvB,MAPCsD,EADsBtD,EACtBsD,MAAAA,CACA5C,EAFsBV,EAEtBU,QAAAA,CACAa,EAHsBvB,EAGtBuB,WAAAA,CAMA,MACE,GAAAzD,EAAAS,GAAA,EAAC+G,EAAAA,CAAQA,CAAAA,CACPnC,MAAOgC,CAAY,CAAC7B,EAAO,CAC3BiC,QAAS7E,EAAS8E,GAAG,CAAClC,GACtBmC,SAAU,WACR,IAAMC,EAAc,IAAI/E,IAAID,GACxBA,EAAS8E,GAAG,CAAClC,GACfoC,EAAYC,MAAM,CAACrC,GAEnBoC,EAAYE,GAAG,CAACtC,GAElB/B,EAAYmE,EACd,GAGN,CAEA,IAAMlC,EAAeqC,CAAAA,EAAAA,EAAAA,EAAAA,EAAOC,EAAAA,CAAKA,EAAAA,UAAAA,CAAAA,i9BCzNjC,IAAMC,GAAmB,cAEZC,GAAsCvF,EAAAA,IAAU,CAC3D,SAAAT,CAAA,MACEgE,EAAAA,EAAAA,IAAAA,CACAiC,EAAAA,EAAAA,MAAAA,CACAC,EAAAA,EAAAA,KAAAA,CAMsCzF,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAA9C0F,EAA+B1F,CAAAA,CAAAA,EAAAA,CAAlB2F,EAAkB3F,CAAAA,CAAAA,EAAAA,CAEhC4F,EAAoB5F,EAAAA,OAAa,CACrC,kBACEuD,EACIA,EAAKsC,kBAAkB,CAACC,MAAM,CAAC,SAACC,CAAAA,SAC9BA,EAASC,IAAI,CAACC,IAAI,CAAC,KAAK7B,QAAQ,CAACsB,KAEnC,EAAE,EACR,CAACnC,EAAMmC,EAAY,EAGfQ,EAAQ3C,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMsC,kBAAkB,CAACvE,MAAM,GAAI,EAE3C6E,EAAYnG,EAAAA,MAAY,CAAwB,MAChDoG,EAAiBC,CAAAA,EAAAA,EAAAA,cAAAA,EAAe,CACpCH,MAAON,EAAkBtE,MAAM,CAC/BgF,iBAAkB,kBAAMH,EAAUI,OAAO,EACzCC,aAAc,kBAAM,IACpBC,SAAU,EACZ,GACMC,EAAcN,EAAeO,YAAY,GACzCC,EAAQR,EAAeS,eAAe,GAEtCC,EAA0B9G,EAAAA,OAAa,CAAC,WAC5C,IAAMsD,EAAgC,CAAC,EAIvC,OAHAC,MAAAA,GAAAA,EAAMwD,kCAAkC,CAACC,OAAO,CAAC,SAAAzH,CAAA,MAAEwG,EAAAA,EAAAA,QAAAA,CAAUkB,EAAAA,EAAAA,aAAAA,CAC3D3D,CAAG,CAAC4D,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBnB,GAAU,CAAGkB,CACpC,GACO3D,CACT,EAAG,CAACC,MAAAA,EAAAA,KAAAA,EAAAA,EAAMwD,kCAAkC,CAAC,EAEvCI,EAAUnH,EAAAA,OAAa,CAAC,kBAC5B,GAAmB,CAAC4F,EAAkBtE,MAAM,CAExC,GAAAjE,EAAAS,GAAA,EAACsJ,GAAAA,EAAyBA,CAAAA,CACxBnJ,MAAM,yBACNoJ,YACE,GAAAhK,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YAAE,8BAC2B,GAAAjK,EAAAS,GAAA,EAACyJ,SAAAA,UAAQ7B,SAMzCnC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMsC,kBAAkB,CAACvE,MAAM,EAQlC,GAAAjE,EAAAC,IAAA,EAACc,MAAAA,CAAII,MAAO,CAACgJ,SAAU,QAAQ,EAAGC,IAAKtB,YACrC,GAAA9I,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CACF+E,OAAO,iBACP9D,MAAO,CACLkJ,QAAS,OACTC,oBAAqBrC,GACrB5G,OAAQ,OACRkJ,SAAU,OACVC,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,IACPC,SAAU,SACV1F,IAAK,EACL2F,OAAQ,EACRC,WAAYC,CAAAA,EAAAA,EAAAA,EAAAA,GACd,YAEA,GAAA7K,EAAAS,GAAA,EAACqK,GAAAA,EAAUA,CAAAA,UAAC,UACZ,GAAA9K,EAAAS,GAAA,EAACqK,GAAAA,EAAUA,CAAAA,UAAC,UACZ,GAAA9K,EAAAS,GAAA,EAACqK,GAAAA,EAAUA,CAAAA,UAAC,cAEd,GAAA9K,EAAAS,GAAA,EAACsK,GAAAA,EAAKA,CAAAA,CAACC,aAAc3B,WAClBE,EAAMtD,GAAG,CAAC,SAAA/D,CAAA,MAAEiE,EAAAA,EAAAA,KAAAA,CAAO8E,EAAAA,EAAAA,GAAAA,CAAKC,EAAAA,EAAAA,IAAAA,CAAM1G,EAAAA,EAAAA,KAAAA,CACvBkE,EAAWH,CAAiB,CAACpC,EAAM,CACzC,MACE,GAAAnG,EAAAS,GAAA,EAAC0K,eAAAA,CAECC,QAASF,EACTG,OAAQ7G,EACRkE,SAAUA,EACVkB,cAAeH,CAAuB,CAACI,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBnB,GAAU,CAClE4C,aAAcpF,EAAKqF,gCAAgC,EAL9CN,EAQX,QAtCF,GAAAjL,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,WACzC,GAAA9E,EAAAS,GAAA,EAAC+K,EAAAA,EAAOA,CAAAA,CAAChB,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,aAAkB,UAyC1C,EAAG,CAAChB,EAAyBlB,EAAmBgB,EAAOlB,EAAanC,EAAMmD,EAAY,EAEtF,MACE,GAAArJ,EAAAS,GAAA,EAACgL,GAAAA,EAAeA,CAAAA,CACdtD,OAAQA,EACRuD,UAAWtD,EACX/G,OAAQ,IACRsK,OACE,GAAA3L,EAAAS,GAAA,EAACmL,GAAAA,EAAqBA,CAAAA,CACpBhL,MACEsF,EACE,GAAAlG,EAAAS,GAAA,EAACM,MAAAA,UACC,GAAAf,EAAAS,GAAA,EAAC6F,EAAAA,CAASA,CAAAA,CAAC7B,UAAW,CAAC8B,KAAML,EAAKzB,SAAS,EAAG+B,WAAY,CAACC,aAAc,EAAI,MAG/E,GAGJoF,WAAYhD,EAAQ,EACpBiD,YAAY,uBACZzD,YAAaA,EACbC,eAAgBA,IAGpBwB,QACE,GAAA9J,EAAAC,IAAA,EAACc,MAAAA,CACCI,MAAO,CACLkJ,QAAS,OACT0B,iBAAkB,2BAClB1K,OAAQ,MACV,YAEA,GAAArB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,EAAGG,OAAO,kBAClDiB,EAAO,GAAAlG,EAAAS,GAAA,EAACuL,EAAAA,CAAiBA,CAAAA,CAAC9F,KAAMA,IAAW,OAE7CA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMV,MAAM,IAAKxC,EAAAA,GAAqBA,CAACC,OAAO,CAAG,KAChD,GAAAjD,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CACFyB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,EACtCG,OAAQsD,EAAkBtE,MAAM,CAAG,EAAIW,KAAAA,EAAY,kBAEnD,GAAA5E,EAAAS,GAAA,EAACwL,EAAAA,EAASA,CAAAA,UAAC,iCAEZnC,SAOf,GAGIqB,eAAiB,SAAAjJ,CAAA,MACrBmJ,EAAAA,EAAAA,MAAAA,CACAD,EAAAA,EAAAA,OAAAA,CACA1C,EAAAA,EAAAA,QAAAA,CACAkB,EAAAA,EAAAA,aAAAA,CACA0B,EAAAA,EAAAA,YAAAA,CAQMY,EAAsBtC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe3F,MAAM,GAAI,EAC/CH,EAASqI,CAAAA,EAAAA,EAAAA,CAAAA,EACbC,GACA,CACEC,YAAa,oBACbzI,UAAW,CACT8E,SAAU,CAACC,KAAMD,EAASC,IAAI,CAChC,CACF,GAPK7E,IAAAA,CASDwI,EAAQxI,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMyI,YAAY,CAACC,UAAU,IAAK,QAAU1I,EAAKyI,YAAY,CAAG,KACxEE,EAAaH,MAAAA,EAAAA,KAAAA,EAAAA,EAAOG,UAAU,CAC9BC,EAAcD,EAChBE,CAAAA,EAAAA,GAAAA,EAAAA,EAAiBF,EAAWG,UAAU,CAACC,IAAI,CAAEJ,EAAWG,UAAU,CAACE,QAAQ,CAACD,IAAI,EAChF,KACJ,MACE,GAAA7M,EAAAS,GAAA,EAACsM,GAAAA,EAAGA,CAAAA,CAAC1B,OAAQA,EAAQD,QAASA,WAC5B,GAAApL,EAAAC,IAAA,EAAC+M,GAAAA,CAAQ/H,OAAO,mBACd,GAAAjF,EAAAS,GAAA,EAACwM,GAAAA,EAAOA,CAAAA,UACN,GAAAjN,EAAAS,GAAA,EAACyM,GAAAA,CAASA,CAAAA,CAACvE,KAAMD,EAASC,IAAI,CAAEwE,KAAK,QAAQC,UAAU,sBAEzD,GAAApN,EAAAS,GAAA,EAACwM,GAAAA,EAAOA,CAAAA,UACLnJ,EACC2I,GAAcA,EAAWY,SAAS,EAAIX,EACpC,GAAA1M,EAAAS,GAAA,EAAC6M,EAAAA,EAAIA,CAAAA,CACHzM,GAAI0M,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBb,EAAa,iBAAsCc,MAAA,CAArBf,EAAWY,SAAS,YAE/E,GAAArN,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOU,IAAK,EAAGR,WAAY,QAAQ,YACxD,GAAAN,EAAAS,GAAA,EAACgN,EAAAA,EAAIA,CAAAA,CAACjD,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,IAAkBoC,KAAK,gBACnCJ,EAAWY,SAAS,MAIzB,GAAArN,EAAAS,GAAA,EAAC+K,EAAAA,EAAOA,CAAAA,CAAChB,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,aAAkB,oBAGpC,GAAAzK,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,gBAGrB,GAAAlB,EAAAS,GAAA,EAACwM,GAAAA,EAAOA,CAAAA,UACN,GAAAjN,EAAAC,IAAA,EAACqN,EAAAA,EAAIA,CAAAA,CACHzM,GAAI6M,CAAAA,EAAAA,GAAAA,CAAAA,EAAuBhF,EAAU,CACnCiF,KAAM,2BACNC,WAAY,GAAgBJ,MAAA,CAAblC,EACjB,aAECY,EAAoB,mBAAiBA,IAAAA,EAA4B,GAAK,IAAI,sBAMvF,EAEMc,GAAUjF,CAAAA,EAAAA,EAAAA,EAAAA,EAAO7H,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,oFAEC+H,IAOrBmE,GAAoBrK,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,6SC7PtB,IAAM8L,+BAAiC,SAAA3L,CAAA,MAgC3BC,EA/BjBE,EAAAA,EAAAA,YAAAA,CAIuCqB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAGrC,CACAG,oBAAqB,SAACiK,CAAAA,MAIbA,EAHP,GAAIA,SAAAA,EAAKC,mBAAmB,CAACvB,UAAU,CAGvC,cAAOsB,CAAAA,EAAAA,EAAKC,mBAAmB,CAACC,OAAO,CAAC9J,GAAc,GAA/C4J,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiDnN,EAAE,EAE5DwD,eAAgB,SAACL,CAAAA,SACf,GAAaA,SAAAA,EAAKiK,mBAAmB,CAACvB,UAAU,CAGzC1I,EAAKiK,mBAAmB,CAACC,OAAO,CAF9B,EAAE,EAIbpK,UAAW,CACT6E,OAAQ,CACNwF,KAAM,CAAC,CAAChD,IAAK,2BAA4BiD,MAAO,MAAM,EAAE,CAE5D,EACAvK,MAAOwK,GAAAA,eAAeA,CACtB/J,SA7Bc,EA8BhB,GAvBOjC,EAAgCuB,EAAhCvB,WAAAA,CAAakC,EAAmBX,EAAnBW,eAAAA,CAyBpBC,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BnC,EAAa,MAEvC,IAAMiM,EAAAA,OAAWjM,CAAAA,EAAAA,EAAY2B,IAAI,EAAI3B,EAAY4D,YAAY,GAA5C5D,KAAAA,IAAAA,EAAAA,KAAAA,EAAD6D,EAAgD+H,mBAAmB,CAEnF,MACE,GAAA/N,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,WACF,GAAAF,EAAAC,IAAA,EAACoO,GAAAA,WACC,GAAArO,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,EAAGC,OAAQ,CAACC,IAAK,EAAE,EAAGC,OAAO,eACtE,GAAAjF,EAAAS,GAAA,EAACyE,EAAAA,CAAWA,CAAAA,CACVC,YAAa,IAAItC,IAAI,CAAC,OAAO,EAC7BuC,QAAS,CACP,CAACzE,GAAI,cAAe0E,MAAO,aAAa,EACxC,CAAC1E,GAAI,OAAQ0E,MAAO,MAAM,EAC3B,CACDC,QAAS,SAAC3E,CAAAA,EACR0B,EAAa1B,EACf,MAGJ,GAAAX,EAAAS,GAAA,EAAC6N,GAAAA,EAAQA,CAAAA,CAACR,KAAMM,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAS5B,UAAU,IAAK,OAAS4B,EAAQJ,OAAO,CAAG,EAAE,MAEvE,GAAAhO,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACgG,cAAe,MAAM,WAChC,GAAAnH,EAAAS,GAAA,EAAC2G,EAAAA,EAAqBA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAK/C,QAInC,EAGMgK,GAAUtG,EAAAA,EAAMA,CAAChH,GAAG,CAAAwN,UAAA,iFC/BbC,wBAA0B,iBAiDxBrM,EAxBJsM,UAAT,WACEC,EAAM,CACJ9K,UAAAA,CACF,EACF,EA5BA+K,CAAAA,EAAAA,EAAAA,EAAAA,IACA,IAAM7O,EAAkBC,CAAAA,EAAAA,EAAAA,EAAAA,IAClB6O,EAAUC,CAAAA,EAAAA,EAAAA,CAAAA,IAEIC,EAAmCC,CAAAA,EAAAA,EAAAA,EAAAA,IAAhDC,WAAAA,CAAaC,EAAA,CAAAH,KAAA,IAAAA,EAA6B,CAAC,EAA9BA,CAAA,EAACG,wBAAAA,CAEQC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAC3BpN,GAAwBA,GADnB4M,EAAsBQ,CAAAA,CAAAA,EAAAA,CAAf/M,EAAe+M,CAAAA,CAAAA,EAAAA,CAGGvM,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAAxCwM,EAAyBxM,CAAAA,CAAAA,EAAAA,CAAfyM,EAAezM,CAAAA,CAAAA,EAAAA,CACAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAsCiC,KAAAA,GAAAA,GAA7EhC,EAAyBD,CAAAA,CAAAA,EAAAA,CAAfc,EAAed,CAAAA,CAAAA,EAAAA,CACEA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAA+BiC,KAAAA,GAAAA,GAAxEyK,EAA2B1M,CAAAA,CAAAA,EAAAA,CAAhBL,EAAgBK,CAAAA,CAAAA,EAAAA,CAC5BiB,EAA4CjB,EAAAA,OAAa,CAAC,kBAC9D,GAAiBC,EACR,CACL0M,eAAgBD,MAAAA,EAAAA,KAAAA,EAAAA,CAAW,CAAC,EAAE,CAC9BE,gBAAiBF,MAAAA,EAAAA,KAAAA,EAAAA,CAAW,CAAC,EAAE,CAC/BzM,SAAAA,CACF,EAEK,CACL0M,eAAgB,CAACE,KAAKC,GAAG,GAxBR,IAwBaC,EAAkB,GAClD,CACF,EAAG,CAAC9M,EAAUyM,EAAU,EAOxBM,CAAAA,EAAAA,EAAAA,eAAAA,EAAgBlB,UAAW,CAAC7K,EAAU,EACtCU,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BnC,EAAa,IAAU,CAACgN,GAAY,CAACE,GAAa,CAACzM,EAAU6L,WAoBvF,IAlBA,IAAwC9L,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAiC,SAAhFiN,EAAiCjN,CAAAA,CAAAA,EAAAA,CAAnBP,EAAmBO,CAAAA,CAAAA,EAAAA,CAENH,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAChCG,EAAAA,OAAa,CACX,iBAAO,CACLF,SAAU,OACVC,OAAQ,SAAAR,CAAA,QAAayL,SAAXA,EAAAA,IAAAA,CAA6B,OAAS,eAChDvK,OAAQ,SAACC,CAAAA,EACP,MAAO,CAACsK,KAAMtK,EAAKwM,OAAQjL,KAAAA,EAAWhC,SAAUgC,KAAAA,CAAS,CAC3D,CACF,GACA,EAAE,MATCkL,EAA2BtN,CAAAA,CAAAA,EAAAA,CAAhBH,EAAgBG,CAAAA,CAAAA,EAAAA,CAa5BsB,EAAO3B,OAAAA,CAAAA,EAAAA,EAAY2B,IAAI,GAAhB3B,KAAAA,IAAAA,EAAAA,EAAoBA,EAAY4D,YAAY,CAEnDgK,EAAMjM,EAAOA,EAAKE,oBAAoB,CAACiC,GAAG,CAAC,SAACC,CAAAA,QAAS,GAAcA,MAAAA,CAAXA,EAAKvF,EAAE,CAAC,KAAe6M,MAAA,CAAZtH,EAAKV,MAAM,IAAM,EAAE,CACrFuK,EAAI9L,MAAM,CAAG,KAIlB8L,EAAIC,IAAI,CAAC,IAEX,IAAMjM,EAAQpB,EAAAA,OAAa,CACzB,WACE,IAEEoB,EAFIA,EAAQD,MAAAA,EAAAA,KAAAA,EAAAA,EAAME,oBAAoB,CACxC,OACED,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAOkC,GAAG,CAAC,SAACC,CAAAA,CAAMC,CAAAA,EAEhB,GAAIA,IAAAA,GAAe,CAAC8J,CAAAA,EAAAA,EAAAA,CAAAA,EAA6B/J,IAAS,CAACA,EAAKvB,YAAY,CAAE,CAC5E,IAAMuL,EAAO,GAAAC,EAAA5I,CAAA,KAAIrB,GAGjB,OAFAgK,EAAKvL,YAAY,CAAGZ,CAAK,CAACoC,EAAQ,EAAE,CAAE1B,SAAS,CAC/CyL,EAAK1K,MAAM,CAAGxC,EAAAA,GAAqBA,CAACG,OAAO,CACpC+M,CACT,CACA,OAAOhK,CACT,KATAnC,KAAAA,IAAAA,EAAAA,EASM,EAAE,EAIX,GAAAqM,EAAA7I,CAAA,EAAGwI,EAAIM,KAAK,CAAC,EAAG,OAEbC,GAAc3N,EAAAA,WAAiB,CACnC,SAACuD,CAAAA,EACCkJ,EAAY,CAAC,CAAClJ,EAChB,EACA,CAACkJ,EAAY,EAGf,MACE,GAAApP,EAAAC,IAAA,EAACsQ,EAAAA,CAAIA,CAAAA,WACH,GAAAvQ,EAAAS,GAAA,EAAC+P,EAAAA,CAAUA,CAAAA,CAAC5P,MAAO,GAAAZ,EAAAS,GAAA,EAACgQ,EAAAA,EAAOA,CAAAA,UAAC,aAAoBC,KAAM,GAAA1Q,EAAAS,GAAA,EAACf,aAAYA,CAACG,IAAI,UACxE,GAAAG,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,EAAG3E,KAAM,CAACC,UAAW,SAAUU,IAAK,EAAE,WAC/E,GAAAd,EAAAS,GAAA,EAACkQ,EAAAA,CAAKA,CAAAA,CACJC,OAAO,OACPhQ,MAAM,qFACNoJ,YACE,GAAAhK,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YAAE,2NAGoD,IACpD,GAAAjK,EAAAS,GAAA,EAACoQ,IAAAA,CACCC,KAAK,+DACLC,OAAO,SACPC,IAAI,sBACL,+CAEG,WAMZ,GAAAhR,EAAAS,GAAA,EAACuH,EAAAA,CAAKA,CAAAA,UACJ,GAAAhI,EAAAC,IAAA,EAAC6F,QAAAA,WACC,GAAA9F,EAAAC,IAAA,EAAC2F,KAAAA,WACC,GAAA5F,EAAAS,GAAA,EAAC4F,KAAAA,UAAG,YACJ,GAAArG,EAAAS,GAAA,EAAC4F,KAAAA,UACEvG,EAAgBkB,OAAO,CACtB,GAAAhB,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cAEjB,GAAAlB,EAAAS,GAAA,EAAC+G,EAAAA,CAAQA,CAAAA,CACPyJ,OAAO,SACPxJ,QAAS,CAAC3H,EAAgB0B,MAAM,CAChC0P,SAAU,CAACjC,EACXtH,QAAQ,IAAE,GAAAwJ,EAAA5J,CAAA,WAAO6J,CAAAA,MACT3J,4DAAAA,EAAU2J,EAAEL,MAAM,CAACtJ,OAAO,CAC5B,YACF,SAAMmH,EAAQ,CACZhO,MAAO,4BACPoJ,YACE,yGACJ,WAJAqH,EAAAC,IAAA,2BAMFxR,EAAgByR,SAAS,CAAC,CAAC9J,SAC7B,YAViB2J,CAAAA,0CAezB,GAAApR,EAAAC,IAAA,EAAC2F,KAAAA,WACC,GAAA5F,EAAAS,GAAA,EAAC4F,KAAAA,UAAG,yBACJ,GAAArG,EAAAS,GAAA,EAAC4F,KAAAA,UAAG,iBAIV,GAAArG,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,EAAGG,OAAO,kBACnD,GAAAjF,EAAAS,GAAA,EAACwL,EAAAA,EAASA,CAAAA,UAAC,0BAEZ,EAKC,GAAAjM,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAS,GAAA,EAAC+Q,EAAAA,CAAgBA,CAAAA,CACfzN,MAAOA,EACPuM,YAAaA,GACbmB,aAAcrP,EACdsP,WAAYrC,EACZA,UA7JW,KA8JXsC,SA/JS,IAgKTC,UAjKU,OAmKZ,GAAA5R,EAAAS,GAAA,EAACyH,GAAmCA,CAElChC,KAAM0J,EACNzH,OAAQ,CAAC,CAACyH,EACVxH,MAAO,WACLhG,EAAgB,KAClB,GALKwN,MAAAA,EAAAA,KAAAA,EAAAA,EAAcjP,EAAE,EAOtBmP,gBAAAA,EACC,GAAA9P,EAAAS,GAAA,EAACwB,0CAAyCA,CACxCG,gBAAiBA,EACjBC,aAAcA,EACdE,kBAAmBkB,EACnBnB,aAAcA,IAGhB,GAAAtC,EAAAS,GAAA,EAACoN,+BAA8BA,CAACxL,aAAcA,OA9BlD,GAAArC,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,EAAE,WACzB,GAAA7E,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,aAmC3B,gwCCzLA,IAAM2Q,uBAAyB,SAAC5G,CAAAA,EAC9B,OAAQA,GACN,KAAK6G,EAAAA,GAAgBA,CAACC,QAAQ,CAC5B,MAAO,UACT,MAAKD,EAAAA,GAAgBA,CAACE,SAAS,CAC7B,MAAO,WACT,MAAKF,EAAAA,GAAgBA,CAACG,SAAS,CAC7B,MAAO,WACT,MAAKH,EAAAA,GAAgBA,CAACI,MAAM,CAC1B,MAAO,QACT,MAAKJ,EAAAA,GAAgBA,CAACK,SAAS,CAC7B,MAAO,aACX,CACF,EAEMC,GAAuBC,OAAOC,IAAI,CAACR,EAAAA,GAAgBA,EAAE7L,GAAG,CAAC,SAACgF,CAAAA,EAE9D,IAAM5F,EAAQwM,uBADC5G,GAEf,MAAO,CACL5F,MAAAA,EACA6I,MAJajD,EAKbsH,MAAO,CALMtH,EAKG5F,EAAM,CAE1B,GAEamN,kBAAoB,WAC/B7D,CAAAA,EAAAA,EAAAA,EAAAA,IACA8D,CAAAA,EAAAA,GAAAA,CAAAA,EAAiB,wBAEjB,IAAMC,EAAYvG,CAAAA,EAAAA,EAAAA,CAAAA,EAGhBwG,IAEIC,EAAeC,CAAAA,EAAAA,GAAAA,EAAAA,EAAqC,CACxDhG,KAAM,SACNM,KAAM,SACN2F,UAAWV,GACXW,wBAAyB,GACzBC,cAAe,GACfC,YAAa,SAAA/Q,CAAA,MAAEgM,EAAAA,EAAAA,KAAAA,OAAW,GAAAlO,EAAAS,GAAA,EAACM,MAAAA,UAAK8Q,uBAAuB3D,MACvDgF,eAAgB,SAAC1N,CAAAA,SAAWqM,uBAAuBrM,GACrD,GAEO2N,EAAsBP,EAAtBO,KAAAA,CAE4BC,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAW,CAACC,QAAS,CAACT,EAAa,GAA/DU,EAA4BF,EAA5BE,MAAAA,CAAQC,EAAoBH,EAApBG,gBAAAA,CAEwB7P,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAGrC,CACAC,MAAO6P,GACP5P,UAAW,CACT4B,OAAQiO,EAAYvI,IAAI,CAAG,EAAI3H,MAAMC,IAAI,CAACiQ,EAAY,CAAC,EAAE,CAAI7O,KAAAA,CAC/D,EACAR,SA1Dc,GA2DdP,oBAAqB,SAAC6P,CAAAA,MAEhBA,QADJA,uBAAAA,EAAOC,yBAAyB,CAACnH,UAAU,CAAK,OAC5CkH,CAAAA,EAAAA,EAAOC,yBAAyB,CAAC3F,OAAO,CAAC9J,EAAc,GAAvDwP,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyD/S,EAAE,CAC3DiE,KAAAA,GACNT,eAAgB,SAACuP,CAAAA,QACfA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQC,yBAAyB,CAACnH,UAAU,IAAK,qBAC7CkH,EAAOC,yBAAyB,CAAC3F,OAAO,CACxC,EAAE,CACV,GAjBO7L,EAAgCuB,EAAhCvB,WAAAA,CAAakC,EAAmBX,EAAnBW,eAAAA,CAmBdzE,EAAe0E,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BnC,EAAayR,EAAAA,EAAeA,EACpE5S,EAAiBmB,EAAjBnB,OAAAA,CAAS8C,EAAQ3B,EAAR2B,IAAAA,CAqEhB,MACE,GAAA9D,EAAAC,IAAA,EAACsQ,EAAAA,CAAIA,CAAAA,WACH,GAAAvQ,EAAAS,GAAA,EAAC+P,EAAAA,CAAUA,CAAAA,CACT5P,MAAO,GAAAZ,EAAAS,GAAA,EAACgQ,EAAAA,EAAOA,CAAAA,UAAC,aAChBC,KAAM,GAAA1Q,EAAAS,GAAA,EAACf,aAAYA,CAACG,IAAI,YAAYD,aAAcA,MAEpD,GAAAI,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,WACzC,GAAA9E,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,SAAUU,IAAK,CAAC,YACrC,GAAAd,EAAAS,GAAA,EAACM,MAAAA,UAAKuS,IACLC,OAGJzJ,WA9EH,GAAI9I,GAAW,CAAC8C,EACd,MACE,GAAA9D,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,EAAE,EAAG1E,KAAM,CAACC,UAAW,SAAUE,WAAY,QAAQ,WAC5E,GAAAN,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,CAAC,YACxD,GAAAd,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,GAAAlB,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACqJ,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,GAAgB,WAAG,4BAM/C,IA6BsBiI,EA7BhBiB,EAA4B7P,MAAAA,EAAAA,KAAAA,EAAAA,EAAM6P,yBAAyB,CACjE,GAAIA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAA2BnH,UAAU,IAAK,cAC5C,MAAO,GAAAxM,EAAAS,GAAA,EAACoT,GAAAA,EAAeA,CAAAA,CAACC,MAAOH,IAGjC,GAAI,CAACA,GAA6B,CAACA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAA2B3F,OAAO,CAAC/J,MAAM,SAC1E,EAAgBiH,IAAI,CAAG,EAEnB,GAAAlL,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,EAAE,WACzB,GAAA7E,EAAAS,GAAA,EAACsT,GAAAA,CAAaA,CAAAA,CACZ5G,KAAK,aACLvM,MAAM,wBACNoJ,YAAY,+CAOlB,GAAAhK,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,EAAE,WACzB,GAAA7E,EAAAS,GAAA,EAACsT,GAAAA,CAAaA,CAAAA,CACZ5G,KAAK,aACLvM,MAAM,qBACNoJ,YAAY,qDAOpB,IAAMgK,EAAkBC,CADFvB,CAAAA,OAAAA,CAAAA,EAAAA,EAAU5O,IAAI,GAAd4O,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAgBwB,QAAQ,CAACC,YAAY,CAACC,iBAAiB,GAAI,EAAE,EAEhF3L,MAAM,CAAC,SAAC4L,CAAAA,QAAWA,aAAAA,EAAOC,UAAU,GACpCrO,GAAG,CAAC,SAACoO,CAAAA,SAAWA,EAAOE,QAAQ,EAAIF,EAAOG,OAAO,GAC9CC,EAAoBT,EAAgB/P,MAAM,EAAI+P,EAAgBU,KAAK,CAAC,SAACC,CAAAA,SAAMA,IAEjF,MACE,GAAA3U,EAAAC,IAAA,EAACc,MAAAA,WACE0T,EAAoB,KACnB,GAAAzU,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACmD,WAAY,GAAID,SAAU,EAAE,WACzC,GAAA7E,EAAAS,GAAA,EAACmU,GAAAA,EAAyBA,CAAAA,CAAAA,KAG9B,GAAA5U,EAAAS,GAAA,EAACoU,GAAAA,CAAaA,CAAAA,CACZC,UAAWnB,EAA0B3F,OAAO,CAACqC,KAAK,CAAC,EA/H3C,IAgIR0E,QAAS5S,EAAY4S,OAAO,GAE7BpB,EAA0B3F,OAAO,CAAC/J,MAAM,CAAG,EAC1C,GAAAjE,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAAC6E,OAAQ,CAACC,IAAK,EAAE,WACnB,GAAAhF,EAAAS,GAAA,EAACuU,EAAAA,EAAwBA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAK3Q,MAE9B,OAGV,MAiBF,EAEMsO,GAAsC5Q,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,mCAQ3CkT,GAAAA,CAAwBA,EAGtBzB,GAAkBzR,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,oCAiCvBC,EAAAA,CAAqBA,CACrBkT,GAAAA,CAAuBA,ygEC3L3BC,KAAAA,MAAY,CAACC,MACbD,KAAAA,MAAY,CAACE,MAEN,IAAMC,aAAe,WAC1B,IAAMC,EAASC,CAAAA,EAAAA,GAAAA,CAAAA,IACTC,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,IACVC,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,IAAdD,UAAAA,CACPhH,CAAAA,EAAAA,EAAAA,EAAAA,IACA8D,CAAAA,EAAAA,GAAAA,CAAAA,EAAiB,cAAyBjF,MAAA,CAAXmI,IAE/B,IAAMxT,EAAcgK,CAAAA,EAAAA,EAAAA,CAAAA,EAClB0J,GACA,CAACjS,UAAW,CAAC+R,WAAAA,CAAU,CAAC,GAGpB7R,EAAS3B,EAAR2B,IAAAA,CAEDgS,EACJhS,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMiS,wBAAwB,CAACvJ,UAAU,IAAK,oBAC1C1I,EAAKiS,wBAAwB,CAC7B,KAGAC,EAAeF,CAAAA,GACjB,CAAChE,EAAAA,GAAgBA,CAACK,SAAS,CAAEL,EAAAA,GAAgBA,CAACE,SAAS,CAAC,CAACjL,QAAQ,CAAC+O,EAAStQ,MAAM,EAG/E5F,EAAe0E,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BnC,EAAa,IAAO6T,GAuOnE,MACE,GAAAhW,EAAAC,IAAA,EAACsQ,EAAAA,CAAIA,CAAAA,WACH,GAAAvQ,EAAAS,GAAA,EAAC+P,EAAAA,CAAUA,CAAAA,CACT5P,MACE,GAAAZ,EAAAC,IAAA,EAACwQ,EAAAA,EAAOA,CAAAA,WACN,GAAAzQ,EAAAS,GAAA,EAAC6M,EAAAA,EAAIA,CAAAA,CAACzM,GAAG,sBAAsBM,MAAO,CAACqJ,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,GAAgB,WAAG,cAGhE,MACAkL,KAGLM,MACE,GAAAjW,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACW,IAAK,GAAIR,WAAY,QAAQ,YACtC0V,EAAe,GAAAhW,EAAAS,GAAA,EAACoB,EAAAA,EAAqBA,CAAAA,CAACjC,aAAcA,IAAmB,KACvEkW,EACC,GAAA9V,EAAAS,GAAA,EAACyV,GAAAA,EAAmBA,CAAAA,CAClBJ,SAAUA,EACVf,QAAS5S,EAAY4S,OAAO,CAC5BoB,cAAeL,EAAStQ,MAAM,GAAKsM,EAAAA,GAAgBA,CAACK,SAAS,GAE7D,UAITrI,WA7PH,GAAI,CAAChG,GAAQ,CAACA,EAAKiS,wBAAwB,CACzC,MACE,GAAA/V,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,GAAIyU,cAAaC,CAAAA,EAAAA,GAAAA,CAAAA,EAAO,mCACpC,GAAArW,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAIvB,GAAI4C,gBAAAA,EAAKiS,wBAAwB,CAACvJ,UAAU,CAC1C,MAAO,GAAAxM,EAAAS,GAAA,EAACoT,GAAAA,EAAeA,CAAAA,CAACC,MAAOhQ,EAAKiS,wBAAwB,GAE9D,GAAIjS,0BAAAA,EAAKiS,wBAAwB,CAACvJ,UAAU,CAC1C,MAAO,GAAAxM,EAAAS,GAAA,EAACsT,GAAAA,CAAaA,CAAAA,CAAC5G,KAAK,aAAavM,MAAOkD,EAAKiS,wBAAwB,CAACO,OAAO,GAGtF,MAgH8BR,EAyBrBA,EAzIHA,EAAWhS,EAAKiS,wBAAwB,CAE9C,SAASQ,WAAW/Q,CAAyD,EAC3E,IAAM6N,EAA4B,CAChC,CACEmD,MAAO,MACPtI,MAAO,oBAA+BV,MAAA,CAAXmI,EAC7B,EACD,CACD,OAAQnQ,GACN,IAAK,aACH6N,EAAQrD,IAAI,CACV,CACEwG,MAAO,SACPtI,MAAOuI,EAAAA,GAASA,CAACxT,OAAO,EAE1B,CACEuT,MAAO,SACPtI,MAAOuI,EAAAA,GAASA,CAACC,MAAM,EAEzB,CACEF,MAAO,SACPtI,MAAOuI,EAAAA,GAASA,CAACE,QAAQ,EAE3B,CACEH,MAAO,SACPtI,MAAOuI,EAAAA,GAASA,CAACzE,SAAS,EAE5B,CACEwE,MAAO,SACPtI,MAAOuI,EAAAA,GAASA,CAACG,WAAW,GAGhC,KACF,KAAK,WACHvD,EAAQrD,IAAI,CAAC,CACXwG,MAAO,SACPtI,MAAOuI,EAAAA,GAASA,CAACvT,OAAO,GAE1B,KACF,KAAK,SACHmQ,EAAQrD,IAAI,CAAC,CACXwG,MAAO,SACPtI,MAAOuI,EAAAA,GAASA,CAACtT,OAAO,GAE1BkQ,EAAQrD,IAAI,CAAC,CACXwG,MAAO,SACPtI,MAAOuI,EAAAA,GAASA,CAAC1E,QAAQ,EAG/B,CACA,MAAO8E,CAAAA,EAAAA,GAAAA,EAAAA,EAAoBxD,EAC7B,CAEA,IAAMyD,KAAqB,GAAA3F,EAAA5J,CAAA,WAAOmB,CAAAA,CAAoBqO,CAAAA,MAChDC,EAeUlT,EAZNmT,EAOAnT,4DAVJkT,EAA0B,CAAC,GAE3BD,EAAAA,MAAAA,MACW,SAAMxB,EAAO5R,KAAK,CAG7B,CACAA,MAAOuT,GACPtT,UAAW,CAAC+R,WAAAA,EAAYjN,SAAUyO,CAAAA,EAAAA,GAAAA,EAAAA,EAAgBzO,EAAS,CAC7D,WACM5E,CAAAA,EACJmT,sBAAAA,CARIA,EAAO5F,EAAAC,IAAA,IAQNxN,IAAI,CAACiS,wBAAwB,CAACvJ,UAAU,CACzCyK,EAAKnT,IAAI,CAACiS,wBAAwB,CAACqB,6BAA6B,CAChE,OAEFtT,CAAAA,OAAQA,CAAAA,EAAAA,EAAKuT,MAAM,GAAXvT,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAaG,MAAM,GAC7B+S,CAAAA,EAAS,CAACM,cAAexT,EAAKuT,MAAM,CAACpR,GAAG,CAAC,SAACsR,CAAAA,QAAM,IAAiBA,MAAAA,CAAbA,EAAE/S,KAAK,CAAC,OAAWgJ,MAAA,CAAN+J,EAAE7S,GAAG,CAAC,OAAIkE,IAAI,CAAC,IAAI,oBAGxF,SAAO6M,EAAQzF,IAAI,CAACtC,CAAAA,EAAAA,GAAAA,CAAAA,EAAuBhF,EAAUsO,OACvD,YArBkCtO,CAAAA,CAAoBqO,CAAAA,mCAuBtD,MACE,GAAA/W,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CACFyB,QAAS,GACTxB,KAAM,CACJC,UAAW,MACXC,eAAgB,gBAChBmX,KAAM,SACNlX,WAAY,QACd,EACA8V,cAAaC,CAAAA,EAAAA,GAAAA,CAAAA,EAAO,mCAEpB,GAAArW,EAAAS,GAAA,EAACgX,OAAAA,CACCpS,MAAM,UACNqS,OACE,GAAA1X,EAAAS,GAAA,EAAC6F,EAAAA,CAASA,CAAAA,CACR7B,UAAW,CAACkT,GAAIC,OAAO9B,IAAAA,EAASrR,SAAS,CAAQ,EACjD+B,WAAY,CAACqR,YAAa,GAAMpR,aAAc,EAAK,MAIzD,GAAAzG,EAAAS,GAAA,EAACgX,OAAAA,CACCpS,MAAM,WACNqS,OACE,GAAA1X,EAAAS,GAAA,EAACqX,SAAAA,CACCtT,MAAOsR,IAAAA,EAASrR,SAAS,CACzBC,IAAKoR,EAASnR,YAAY,CAAGmR,IAAAA,EAASnR,YAAY,CAAU,SAIlE,GAAA3E,EAAAS,GAAA,EAACgX,OAAAA,CACCpS,MAAM,sBACNqS,OACE,GAAA1X,EAAAS,GAAA,EAACsX,GAAAA,CAAuBA,CAAAA,CACtBC,qBAAsBlC,EAASmC,aAAa,EAAI,EAChDC,iBAAgB,OAAEpC,CAAAA,EAAAA,EAASqC,iBAAiB,GAA1BrC,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA4BsC,sBAAsB,KAI1E,GAAApY,EAAAS,GAAA,EAACgX,OAAAA,CAAOpS,MAAM,SAASqS,OAAQ,GAAA1X,EAAAS,GAAA,EAAC4X,GAAAA,CAAwBA,CAAAA,CAACvC,SAAUA,SAErE,GAAA9V,EAAAC,IAAA,EAAC+H,EAAAA,CAAKA,CAAAA,WACJ,GAAAhI,EAAAS,GAAA,EAACkF,QAAAA,UACC,GAAA3F,EAAAC,IAAA,EAAC2F,KAAAA,WACC,GAAA5F,EAAAS,GAAA,EAACoF,KAAAA,CAAG1E,MAAO,CAACC,MAAO,KAAK,WAAG,eAC3B,GAAApB,EAAAS,GAAA,EAACoF,KAAAA,UACC,GAAA7F,EAAAS,GAAA,EAAC6M,EAAAA,EAAIA,CAAAA,CAACzM,GAAI0V,WAAW,qBAAa,0BAEpC,GAAAvW,EAAAS,GAAA,EAACoF,KAAAA,UACC,GAAA7F,EAAAS,GAAA,EAAC6M,EAAAA,EAAIA,CAAAA,CAACzM,GAAI0V,WAAW,uBAAe,kBAEtC,GAAAvW,EAAAS,GAAA,EAACoF,KAAAA,UACC,GAAA7F,EAAAS,GAAA,EAAC6M,EAAAA,EAAIA,CAAAA,CAACzM,GAAI0V,WAAW,qBAAa,gBAEpC,GAAAvW,EAAAS,GAAA,EAACoF,KAAAA,UACC,GAAA7F,EAAAS,GAAA,EAAC6M,EAAAA,EAAIA,CAAAA,CAACzM,GAAI0V,WAAW,mBAAW,kBAItC,GAAAvW,EAAAS,GAAA,EAACqF,QAAAA,UAC4B,OAA1BgQ,CAAAA,EAAAA,EAASqC,iBAAiB,GAA1BrC,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA4BwC,qBAAqB,CAACrS,GAAG,CAAC,SAACqG,CAAAA,MAClDiM,EACAC,EACAC,EACAC,EAYJ,MAXIpM,gCAAAA,EAAME,UAAU,EAClB+L,EAAWjM,EAAMqM,qBAAqB,CACtCH,EAAalM,EAAMsM,uBAAuB,CAC1CH,EAAYnM,EAAMuM,yBAAyB,CAC3CH,EAASpM,EAAMwM,mBAAmB,GAElCP,EAAW,EACXG,EAASpM,EAAMoM,MAAM,CAAG,EAAI,EAC5BF,EAAalM,EAAMkM,UAAU,CAAG,EAAI,EACpCC,EAAYnM,EAAMyM,YAAY,CAAG,EAAI,GAGrC,GAAA/Y,EAAAC,IAAA,EAAC2F,KAAAA,CAECwQ,cAAaC,CAAAA,EAAAA,GAAAA,CAAAA,EAAO,sBAAuD7I,MAAA,CAAjC3D,CAAAA,EAAAA,EAAAA,EAAAA,EAAiByC,EAAM5D,QAAQ,cAEzE,GAAA1I,EAAAS,GAAA,EAAC4F,KAAAA,UACC,GAAArG,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOC,eAAgB,eAAe,YAC3D,GAAAL,EAAAS,GAAA,EAACM,MAAAA,UACC,GAAAf,EAAAS,GAAA,EAACuG,EAAAA,CAAUA,CAAAA,CACT1B,QAAS,kBACPwR,EACExK,EAAM5D,QAAQ,CACd4D,gCAAAA,EAAME,UAAU,YAInBF,EAAM5D,QAAQ,CAACC,IAAI,CAACC,IAAI,CAAC,SAG9B,GAAA5I,EAAAS,GAAA,EAACM,MAAAA,UACC,GAAAf,EAAAS,GAAA,EAACuY,UAAAA,CACCT,SAAUA,EACVC,WAAYA,EACZC,UAAWA,EACXC,OAAQA,WAKfpM,gCAAAA,EAAME,UAAU,CACf,GAAAxM,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAS,GAAA,EAAC4F,KAAAA,UAAIkS,IACL,GAAAvY,EAAAS,GAAA,EAAC4F,KAAAA,UAAImS,IACL,GAAAxY,EAAAS,GAAA,EAAC4F,KAAAA,UAAIoS,IACL,GAAAzY,EAAAS,GAAA,EAAC4F,KAAAA,UAAIqS,OAGP,GAAA1Y,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAS,GAAA,EAAC4F,KAAAA,UAAG,MACJ,GAAArG,EAAAS,GAAA,EAAC4F,KAAAA,UACEmS,EACC,GAAAxY,EAAAS,GAAA,EAACwY,GAAAA,CAAGA,CAAAA,CAAC9L,KAAK,UAAUyD,OAAO,mBAAU,gBAIrC,MAGJ,GAAA5Q,EAAAS,GAAA,EAAC4F,KAAAA,UAAIoS,EAAY,GAAAzY,EAAAS,GAAA,EAACwY,GAAAA,CAAGA,CAAAA,CAACrI,OAAO,mBAAU,cAAkB,MACzD,GAAA5Q,EAAAS,GAAA,EAAC4F,KAAAA,UAAIqS,EAAS,GAAA1Y,EAAAS,GAAA,EAACwY,GAAAA,CAAGA,CAAAA,CAACrI,OAAO,kBAAS,WAAe,WA/CjD/G,CAAAA,EAAAA,EAAAA,EAAAA,EAAiByC,EAAM5D,QAAQ,EAoD1C,UAKV,MA8BF,EAEM+O,OAAS,SAAAvV,CAAA,MAAEmD,EAAAA,EAAAA,KAAAA,CAAOqS,EAAAA,EAAAA,MAAAA,OACtB,GAAA1X,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,SAAUU,IAAK,CAAC,EAAGK,MAAO,CAAC+X,SAAU,OAAO,YACjE,GAAAlZ,EAAAS,GAAA,EAAC0Y,GAAAA,UAAO9T,IACR,GAAArF,EAAAS,GAAA,EAACM,MAAAA,UAAK2W,QAIV,SAASsB,UAAU9W,CAUlB,MATCqW,EADiBrW,EACjBqW,QAAAA,CACAC,EAFiBtW,EAEjBsW,UAAAA,CACAC,EAHiBvW,EAGjBuW,SAAAA,CACAC,EAJiBxW,EAIjBwW,MAAAA,CAOA,MACE,GAAA1Y,EAAAC,IAAA,EAACc,MAAAA,CACCI,MAAO,CACLG,aAAc,MACdC,gBAAiB6X,CAAAA,EAAAA,EAAAA,EAAAA,IACjB/O,QAAS,OACTC,oBAAqB,GAAoCkD,MAAA,CAAjC,IAAOiL,EAAaF,EAAS,MACnD/K,MAAA,CADuD,IAAOkL,EAAUH,EAAS,MAElF/K,MAAA,CADC,IAAOgL,EAAcD,EACtB,KACDxM,iBAAkB,OAClB1K,OAAQ,OACRD,MAAO,QACP+I,SAAU,QACZ,YAEA,GAAAnK,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACyJ,WAAYyO,CAAAA,EAAAA,EAAAA,EAAAA,GAAkB,IAC3C,GAAArZ,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACyJ,WAAY0O,CAAAA,EAAAA,EAAAA,EAAAA,GAAgB,IACzC,GAAAtZ,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACyJ,WAAYnJ,CAAAA,EAAAA,EAAAA,EAAAA,GAAiB,MAGhD,CAEA,IAAM0X,GAAQpR,EAAAA,EAAMA,CAAChH,GAAG,CAAAwN,UAAA,8DACb9D,CAAAA,EAAAA,EAAAA,CAAAA,KAKLqN,SAAW,SAAA5V,CAAA,MAAEsC,EAAAA,EAAAA,KAAAA,CAAOE,EAAAA,EAAAA,GAAAA,CACF/B,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,UAAgB,CAAC,SAAC4W,CAAAA,CAAWhS,CAAAA,SAAWgS,EAAI,GAAG,MAA3DC,GAAY7W,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,EACtBA,EAAAA,SAAe,CAAC,WACd,IAAI+B,GAIJ,IAAM+U,EAAaC,YAAYF,EAAU,KACzC,OAAO,kBAAMG,cAAcF,IAC7B,EAAG,CAACjV,EAAOE,EAAI,EACf,IAAM0Q,EAAW1Q,EAAMA,EAAMF,EAAQgL,KAAKC,GAAG,GAAKjL,EAElD,MAAO,GAAAxE,EAAAS,GAAA,EAACmZ,OAAAA,UAAMC,eAAezE,IAC/B,EAEaS,GAAyB9T,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,+BAmDrCC,EAAAA,CAAqBA,CACrB8X,GAAAA,EAAkCA,EAGzB5C,GAA0CnV,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,oBAiBpD8X,eAAiB,SAACzE,CAAAA,EAEtB,IAAM2E,EAAUC,KAAKC,KAAK,CAAC7E,EAAa,IAAc,IAChD8E,EAAQF,KAAKC,KAAK,CAAC7E,EAAa,KAAmB,IACnD+E,EAAOH,KAAKC,KAAK,CAAC7E,EAAY,OAEhC1B,EAAS,GAWb,OAVIyG,EAAO,EAETzG,GADU,GAAQlG,MAAA,CAAL2M,EAAK,MACR,GAAS3M,MAAA,CAAN0M,EAAM,KACVA,EAAQ,EAEjBxG,GADU,GAASlG,MAAA,CAAN0M,EAAM,MACT,GAAW1M,MAAA,CAARuM,EAAQ,KACZA,EAAU,GAEnBrG,CAAAA,GADU,GAAWlG,MAAA,CAARuM,EAAQ,MACX,GAAWvM,MAAA,CAdPwM,KAAKC,KAAK,CAAC7E,EAAY,IAAQ,IAcxB,MAEhB1B,EAAO0G,IAAI,EACpB,49BCzbO,IAAMC,mBAAqB,SAAAnY,CAAA,MAmDfyB,EAAT+P,EAjCJ/P,EAlB8B2W,EAAAA,EAAAA,MAAAA,CAAQC,EAAAA,EAAAA,SAAAA,CAC1C5L,CAAAA,EAAAA,EAAAA,EAAAA,IACA8D,CAAAA,EAAAA,GAAAA,CAAAA,EAAiB,qBAEjB,IAAM9O,EAAQwI,CAAAA,EAAAA,EAAAA,CAAAA,EACZqO,GAAAA,EAAyBA,CACzB,CACEC,4BAA6B,EAC/B,GAEI7a,EAAe0E,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BX,EAAOiQ,EAAAA,EAAeA,EAE/D8G,EAA0B/X,EAAAA,OAAa,CAAC,eACxCgB,EAuGagX,EACbC,QAxGJ,CAAIjX,OAAAA,CAAAA,EAAAA,EAAMG,IAAI,GAAVH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAYkX,aAAa,CAACrO,UAAU,IAAK,mBAuG5BmO,EAtGAhX,EAAMG,IAAI,CAAC+W,aAAa,CAACC,KAAK,CAuG3CF,EAOF,CAAC,EAELD,EAAOhR,OAAO,CAAC,SAAC2C,CAAAA,EACd,GAAKA,EAAMG,UAAU,EAGrB,IAAMY,EAAYf,EAAMG,UAAU,CAACY,SAAS,CACtC0N,EAAiBzO,EAAMG,UAAU,CAACG,UAAU,CAACC,IAAI,CACjD5B,EAAM,GAAiB8P,MAAAA,CAAd1N,EAAU,MAAmBG,MAAA,CAAfuN,GACvBhK,EAAS6J,CAAM,CAAC3P,EAAI,EAAI,CAC5BoC,UAAAA,EACA0N,eAAAA,EACAJ,OAAQ,EAAE,EAEZ5J,EAAO4J,MAAM,CAAC3K,IAAI,CAAC1D,GACnBsO,CAAM,CAAC3P,EAAI,CAAG8F,EAChB,GACOsB,OAAO2I,MAAM,CAACJ,IA5HZ,EAAE,EACR,CAAW,OAAVjX,CAAAA,EAAAA,EAAMG,IAAI,GAAVH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAYkX,aAAa,CAAC,EAEQrY,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAA+B,CACnEC,SAAU,IACVC,OAAQ,SAACuY,CAAAA,SAAQA,EAAGC,WAAW,CAAGpY,KAAKC,KAAK,CAACkY,EAAGC,WAAW,EAAI,IAC/D9X,OAAQ,SAAC8X,CAAAA,QAAiB,CAACA,YAAaA,EAAcpY,KAAKQ,SAAS,CAAC4X,GAAetW,KAAAA,CAAS,EAC/F,MAJOuW,EAA+B3Y,CAAAA,CAAAA,EAAAA,CAAlB4Y,EAAkB5Y,CAAAA,CAAAA,EAAAA,CAMhC6Y,EAAgB1Y,EAAAA,OAAa,CAAC,iBAClC,KAAIwY,EACKT,EAEFA,EAAwBjS,MAAM,CAAC,SAAC6S,CAAAA,EACrC,MACE,CAACA,EAAMjO,SAAS,EAAIkO,EAAAA,EAAkBC,WAAW,GAAGzU,QAAQ,CAACoU,EAAYK,WAAW,KACpFF,EAAMP,cAAc,CAACS,WAAW,GAAGzU,QAAQ,CAACoU,EAAYK,WAAW,GAEvE,EACF,EAAG,CAACd,EAAyBS,EAAY,EAEnCrS,EAAYnG,EAAAA,MAAY,CAAwB,MAEhDoG,EAAiBC,CAAAA,EAAAA,EAAAA,cAAAA,EAAe,CACpCH,MAAOwS,EAAcpX,MAAM,CAC3BgF,iBAAkB,kBAAMH,EAAUI,OAAO,EACzCC,aAAc,kBAAM,IACpBC,SAAU,CACZ,GAEMC,EAAcN,EAAeO,YAAY,GACzCC,EAAQR,EAAeS,eAAe,GAwC5C,MACE,GAAAxJ,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAC,IAAA,EAACc,MAAAA,CAAII,MAAO,CAACuJ,SAAU,SAAU1F,IAAK,EAAG2F,OAAQ,CAAC,YAChD,GAAA3K,EAAAS,GAAA,EAAC6Z,EAAAA,CAAO1a,aAAcA,IACtB,GAAAI,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CACFyB,QAAS,CAACmD,WAAY,GAAID,SAAU,EAAE,EACtC1E,KAAM,CAACG,WAAY,SAAUQ,IAAK,GAAI2a,KAAM,CAAC,YAE7C,GAAAzb,EAAAS,GAAA,EAAC8Z,EAAAA,CAAUmB,SAAS,WACpB,GAAA1b,EAAAS,GAAA,EAACkb,GAAAA,EAASA,CAAAA,CACRzN,MAAOiN,EACPxT,SAAU,SAACyJ,CAAAA,EACTgK,EAAehK,EAAEL,MAAM,CAAC7C,KAAK,CAC/B,EACApC,YAAY,gCAnDd4H,EAAAA,OAAS/P,CAAAA,EAAAA,EAAMG,IAAI,GAAVH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAYkX,aAAa,CACxC,CAAKlX,EAAMG,IAAI,EAAIH,EAAM3C,OAAO,CAE5B,GAAAhB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CAACG,WAAY,SAAUD,eAAgB,SAAUD,UAAW,SAAUqb,KAAM,CAAC,EACnFta,MAAO,CAACC,MAAO,MAAM,WAErB,GAAApB,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAInBwS,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQlH,UAAU,IAAK,cAEvB,GAAAxM,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CAACG,WAAY,SAAUD,eAAgB,SAAUD,UAAW,SAAUqb,KAAM,CAAC,EACnFta,MAAO,CAACC,MAAO,MAAM,WAErB,GAAApB,EAAAS,GAAA,EAACoT,GAAAA,EAAeA,CAAAA,CAACC,MAAOJ,MAM5B,GAAA1T,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,QAAQ,EAAGe,MAAO,CAACgJ,SAAU,QAAQ,WAC1D,GAAAnK,EAAAC,IAAA,EAAC2b,GAAAA,EAASA,CAAAA,CAACxR,IAAKtB,YACd,GAAA9I,EAAAS,GAAA,EAACob,iBAAAA,CAAAA,GACD,GAAA7b,EAAAS,GAAA,EAACsK,GAAAA,EAAKA,CAAAA,CAACC,aAAc3B,WAClBE,EAAMtD,GAAG,CAAC,SAAA/D,CAAA,MAAEiE,EAAAA,EAAAA,KAAAA,CAAO8E,EAAAA,EAAAA,GAAAA,CAAKC,EAAAA,EAAAA,IAAAA,CAAM1G,EAAAA,EAAAA,KAAAA,CACvB8W,EAAQD,CAAa,CAAClV,EAAM,CAClC,MAAO,GAAAnG,EAAAS,GAAA,EAACqb,WAAAA,CAAqBtX,MAAOA,EAAOnD,OAAQ6J,EAAMoQ,MAAOA,GAAxCrQ,EAC1B,aA4BZ,EAmCMhD,GAAmB,sBAEzB,SAAS4T,mBACP,MACE,GAAA7b,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CACF+E,OAAO,iBACP9D,MAAO,CACLkJ,QAAS,OACTC,oBAAqBrC,GACrB5G,OAAQ,OACRkJ,SAAU,OACVC,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,IACPC,SAAU,SACV1F,IAAK,EACL2F,OAAQ,EACRC,WAAYC,CAAAA,EAAAA,EAAAA,EAAAA,GACd,YAEA,GAAA7K,EAAAS,GAAA,EAACqK,GAAAA,EAAUA,CAAAA,UAAC,eACZ,GAAA9K,EAAAS,GAAA,EAACqK,GAAAA,EAAUA,CAAAA,UAAC,YACZ,GAAA9K,EAAAS,GAAA,EAACqK,GAAAA,EAAUA,CAAAA,UAAC,mBACZ,GAAA9K,EAAAS,GAAA,EAACqK,GAAAA,EAAUA,CAAAA,UAAC,gBACZ,GAAA9K,EAAAS,GAAA,EAACqK,GAAAA,EAAUA,CAAAA,UAAC,mBAGlB,CAEA,IAAMyQ,GAAmB,mBAMzB,SAASO,WAAW5Z,CAAgC,MA6ErCoZ,EAAAA,EA7EMja,EAADa,EAACb,MAAAA,CAAQmD,EAATtC,EAASsC,KAAAA,CAAO8W,EAAhBpZ,EAAgBoZ,KAAAA,CAC5BS,EAAYpZ,EAAAA,OAAa,CAC7B,kBAAM2Y,EAAMX,MAAM,CAAC1U,GAAG,CAAC,SAACqG,CAAAA,QAAW,CAAC3D,KAAM2D,EAAMrB,GAAG,CAACtC,IAAI,KACxD,CAAC2S,EAAMX,MAAM,CAAC,EAGVqB,EAAmBC,CAAAA,EAAAA,GAAAA,EAAAA,EAAkBF,GAApCC,cAAAA,CAEDpZ,EAAWD,EAAAA,OAAa,CAAC,WAG7B,IAAMC,EAAW,CACfsZ,WAAY,EAAE,CACdxD,OAAQ,EAAE,CACVyD,WAAY,EAAE,CACdC,QAAS,EAAE,CACXpb,QAAS,EACX,SACKqR,OAAOC,IAAI,CAAC0J,GAAgB/X,MAAM,CAIvCoO,OAAOC,IAAI,CAAC0J,GAAgBrS,OAAO,CAAC,SAACsB,CAAAA,EACnC,IAAMoR,EAAgBL,CAAc,CAAC/Q,EAAI,CACnCqB,EAAQgP,EAAMX,MAAM,CAAC2B,IAAI,CAAC,SAAChQ,CAAAA,QAAUzC,CAAAA,EAAAA,EAAAA,EAAAA,EAAiByC,EAAMrB,GAAG,IAAMA,IAC3E,GAAI,CAACqB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAOG,UAAU,EAAE,CACtB8P,QAAQC,IAAI,CAAC,2CAA4CvR,GACzD,MACF,CACA,IAAMzF,EAASiX,CAAAA,EAAAA,GAAAA,EAAAA,EAA4B,CACzC/T,SAAU4D,EAAMrB,GAAG,CACnBwB,WAAYH,EAAMG,UAAU,CAC5BiQ,SAAUL,EACVM,SAAU,EACZ,GACA,OAAQnX,EAAOoX,IAAI,EACjB,KAAKC,GAAAA,EAAUA,CAACC,OAAO,CACrBla,EAAS5B,OAAO,CAAG,GACnB,KACF,MAAK6b,GAAAA,EAAUA,CAACE,gBAAgB,CAC9Bna,EAASuZ,UAAU,CAACnM,IAAI,CAAC,CAAC1D,MAAAA,EAAO9G,OAAAA,CAAM,GACvC,KACF,MAAKqX,GAAAA,EAAUA,CAACG,eAAe,CAC7Bpa,EAASsZ,UAAU,CAAClM,IAAI,CAAC,CAAC1D,MAAAA,EAAO9G,OAAAA,CAAM,GACvC,KACF,MAAKqX,GAAAA,EAAUA,CAACI,qBAAqB,CAGrC,KAAKJ,GAAAA,EAAUA,CAACK,eAAe,CAF7Bta,EAASwZ,OAAO,CAACpM,IAAI,CAAC,CAAC1D,MAAAA,EAAO9G,OAAAA,CAAM,GACpC,KAIF,MAAKqX,GAAAA,EAAUA,CAACM,aAAa,CAC3Bva,EAASuZ,UAAU,CAACnM,IAAI,CAAC,CAAC1D,MAAAA,EAAO9G,OAAAA,CAAM,GACvC,KACF,MAAKqX,GAAAA,EAAUA,CAACO,cAAc,CAC5Bxa,EAAS8V,MAAM,CAAC1I,IAAI,CAAC,CAAC1D,MAAAA,EAAO9G,OAAAA,CAAM,GACnC,KACF,MAAKqX,GAAAA,EAAUA,CAACQ,kBAAkB,CAChCza,EAASwZ,OAAO,CAACpM,IAAI,CAAC,CAAC1D,MAAAA,EAAO9G,OAAAA,CAAM,GACpC,KACF,MAAKqX,GAAAA,EAAUA,CAACS,YAAY,CAC1B1a,EAASsZ,UAAU,CAAClM,IAAI,CAAC,CAAC1D,MAAAA,EAAO9G,OAAAA,CAAM,GACvC,KACF,MAAKqX,GAAAA,EAAUA,CAACU,iBAAiB,CAC/B3a,EAAS8V,MAAM,CAAC1I,IAAI,CAAC,CAAC1D,MAAAA,EAAO9G,OAAAA,CAAM,GACnC,KACF,MAAKqX,GAAAA,EAAUA,CAACW,kBAAkB,CAChC5a,EAASwZ,OAAO,CAACpM,IAAI,CAAC,CAAC1D,MAAAA,EAAO9G,OAAAA,CAAM,GACpC,KACF,MAAKqX,GAAAA,EAAUA,CAACY,uBAAuB,CACrC7a,EAASsZ,UAAU,CAAClM,IAAI,CAAC,CAAC1D,MAAAA,EAAO9G,OAAAA,CAAM,EAE3C,CACF,GAtDE5C,EAAS5B,OAAO,CAAG,GACZ4B,CAuDX,EAAG,CAACoZ,EAAgBV,EAAMX,MAAM,CAAC,EAE3B+C,EAAAA,OAAOpC,CAAAA,EAAAA,EAAMX,MAAM,CAAC2B,IAAI,CAAC,SAAChQ,CAAAA,MAAUA,SAAgB,OAAhBA,CAAAA,EAAAA,EAAMG,UAAU,GAAhBH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkBM,UAAU,KAAzD0O,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAA4D7O,UAAU,GAAtE6O,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAwE1O,UAAU,CACzFF,EAAcC,CAAAA,EAAAA,GAAAA,EAAAA,EAAiB+Q,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAM7Q,IAAI,GAAI,GAAI6Q,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAM5Q,QAAQ,CAACD,IAAI,GAAI,IAE3C8Q,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,IAA5BC,EAA4BD,EAA5BC,cAAAA,CAAgBC,EAAYF,EAAZE,QAAAA,CAEjBC,EAAsB/B,EAAU9X,MAAM,GAAKoO,OAAOC,IAAI,CAAC0J,GAAgB/X,MAAM,CAC7E8Z,EAAcD,EAAsB,GAAK,IAE/C,MACE,GAAA9d,EAAAS,GAAA,EAACsM,GAAAA,EAAGA,CAAAA,CAAC3B,QAAS/J,EAAQgK,OAAQ7G,WAC5B,GAAAxE,EAAAC,IAAA,EAAC+M,GAAOA,CAAC/H,OAAO,mBACd,GAAAjF,EAAAS,GAAA,EAACud,KAAAA,UACC,GAAAhe,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOC,eAAgB,gBAAiBob,KAAM,CAAC,YACpE,GAAAzb,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,SAAUU,IAAK,EAAG2a,KAAM,CAAC,YAC9C,GAAAzb,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOU,IAAK,CAAC,YAClC,GAAAd,EAAAS,GAAA,EAACgN,EAAAA,EAAIA,CAAAA,CAACZ,KAAK,gBACVyO,EAAMjO,SAAS,CACd,GAAArN,EAAAS,GAAA,EAAC6M,EAAAA,EAAIA,CAAAA,CACHnM,MAAO,CAAC8c,WAAY,GAAG,EACvBpd,GAAI0M,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBb,EAAa,iBAAiCc,MAAA,CAAhB8N,EAAMjO,SAAS,YAEzEiO,EAAMjO,SAAS,GAGlBkO,MAGJ,GAAAvb,EAAAS,GAAA,EAACM,MAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAQ6c,GAAAA,UACP,GAAA5d,EAAAS,GAAA,EAACyd,GAAAA,CAAsBC,SAAUN,EAASzc,KAAK,UAC7C,GAAApB,EAAAS,GAAA,EAAC2d,GAAAA,CAAcA,CAAAA,CAAC1R,YAAaA,EAAa2R,YAAa,aAI7D,GAAAre,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,SAAUC,eAAgB,QAAQ,WACtDyd,EAAsB,GAAA9d,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cAAiB,YAI/D,GAAAlB,EAAAS,GAAA,EAACud,KAAAA,UACEpb,EAASwZ,OAAO,CAACnY,MAAM,CACtB,GAAAjE,EAAAS,GAAA,EAAC6d,cAAAA,CACC3D,OAAQ/X,EAASwZ,OAAO,CACxBmC,SAAU,SAAArc,CAAA,MAAEsD,EAAAA,EAAAA,MAAAA,QACV,EAAWoX,IAAI,GAAKC,GAAAA,EAAUA,CAACW,kBAAkB,EACxChY,EAAOgZ,UAAU,EAAI,CAGhC,EACAC,UAAU,mBAEV,GAAAze,EAAAS,GAAA,EAACwY,GAAAA,CAAGA,CAAAA,CAACrI,OAAO,gBACV,GAAA5Q,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,CAAC,YACxD,GAAAd,EAAAS,GAAA,EAACM,MAAAA,CACCI,MAAO,CACLC,MAAO,OACPC,OAAQ,OACR4D,OAAQ,aAAkCuI,MAAA,CAArBkR,CAAAA,EAAAA,EAAAA,EAAAA,KACrBpd,aAAc,KAChB,IAEDsB,EAASwZ,OAAO,CAACnY,MAAM,QAK9B8Z,IAGJ,GAAA/d,EAAAS,GAAA,EAACud,KAAAA,UACEpb,EAAS8V,MAAM,CAACzU,MAAM,CACrB,GAAAjE,EAAAS,GAAA,EAAC6d,cAAAA,CACC3D,OAAQ/X,EAAS8V,MAAM,CACvB6F,SAAU,SAAArc,CAAA,MAAEsD,EAAAA,EAAAA,MAAAA,QACV,EAAWoX,IAAI,GAAKC,GAAAA,EAAUA,CAACU,iBAAiB,EACvC/X,EAAOmZ,SAAS,EAAI,CAG/B,EACAF,UAAU,kBAEV,GAAAze,EAAAS,GAAA,EAACwY,GAAAA,CAAGA,CAAAA,CAACrI,OAAO,kBACV,GAAA5Q,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,CAAC,YACxD,GAAAd,EAAAS,GAAA,EAACM,MAAAA,CACCI,MAAO,CACLC,MAAO,EACPC,OAAQ,EACRud,WAAY,wBACZC,YAAa,wBACbC,aAAc,iBACdzU,QAAS,cACX,IAEDzH,EAAS8V,MAAM,CAACzU,MAAM,QAK7B8Z,IAGJ,GAAA/d,EAAAS,GAAA,EAACud,KAAAA,UACEpb,EAASuZ,UAAU,CAAClY,MAAM,CACzB,GAAAjE,EAAAS,GAAA,EAAC6d,cAAAA,CACC3D,OAAQ/X,EAASuZ,UAAU,CAC3BoC,SAAU,SAAArc,CAAA,MAAEsD,EAAAA,EAAAA,MAAAA,QACV,EAAWoX,IAAI,GAAKC,GAAAA,EAAUA,CAACM,aAAa,EACnC3X,EAAOuZ,gBAAgB,EAAI,CAGtC,EACAN,UAAU,yBAEV,GAAAze,EAAAS,GAAA,EAACwY,GAAAA,CAAGA,CAAAA,CAACrI,OAAO,UAAUzD,KAAK,mBACxBvK,EAASuZ,UAAU,CAAClY,MAAM,KAI/B8Z,IAGJ,GAAA/d,EAAAS,GAAA,EAACud,KAAAA,UACEpb,EAASsZ,UAAU,CAACjY,MAAM,CACzB,GAAAjE,EAAAS,GAAA,EAAC6d,cAAAA,CACC3D,OAAQ/X,EAASsZ,UAAU,CAC3BqC,SAAU,SAAArc,CAAA,MAAEsD,EAAAA,EAAAA,MAAAA,QACV,EAAWoX,IAAI,GAAKC,GAAAA,EAAUA,CAACY,uBAAuB,EAC7CjY,EAAOwZ,eAAe,EAAI,CAGrC,EACAP,UAAU,wBAEV,GAAAze,EAAAS,GAAA,EAACwY,GAAAA,CAAGA,CAAAA,CAACrI,OAAO,mBACV,GAAA5Q,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,CAAC,YACxD,GAAAd,EAAAS,GAAA,EAACM,MAAAA,CACCI,MAAO,CACLI,gBAAiB8X,CAAAA,EAAAA,EAAAA,EAAAA,IACjBjY,MAAO,OACPC,OAAQ,OACRC,aAAc,KAChB,IAEDsB,EAASsZ,UAAU,CAACjY,MAAM,QAKjC8Z,QAMZ,CAEA,IAAM/Q,GAAUjF,CAAAA,EAAAA,EAAAA,EAAAA,EAAO7H,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,kEAEC+H,IAOrB+V,KAAO,SAAA9b,CAAA,MAAE+c,EAAAA,EAAAA,QAAAA,CACb,MACE,GAAAjf,EAAAS,GAAA,EAACwM,GAAAA,EAAOA,CAAAA,CAAC9L,MAAO,CAACqJ,MAAO0U,CAAAA,EAAAA,EAAAA,EAAAA,GAAkB,WACxC,GAAAlf,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUmb,KAAM,CAAC,WAAIwD,KAGrE,EAEMf,GAAwBnW,EAAAA,EAAMA,CAAChH,GAAG,CAAAwN,UAAA,oEAI3B9D,CAAAA,EAAAA,EAAAA,CAAAA,IAEI,SAAAvI,CAAA,MAAEic,EAAAA,EAAAA,QAAAA,QAAeA,EAAW,QAAU,GAAY3Q,MAAA,CAAT2Q,EAAS,QAQnE,SAASG,cAAcpc,CAUtB,MATCyY,EADqBzY,EACrByY,MAAAA,CACAsE,EAFqB/c,EAErB+c,QAAAA,CACAV,EAHqBrc,EAGrBqc,QAAAA,CACAE,EAJqBvc,EAIrBuc,SAAAA,CAOA,MACE,GAAAze,EAAAS,GAAA,EAAC0e,GAAAA,UACC,GAAAnf,EAAAS,GAAA,EAAC2e,GAAAA,CAAMA,CAAAA,CACL7V,MAAOoR,EACP0E,cAAe,SAAC1b,CAAAA,CAAO2b,CAAAA,QACrBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAuBD,EAAKhT,KAAK,CAACrB,GAAG,EAClCuU,iBAAiB,GACjBzY,QAAQ,CAACpD,EAAM6b,iBAAiB,KAErCC,aAAc,SAACH,CAAAA,EACb,IAAMzW,EAAQ0V,EAASe,GACvB,MACE,GAAAtf,EAAAS,GAAA,EAACif,GAAAA,CAAoB7e,GAAI6M,CAAAA,EAAAA,GAAAA,CAAAA,EAAuB4R,EAAKhT,KAAK,CAACrB,GAAG,EAAG8F,OAAO,kBACtE,GAAA/Q,EAAAS,GAAA,EAACkf,GAAAA,EAAQA,CAAAA,CAEPC,KACE,GAAA5f,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,CAAC,YACxD,GAAAd,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAAC0e,YAAa,KAAK,WAC7B,GAAA7f,EAAAS,GAAA,EAACgN,EAAAA,EAAIA,CAAAA,CAACZ,KAAK,YAEb,GAAA7M,EAAAS,GAAA,EAACM,MAAAA,CACCI,MAAO,CAACgJ,SAAU,SAAU2V,WAAY,SAAUC,aAAc,UAAU,WAEzER,CAAAA,EAAAA,EAAAA,EAAAA,EAAuBD,EAAKhT,KAAK,CAACrB,GAAG,IAEvCpC,GAASA,EAAQ,EAChB,GAAA7I,EAAAC,IAAA,EAACuL,EAAAA,EAAOA,CAAAA,CAACrK,MAAO,CAACqJ,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,GAAgB,YACrCuV,CAAAA,EAAAA,GAAAA,EAAAA,EAAqBnX,GAAO,IAAE4V,KAE/B,SAfHc,CAAAA,EAAAA,EAAAA,EAAAA,EAAuBD,EAAKhT,KAAK,CAACrB,GAAG,IAqBlD,EACAgV,aAAc,WAAO,WAEpBhB,KAIT,CAEA,IAAME,GAAgBpX,EAAAA,EAAMA,CAAChH,GAAG,CAAAwN,UAAA,qEAO1BmR,GAAsB3X,CAAAA,EAAAA,EAAAA,EAAAA,EAAOuF,EAAAA,EAAIA,EAAAA,UAAAA,CAAAA,kGC9hB1B4S,iBAAmB,WAC9B,IAAgDvd,EAAAA,EAAAA,UAAgB,CAACwd,GAAAA,EAAgBA,EAA1EC,EAAyCzd,EAAzCyd,QAAAA,CAAUC,EAA+B1d,EAA/B0d,YAAAA,CAAcC,EAAiB3d,EAAjB2d,aAAAA,CACP3d,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAAhC4d,EAAiB5d,CAAAA,CAAAA,EAAAA,CAAX6d,EAAW7d,CAAAA,CAAAA,EAAAA,CACxB,MACE,GAAA3C,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAC,IAAA,EAACwgB,GAAAA,EAAMA,CAAAA,CACLC,qBAAoB,GACpBC,kBAAiB,GACjBxY,OAAQoY,EACRpf,MAAO,CAACC,MAAO,MAAM,EACrBwf,QAAS,kBAAMJ,EAAQ,eAEvB,GAAAxgB,EAAAS,GAAA,EAACogB,GAAAA,EAAYA,CAAAA,CAAC1T,KAAK,OAAO9H,MAAM,0BAChC,GAAArF,EAAAS,GAAA,EAACqgB,GAAAA,CAAYA,CAAAA,CACXC,QAASX,EACTY,SAAU,kBAAMR,EAAQ,KACxBS,SAAUX,EACV5E,SAAU2E,IAEZ,GAAArgB,EAAAS,GAAA,EAACygB,GAAAA,EAAYA,CAAAA,UACX,GAAAlhB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACqD,IAAK,CAAC,WACnB,GAAAhF,EAAAS,GAAA,EAAC0gB,GAAAA,EAAMA,CAAAA,CAACvQ,OAAO,OAAOtL,QAAS,kBAAMkb,EAAQ,cAAQ,gBAO3D,GAAAxgB,EAAAS,GAAA,EAAC0gB,GAAAA,EAAMA,CAAAA,CACLC,SAAQ,GACRjU,KAAM,GAAAnN,EAAAS,GAAA,EAACgN,EAAAA,EAAIA,CAAAA,CAACZ,KAAK,WACjBwU,UAAW,GAAArhB,EAAAS,GAAA,EAACgN,EAAAA,EAAIA,CAAAA,CAACZ,KAAK,gBACtBvH,QAAS,kBAAMkb,EAAQ,cAEtB,GAA6BJ,MAAAA,CAA1BC,EAAapc,MAAM,CAAC,QAAsBuJ,MAAA,CAAhB4S,EAASnc,MAAM,MAIrD,cCpCaqd,cAAgB,SAC3BC,CAAAA,EAEA,IAAMC,EAAW7e,EAAAA,WAAiB,CAChC,SAACuL,CAAAA,EACC,OAAQA,GACN,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,KACH,OAAOA,CACT,SACE,OAAOqT,CACX,CACF,EACA,CAACA,EAAa,EAGoBE,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAtBd,mCAsBmDD,GAAAA,GAAlEE,EAA6BD,CAAAA,CAAAA,EAAAA,CAAjBE,EAAiBF,CAAAA,CAAAA,EAAAA,CAC9BG,EAA2Bjf,EAAAA,WAAiB,CAChD,SAACuL,CAAAA,EACCyT,EAAczT,GAASqT,EACzB,EACA,CAACA,EAAcI,EAAc,EAG/B,OAAOhf,EAAAA,OAAa,CAClB,iBAAM,CAAC+e,EAAYE,EAAyB,EAC5C,CAACF,EAAYE,EAAyB,CAE1C,+WCpCO,IAAMC,GAAiC9f,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,o2DCe1C,IAAM+f,mBAAqB,SAACC,CAAAA,MAAyBC,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAyB,CAAC,EAC/DD,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,GAAdvd,EAAcud,CAAAA,CAAAA,EAAAA,CAAPrd,EAAOqd,CAAAA,CAAAA,EAAAA,CAEfE,EAAWzd,EAAQ,IACnB0d,EAASxd,EAAM,IAEfgO,EAAYvG,CAAAA,EAAAA,EAAAA,CAAAA,EAAsDgW,GAAoB,CAC1F1H,4BAA6B,GAI7BpO,YAAa,WACbzI,UAAW,CACTwe,iBAAkB,GAAAC,GAAA9a,CAAA,KAAA4I,EAAA5I,CAAA,KACbya,GAAAA,CACHpf,SAAU,CAAC6T,EAAAA,GAASA,CAACzE,SAAS,CAAEyE,EAAAA,GAASA,CAACxT,OAAO,CAAC,CAClDqf,cAAeJ,IAEjBK,iBAAkB,GAAAF,GAAA9a,CAAA,KAAA4I,EAAA5I,CAAA,KACbya,GAAAA,CACHpf,SAAUW,MAAMC,IAAI,CAACgf,GAAAA,EAAYA,EACjCF,cAAeJ,EACfO,aAAcR,IAEhBS,WAAYT,EACZU,WAAYT,CACd,CACF,GAEOpe,EAA+B4O,EAA/B5O,IAAAA,CAAMiC,EAAyB2M,EAAzB3M,YAAAA,CAEP6c,EAAiB5hB,EAFIA,OAAAA,EAEO,CAAC8C,EACkBA,EAAAA,GAAQiC,GAAgB,CAAC,EAAvE8c,EAA8C/e,EAA9C+e,YAAAA,CAAcC,EAAgChf,EAAhCgf,UAAAA,CAAYC,EAAoBjf,EAApBif,gBAAAA,CAE3BC,EAAergB,EAAAA,OAAa,CAAC,WACjC,IAAMsD,EAAyC,CAAC,EAC1CwJ,EAAMD,KAAKC,GAAG,GA6CpB,MAzCE,GAAAW,EAAA7I,CAAA,EAAIsb,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAcrW,UAAU,IAAK,OAASqW,EAAa7U,OAAO,CAAG,EAAE,EAAAR,MAAA,CACnE,GAAA4C,EAAA7I,CAAA,EAAIub,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAYtW,UAAU,IAAK,OAASsW,EAAW9U,OAAO,CAAG,EAAE,GAC/DrE,OAAO,CAAC,SAACsZ,CAAAA,EACT,GAAKA,EAAIC,SAAS,EAGbD,EAAIE,gBAAgB,EAKtBC,CAAAA,EAAAA,GAAAA,CAAAA,EACC,CAAC5e,MAAAA,EAAOE,IAAAA,CAAG,EACX,CACEF,MAAOye,IAAAA,EAAIC,SAAS,CACpBxe,IAAKue,EAAII,OAAO,CAAGJ,IAAAA,EAAII,OAAO,CAAU5T,CAC1C,IAMJ,IAAM6T,EAAYC,WAChB,CACE1W,KAAMoW,EAAIE,gBAAgB,CAACpI,cAAc,CACzCjO,SAAUmW,EAAIE,gBAAgB,CAACK,sBAAsB,EAEvDP,EAAIQ,YAAY,CAGlBxd,CAAAA,CAAG,CAACqd,EAAU,CAAG,GAAAlT,EAAA7I,CAAA,EACXtB,CAAG,CAACqd,EAAU,EAAI,EAAE,EAAA9V,MAAA,CADT,CAEf,CACE7M,GAAIsiB,EAAItiB,EAAE,CACV6E,OAAQyd,EAAIzd,MAAM,CAClB0d,UAAWD,IAAAA,EAAIC,SAAS,CACxBG,QAASJ,EAAII,OAAO,CAAGJ,IAAAA,EAAII,OAAO,CAAU5T,CAC9C,EACD,EACH,GAEOxJ,CACT,EAAG,CAACvB,EAAKme,EAAcC,EAAYte,EAAM,EAEnCkf,EAA8B/gB,EAAAA,OAAa,CAAC,WAChD,GAAI,CAACogB,GAAoBA,cAAAA,EAAiBvW,UAAU,CAClD,MAAO,EAAE,CAGX,IAAMmX,EAAsB,EAAE,CACzBC,EAAA,GAAAC,EAAA,GAAAC,EAAAlf,KAAAA,MAAL,QAAKmf,EAAAC,EAAuBjB,EAAiBkB,eAAe,CAAAC,OAAAC,QAAA,IAAvD,CAAAP,CAAAA,EAAA,CAAAG,EAAAC,EAAAI,IAAA,IAAAC,IAAA,EAAAT,EAAA,IAAAU,WAAA,IAAMC,EAANR,EAAA7V,KAAA,CACH,GACEqW,2BAAAA,EAAc/X,UAAU,EACxB+X,CAAAA,OAAAA,CAAAA,EAAAA,EAAcC,mBAAmB,GAAjCD,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAmC/X,UAAU,IAAK,sBAKpD,IAAMiD,EAAMD,KAAKC,GAAG,GACfmU,EAAA,GAAAC,EAAA,GAAAC,EAAAlf,KAAAA,MAAL,QANE2f,EAMGE,EAAAT,EAAoBO,EAAcC,mBAAmB,CAACE,YAAY,CAAAR,OAAAC,QAAA,IAAlE,CAAAP,CAAAA,EAAA,CAAAa,EAAAT,EAAAI,IAAA,IAAAC,IAAA,EAAAT,EAAA,IAAAU,WAAA,IAAM1X,EAAN6X,EAAAvW,KAAA,CACGxB,EAAcC,CAAAA,EAAAA,GAAAA,EAAAA,EAClBC,EAAWC,IAAI,CACf0X,EAAcC,mBAAmB,CAAC3X,IAAI,EAGnC+W,EAAA,GAAAC,EAAA,GAAAC,EAAAlf,KAAAA,MAAL,QAAKmf,EAAAC,EAAkBpX,EAAW+X,SAAS,CAAAT,OAAAC,QAAA,IAAtC,CAAAP,CAAAA,EAAA,CAAAG,EAAAC,EAAAI,IAAA,IAAAC,IAAA,EAAAT,EAAA,IAAAU,WAAA,IAAMM,EAANb,EAAA7V,KAAA,CACG2W,EAAY,CAACjY,EAAWiY,SAAS,EAAI,EAAE,EAAEpc,MAAM,CACnD,SAACqc,CAAAA,SAAaA,EAASrB,YAAY,GAAKmB,EAAS/X,IAAI,GAGjDkY,EAA0B,EAAE,CAC7BnB,EAAA,GAAAC,EAAA,GAAAC,EAAAlf,KAAAA,MAAL,QAAK6f,EAAAT,EAAkBa,CAAAA,CAAAA,OAAAA,QAAAA,CAAAA,GAAlB,CAAAjB,CAAAA,EAAA,CAAAa,EAAAT,EAAAI,IAAA,IAAAC,IAAA,EAAAT,EAAA,IAAAU,WAAA,IAAMQ,EAANL,EAAAvW,KAAA,CACC4W,EAASE,aAAa,CAACxf,MAAM,GAAKyf,EAAAA,GAAiBA,CAACC,OAAO,EAC7DJ,EAASK,WAAW,CAACnX,OAAO,CAACrE,OAAO,CAAC,SAAAzH,CAAA,MAAEuC,EAAAA,EAAAA,SAAAA,CAC/Bye,EAAYze,IAAAA,EACdye,EAAYzT,GAAO2T,CAAAA,EAAAA,GAAAA,CAAAA,EAAQ,CAAC5e,MAAAA,EAAOE,IAAAA,CAAG,EAAG,CAACF,MAAO0e,EAAWxe,IAAKwe,CAAS,IAC5E6B,EAAS/U,IAAI,CAAC,CACZrP,GAAI,GAAuC8D,MAAAA,CAApCqgB,EAASrB,YAAY,CAAC,gBAAwBjW,MAAA,CAAV/I,GAC3Ce,OAAQ,YACR0d,UAAAA,EACAG,QAASH,EAAY,GACvB,EAEJ,EAEJ,aAdKW,EAAA,GAAAC,EAAAsB,cAAAxB,GAAAI,MAAAA,EAAAqB,MAAA,EAAArB,EAAAqB,MAAA,cAAAxB,QAAAC,GAgBL,IAAMwB,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,EAAsBX,EAAS/X,IAAI,EAC7C2Y,EAASjC,WAAW7W,EAAakY,EAAS/X,IAAI,EAC9C4Y,EAAUH,EAAU,0BAA4BV,EAAS/X,IAAI,CAE7D6Y,EAAU1C,CAAY,CAACwC,EAAO,EAAI,EAAE,CAC1C,GAAI,EAAUvhB,MAAM,EAAKyhB,EAAQzhB,MAAM,EAIvC,IAAM0hB,EAAoB,GAAAvV,EAAA7I,CAAA,EAAIme,GAAAA,MAAAA,CAAS,GAAAtV,EAAA7I,CAAA,EAAGwd,IAC1C,GAAIO,EAAS,CACX,IAIEM,EAJIA,EAAYjC,EAAKrH,IAAI,CACzB,SAACuJ,CAAAA,QAAQA,UAAAA,EAAIC,OAAO,EAAgBD,EAAInZ,WAAW,GAAKA,IAE1D,GAAIkZ,EAEF,MADAA,CAAAA,EAAAA,EAAU9X,IAAI,EAACkC,IAAI,CAAnB4V,KAAAA,CAAAA,EAAoB,GAAAxV,EAAA7I,CAAA,EAAGoe,GAG3B,CAEAhC,EAAK3T,IAAI,CAAC,CACR/E,IAAKua,EACLC,QAAAA,EACAK,QAASR,EAAU,QAAU,MAC7B5Y,YAAAA,EACA/D,KAAMod,CAAAA,EAAAA,GAAAA,EAAAA,EAAsB,CAC1BC,SAAUtZ,EAAYG,IAAI,CAC1BoZ,aAAcvZ,EAAYI,QAAQ,CAClC2W,aAAcmB,EAAS/X,IAAI,CAC3BqZ,MAAOtB,EAASsB,KAAK,GAEvBpY,KAAM,GAAAsC,EAAA7I,CAAA,EAAIme,GAAAA,MAAAA,CAAS,GAAAtV,EAAA7I,CAAA,EAAGwd,GACxB,GACF,aAvDKlB,EAAA,GAAAC,EAAAsB,cAAAxB,GAAAI,MAAAA,EAAAqB,MAAA,EAAArB,EAAAqB,MAAA,cAAAxB,QAAAC,GAwDP,aA9DKD,EAAA,GAAAC,EAAAsB,cAAAxB,GAAAI,MAAAA,EAAAqB,MAAA,EAAArB,EAAAqB,MAAA,cAAAxB,QAAAC,IA+DP,aAxEKD,EAAA,GAAAC,EAAAsB,cAAAxB,GAAAI,MAAAA,EAAAqB,MAAA,EAAArB,EAAAqB,MAAA,cAAAxB,QAAAC,GA0EL,IAAMqC,EAAWxC,EAAKyC,MAAM,CAC1B,SAACC,CAAAA,CAAOR,CAAAA,EACN,IAC6B7L,EADvBsM,EAAaT,EAAI/X,IAAI,CAAC7H,GAAG,CAAC,SAAC4f,CAAAA,SAAQA,EAAI3C,SAAS,GACtD,MAAO,GAAAb,GAAA9a,CAAA,KAAA4I,EAAA5I,CAAA,KAAI8e,GAAO,GAAA/e,EAAAC,CAAA,KAACse,EAAI5a,GAAG,CAAG+O,CAAAA,EAAAA,IAAAA,EAAKuM,GAAG,CAARvM,KAAAA,CAAAA,EAAS,GAAA5J,EAAA7I,CAAA,EAAG+e,KAC3C,EACA,CAAC,GAGH,OAAO3C,EAAK6C,IAAI,CAAC,SAAC3V,CAAAA,CAAG4V,CAAAA,SAAMN,CAAQ,CAACtV,EAAE5F,GAAG,CAAC,CAAIkb,CAAQ,CAACM,EAAExb,GAAG,CAAC,EAC/D,EAAG,CAAC8X,EAAkBC,EAAcxe,EAAOE,EAAI,EAE/C,OAAO/B,EAAAA,OAAa,CAClB,iBAAO,CACLghB,KAAMD,EACNd,eAAAA,EACAlQ,UAAAA,CACF,GACA,CAACkQ,EAAgBc,EAAchR,EAAU,CAE7C,EAEa6Q,WAAa,SAAC7W,CAAAA,CAA0B+Y,CAAAA,QACnD,GAAciB,MAAAA,CAAXjB,EAAQ,KAAyCjY,MAAA,CAAtCkZ,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,KAEnCyV,GAAqBpgB,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,oCA4E1B4kB,GAAAA,EAAiBA,CACjB9E,ICzQE+E,mBAAqB,SAAClF,CAAAA,EAC1B,OAAQA,GACN,IAAK,IACH,OANW,IAOb,KAAK,IACH,OAAO,KACT,KAAK,KACH,OAAO,KACT,KAAK,KACH,OAAO,KACX,CACF,EAOamF,qBAAuB,SAAA3kB,CAAA,MAAEoY,EAAAA,EAAAA,MAAAA,CAAQC,EAAAA,EAAAA,SAAAA,CAC5C5L,CAAAA,EAAAA,EAAAA,EAAAA,IACA8D,CAAAA,EAAAA,GAAAA,CAAAA,EAAiB,uBAEjB,IAAiC9P,EAAAA,EAAAA,UAAgB,CAACwd,GAAAA,EAAgBA,EAA3DC,EAA0Bzd,EAA1Byd,QAAAA,CAAUC,EAAgB1d,EAAhB0d,YAAAA,CAEmBiB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,cAAc,SAA3CI,EAA6BJ,CAAAA,CAAAA,EAAAA,CAAjBK,EAAiBL,CAAAA,CAAAA,EAAAA,CACd3e,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,kBAAM6M,KAAKC,GAAG,QAA5CA,EAAe9M,CAAAA,CAAAA,EAAAA,CAAVmkB,EAAUnkB,CAAAA,CAAAA,EAAAA,CACcA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,kBAAM,OAAlDokB,EAA6BpkB,CAAAA,CAAAA,EAAAA,CAAjBqkB,EAAiBrkB,CAAAA,CAAAA,EAAAA,CACEH,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAA+B,CACnEC,SAAU,SACVwkB,SAAU,CAACC,OAAQ,EAAE,CACvB,MAHO/L,EAA+B3Y,CAAAA,CAAAA,EAAAA,CAAlB4Y,EAAkB5Y,CAAAA,CAAAA,EAAAA,CAKtCG,EAAAA,SAAe,CAAC,WACdmkB,EAAOtX,KAAKC,GAAG,IACf,IAAM0X,EAAQzN,YAAY,WACxBoN,EAAOtX,KAAKC,GAAG,GACjB,EAtCkB,KAwClB,OAAO,WACLkK,cAAcwN,EAChB,CACF,EAAG,CAACzF,EAAW,EAEf,IAAM0F,EAAgBzkB,EAAAA,WAAiB,CAAC,WACtCqkB,EAAc,SAAC9d,CAAAA,SAAYA,EAAU0d,mBAAmBlF,IAC1D,EAAG,CAACA,EAAW,EAET2F,EAAc1kB,EAAAA,WAAiB,CAAC,WACpCqkB,EAAc,SAAC9d,CAAAA,SAAYA,EAAU0d,mBAAmBlF,IAC1D,EAAG,CAACA,EAAW,EAET4F,EAAY3kB,EAAAA,WAAiB,CAAC,WAClCqkB,EAAc,EAChB,EAAG,EAAE,EAECjF,EAA0Bpf,EAAAA,OAAa,CAC3C,iBAAM,CACJ8M,EAAMmI,KAAAA,OAAO8J,GAAyBqF,EACtCtX,EAAM8X,KAA6BR,EACpC,EACD,CAACrF,EAAYjS,EAAKsX,EAAW,EAGWjF,EAAAA,mBAAmBC,GAAtD4B,EAAmC7B,EAAnC6B,IAAAA,CAAMf,EAA6Bd,EAA7Bc,cAAAA,CAAgBlQ,EAAaoP,EAAbpP,SAAAA,CACvB9S,EAAe0E,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BoO,EAAWkB,EAAAA,EAAeA,EAEnE4T,EAAiB7kB,EAAAA,OAAa,CAAC,WACnC,IAAM8kB,EAActM,EAAYqE,iBAAiB,GAAGpF,IAAI,GAClDsN,EAAOrH,EAAasH,OAAO,CAAC,SAACjK,CAAAA,EACjC,IAAMhR,EAAcC,CAAAA,EAAAA,GAAAA,EAAAA,EAAiB+Q,EAAK9Q,UAAU,CAACC,IAAI,CAAE6Q,EAAKkK,kBAAkB,CAAC/a,IAAI,EACvF,OAAO6Q,EAAK9Q,UAAU,CAAC+X,SAAS,CAC7Blc,MAAM,CAAC,SAAAvG,CAAA,SAAY2K,EAAVA,IAAAA,CAAe2S,iBAAiB,GAAGzY,QAAQ,CAAC0gB,KACrDxhB,GAAG,CAAC,SAAC4f,CAAAA,SAAQtC,WAAW7W,EAAamZ,EAAIhZ,IAAI,GAClD,GACA,OAAO,IAAIhK,IAAI6kB,EACjB,EAAG,CAACrH,EAAclF,EAAY,EAExB0M,EAAcllB,EAAAA,OAAa,CAC/B,kBAAMghB,EAAKlb,MAAM,CAAC,SAAAvG,CAAA,MAAE+I,EAAAA,EAAAA,GAAAA,QAASuc,EAAe9f,GAAG,CAACuD,MAChD,CAAC0Y,EAAM6D,EAAe,EAGxB,MACE,GAAAxnB,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAS,GAAA,EAAC6Z,EAAAA,CAAO1a,aAAcA,IACtB,GAAAI,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CACFyB,QAAS,CAACmD,WAAY,GAAID,SAAU,EAAE,EACtC1E,KAAM,CAACG,WAAY,SAAUD,eAAgB,eAAe,YAE5D,GAAAL,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,GAAI2a,KAAM,CAAC,YAClE,GAAAzb,EAAAS,GAAA,EAAC8Z,EAAAA,CAAUmB,SAAS,aACnB0E,EAASnc,MAAM,CAAG,GAAK,GAAAjE,EAAAS,GAAA,EAACyf,iBAAgBA,CAAAA,GACzC,GAAAlgB,EAAAS,GAAA,EAACkb,GAAAA,EAASA,CAAAA,CACRxO,KAAK,SACLe,MAAOiN,EACPxT,SAAU,SAACyJ,CAAAA,SAAMgK,EAAehK,EAAEL,MAAM,CAAC7C,KAAK,GAC9CpC,YAAY,sBACZ3K,MAAO,CAACC,MAAO,OAAO,OAG1B,GAAApB,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOU,IAAK,GAAIR,WAAY,QAAQ,YACzD,GAAAN,EAAAS,GAAA,EAACyE,EAAAA,CAAWA,CAAAA,CACVC,YAAa,IAAItC,IAAI,CAAC6e,EAAW,EACjCtc,QAAS,CACP,CAACzE,GAAI,IAAK0E,MAAO,KAAK,EACtB,CAAC1E,GAAI,IAAK0E,MAAO,KAAK,EACtB,CAAC1E,GAAI,KAAM0E,MAAO,MAAM,EACxB,CAAC1E,GAAI,KAAM0E,MAAO,MAAM,EACzB,CACDC,QAAS,SAACwiB,CAAAA,SAAyBnG,EAAcmG,MAEnD,GAAA9nB,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOU,IAAK,EAAGR,WAAY,QAAQ,YACxD,GAAAN,EAAAS,GAAA,EAAC0gB,GAAAA,EAAMA,CAAAA,CAAC7b,QAAS8hB,WAAe,MAChC,GAAApnB,EAAAS,GAAA,EAAC0gB,GAAAA,EAAMA,CAAAA,CAAC7b,QAASgiB,WAAW,QAC5B,GAAAtnB,EAAAS,GAAA,EAAC0gB,GAAAA,EAAMA,CAAAA,CAAC7b,QAAS+hB,WAAa,eAIpC,GAAArnB,EAAAS,GAAA,EAACsnB,GAAAA,CAAaA,CAAAA,CAACC,OAAO,oBACpB,GAAAhoB,EAAAS,GAAA,EAACwnB,GAAAA,CAAWA,CAAAA,CAACjnB,QAAS4hB,EAAgBb,MAAOA,EAAO4B,KAAMkE,QAIlE,EC/HaK,qBAAuB,WAClCvZ,CAAAA,EAAAA,EAAAA,EAAAA,IACA8D,CAAAA,EAAAA,GAAAA,CAAAA,EAAiB,uBAEjB,IAAM9G,EAAShJ,EAAAA,WAAiB,CAC9B,SAAAT,CAAA,MAAEtC,EAAAA,EAAAA,YAAAA,OACA,GAAAI,EAAAS,GAAA,EAAC+P,EAAAA,CAAUA,CAAAA,CACT5P,MAAO,GAAAZ,EAAAS,GAAA,EAACgQ,EAAAA,EAAOA,CAAAA,UAAC,aAChBC,KAAM,GAAA1Q,EAAAS,GAAA,EAACf,aAAYA,CAACG,IAAI,WAAWD,aAAcA,OAGrD,EAAE,EAGgC6hB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAClC,wBACA,SAAC0G,CAAAA,QAAU,CAAC,WAAY,SAAS,CAACphB,QAAQ,CAACohB,GAAQA,EAAO,gBAFrDC,EAA6B3G,CAAAA,CAAAA,EAAAA,CAAjB4G,EAAiB5G,CAAAA,CAAAA,EAAAA,CAK9B6G,EAAY3lB,EAAAA,WAAiB,CACjC,SAAAT,CAAA,MAAEwZ,EAAAA,EAAAA,QAAAA,CAIA,OAHI0M,IAAe1M,GACjB2M,EAAc3M,GAGd,GAAA1b,EAAAC,IAAA,EAACsoB,GAAAA,EAAaA,CAAAA,WACZ,GAAAvoB,EAAAS,GAAA,EAAC+nB,GAAAA,EAAiBA,CAAAA,CAACC,QAAS/M,aAAAA,EAAyB7a,GAAG,uCAA8B,aAGtF,GAAAb,EAAAS,GAAA,EAAC+nB,GAAAA,EAAiBA,CAAAA,CAACC,QAAS/M,WAAAA,EAAuB7a,GAAG,qCAA4B,aAKxF,EACA,CAACunB,EAAYC,EAAc,EAG7B,MACE,GAAAroB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,QAAQ,EAAGe,MAAO,CAACE,OAAQ,OAAQ8I,SAAU,QAAQ,WAC1E,GAAAnK,EAAAC,IAAA,EAACyoB,EAAAA,EAAMA,CAAAA,WACL,GAAA1oB,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CAAChgB,KAAK,qCACV,GAAA3I,EAAAS,GAAA,EAAC4Z,mBAAkBA,CAACC,OAAQ3O,EAAQ4O,UAAW+N,MAEjD,GAAAtoB,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CAAChgB,KAAK,uCACV,GAAA3I,EAAAS,GAAA,EAAComB,qBAAoBA,CAACvM,OAAQ3O,EAAQ4O,UAAW+N,MAEnD,GAAAtoB,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CACJhgB,KAAK,IACLigB,OAAQjmB,EAAAA,WAAiB,CACvB,iBACEylB,aAAAA,EACE,GAAApoB,EAAAS,GAAA,EAACooB,EAAAA,EAAQA,CAAAA,CAAChoB,GAAG,gCAEb,GAAAb,EAAAS,GAAA,EAACooB,EAAAA,EAAQA,CAAAA,CAAChoB,GAAG,+BAEjB,CAACunB,EAAW,QAMxB,ECzEaU,gBAAkB,SAACC,CAAAA,EAC9B,IAA0BpmB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAAlCuL,EAAmBvL,CAAAA,CAAAA,EAAAA,CAAZqmB,EAAYrmB,CAAAA,CAAAA,EAAAA,CAO1B,OALAA,EAAAA,SAAe,CAAC,WACd,IAAMwkB,EAAQ8B,WAAW,kBAAMD,EAAS,KAAOD,GAC/C,OAAO,kBAAMG,aAAa/B,GAC5B,EAAG,CAAC4B,EAAU,EAEP7a,CACT,cCFaib,mBAAqB,SAACxpB,CAAAA,EACjC,IAAMypB,EAAmBzpB,EAAlBypB,cAAAA,QAGP,gBANwB,KAWtB,GAAAppB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAAC6E,OAAQ,CAACC,IAAK,CAAC,WAClB,GAAAhF,EAAAS,GAAA,EAAC4oB,GAAAA,CAAOA,CAAAA,CAACC,UAAU,MAAMC,QAAS,CAAC,CAACH,EAAgBtf,QAASsf,GAAkB,YAC7E,GAAAppB,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,kBANd,IAUX,6DCMasoB,kBAAoB,SAAAtnB,CAAA,MAAEunB,EAAAA,EAAAA,KAAAA,CAC3B3gB,EAAYnG,EAAAA,MAAY,CAAwB,MAChD+mB,EAAU/mB,EAAAA,OAAa,CAC3B,kBAAM8mB,EAAMxjB,GAAG,CAAC,SAAA/D,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,OAAiBga,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,MAC5D,CAAC+c,EAAM,EAGqCE,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAC5CC,GAAAA,CAAsBA,CACtBF,GAFKG,EAAuCF,EAAvCE,YAAAA,CAAc5I,EAAyB0I,EAAzB1I,QAAAA,CAAU6I,EAAeH,EAAfG,WAAAA,CAKzBC,EAAuBpnB,EAAAA,OAAa,CAAC,WACzC,IAAM+kB,EAAkB,EAAE,CAU1B,OATA+B,EAAM9f,OAAO,CAAC,SAAAzH,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CAAaiX,EAAAA,EAAAA,IAAAA,CAC3B+D,EAAK1X,IAAI,CAAC,CAACga,KAAM,SAAUtd,YAAAA,EAAaud,SAAUtG,EAAK1f,MAAM,GAC7D,IAAMimB,EAAUxD,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,GACrCmd,EAAa9iB,QAAQ,CAACmjB,IACxBvG,EAAKha,OAAO,CAAC,SAAAzH,CAAA,MAAEgkB,EAAAA,EAAAA,KAAAA,CAAOrZ,EAAAA,EAAAA,IAAAA,CACpB6a,EAAK1X,IAAI,CAAC,CAACga,KAAM,MAAOtd,YAAAA,EAAawZ,MAAAA,EAAOrZ,KAAAA,CAAI,EAClD,EAEJ,GACO6a,CACT,EAAG,CAAC+B,EAAOI,EAAa,EAElBM,EAAqBC,CAAAA,EAAAA,GAAAA,CAAAA,EAAuBX,EAAMxjB,GAAG,CAAC,SAAA/D,CAAA,SAAmBwK,EAAjBA,WAAAA,CAA6BG,IAAI,IAEzF9D,EAAiBC,CAAAA,EAAAA,EAAAA,cAAAA,EAAe,CACpCH,MAAOkhB,EAAU9lB,MAAM,CACvBgF,iBAAkB,kBAAMH,EAAUI,OAAO,EACzCC,aAAc,SAACkhB,CAAAA,EACb,IAAMC,EAAMP,CAAS,CAACM,EAAG,CACzB,MAAOC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAKN,IAAI,IAAK,SAAW,GAAK,EACvC,EACA5gB,SAAU,EACZ,GAEMC,EAAcN,EAAeO,YAAY,GACzCC,EAAQR,EAAeS,eAAe,GAE5C,MACE,GAAAxJ,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAS,GAAA,EAAC8pB,GAAAA,CAAoBA,CAAAA,CAAAA,GACrB,GAAAvqB,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACgJ,SAAU,QAAQ,WAC7B,GAAAnK,EAAAS,GAAA,EAACmb,GAAAA,EAASA,CAAAA,CAACxR,IAAKtB,WACd,GAAA9I,EAAAS,GAAA,EAACsK,GAAAA,EAAKA,CAAAA,CAACC,aAAc3B,WAClBE,EAAMtD,GAAG,CAAC,SAAA/D,CAAA,MAAEiE,EAAAA,EAAAA,KAAAA,CAAO8E,EAAAA,EAAAA,GAAAA,CAAKC,EAAAA,EAAAA,IAAAA,CAAM1G,EAAAA,EAAAA,KAAAA,CACvB8lB,EAAeP,CAAS,CAAC5jB,EAAM,CAErC,MAAO6jB,WADMM,EAAKN,IAAI,CAEpB,GAAAhqB,EAAAS,GAAA,EAAC+pB,GAAAA,EAAOA,CAAAA,CACN9d,YAAa4d,EAAI5d,WAAW,CAE5BrL,OAAQ6J,EACR1G,MAAOA,EACPyc,SAAUA,EACV6I,YAAaA,EACbnN,SAAUkN,EAAa9iB,QAAQ,CAAC2f,CAAAA,EAAAA,GAAAA,EAAAA,EAAyB4D,EAAI5d,WAAW,GACxE+d,aAAcN,EAAmBziB,GAAG,CAAC4iB,EAAI5d,WAAW,CAACG,IAAI,EACzD6d,aACE,GAAA1qB,EAAAS,GAAA,EAAC4oB,GAAAA,CAAOA,CAAAA,CACNvf,QAASwgB,IAAAA,EAAIL,QAAQ,CAAS,QAAU,GAAgBzc,MAAA,CAAb8c,EAAIL,QAAQ,CAAC,SACxDX,UAAU,eAEV,GAAAtpB,EAAAS,GAAA,EAACwY,GAAAA,CAAGA,CAAAA,UAAEqR,EAAIL,QAAQ,MAZjBhf,GAiBP,GAAAjL,EAAAS,GAAA,EAACkqB,GAAAA,CAAiBA,CAAAA,CAEhB9d,KAAMyd,EAAIzd,IAAI,CACdqZ,MAAOoE,EAAIpE,KAAK,CAChBxZ,YAAa4d,EAAI5d,WAAW,CAC5BrL,OAAQ6J,EACR1G,MAAOA,GALFyG,EAQX,WAMZ,EC5Ga2f,gBAAkB,SAAmBC,CAAAA,EAChD,MAAO,GAAAza,EAAA7I,CAAA,EAAIsjB,GAASrE,IAAI,CAAC,SAAC3V,CAAAA,CAAG4V,CAAAA,EAC3B,IAAMqE,EAAUpE,CAAAA,EAAAA,GAAAA,EAAAA,EAAyB7V,EAAEnE,WAAW,EAChDqe,EAAUrE,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBD,EAAE/Z,WAAW,EACtD,OAAOoe,EAAQE,aAAa,CAACD,EAC/B,EACF,ECTaE,gBAAkB,SAAC5K,CAAAA,EAC9B,OAAO,IAAIxd,IACTwd,EAAapa,GAAG,CAAC,SAACilB,CAAAA,QAChBxE,CAAAA,EAAAA,GAAAA,EAAAA,EACE/Z,CAAAA,EAAAA,GAAAA,EAAAA,EAAiBue,EAAOte,UAAU,CAACC,IAAI,CAAEqe,EAAOtD,kBAAkB,CAAC/a,IAAI,KAI/E,4sBCmBO,IAAMse,iBAAmB,WAC9Bxc,CAAAA,EAAAA,EAAAA,EAAAA,IACA8D,CAAAA,EAAAA,GAAAA,CAAAA,EAAiB,mBAEjB,IAA4D9P,EAAAA,EAAAA,UAAgB,CAACwd,GAAAA,EAAgBA,EAAtFC,EAAqDzd,EAArDyd,QAAAA,CAAUC,EAA2C1d,EAA3C0d,YAAAA,CAAcrf,EAA6B2B,EAA7B3B,OAAAA,CACOwB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAA+B,CACnEC,SAAU,SACVwkB,SAAU,CAACC,OAAQ,EAAE,CACvB,MAHO/L,EAA+B3Y,CAAAA,CAAAA,EAAAA,CAAlB4Y,EAAkB5Y,CAAAA,CAAAA,EAAAA,CAKhC4oB,EAAYhL,EAASnc,MAAM,CAE3BonB,EAAsBlf,CAAAA,EAAAA,EAAAA,CAAAA,EAC1Bmf,GACA,CACEjf,YAAa,eACboO,4BAA6B,EAC/B,GAEK3W,EAAiBunB,EAAjBvnB,IAAAA,CAAM9C,EAAWqqB,EAAXrqB,OAAAA,CAEPpB,EAAe0E,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B+mB,EAAqBzX,EAAAA,EAAeA,EAG7E2X,EAAc5oB,EAAAA,OAAa,CAAC,WAChC,IAAM6oB,EAAcP,gBAAgB5K,GACpC,OAAOoL,aAAa3nB,GAAM2E,MAAM,CAAC,SAAAvG,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,QACjC8e,EAAY9jB,GAAG,CAACgf,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,KAE7C,EAAG,CAAC5I,EAAMuc,EAAa,EAEjBqL,EAAkBvQ,EAAYf,IAAI,GAAGoF,iBAAiB,GACtDmM,EAAYD,EAAgBznB,MAAM,CAAG,EAErC2nB,EAAmBjpB,EAAAA,OAAa,CAAC,WACrC,IAAMkpB,EAAgBH,EAAgBlM,iBAAiB,GACvD,OAAO+L,EACJtlB,GAAG,CAAC,SAAA/D,CAAA,QAA0B,CAC7BwK,YADKA,EAAAA,WAAAA,CAELiX,KAAMA,EAFYA,IAAAA,CAEPlb,MAAM,CAAC,SAAAvG,CAAA,SAAY2K,EAAVA,IAAAA,CAAe2S,iBAAiB,GAAGzY,QAAQ,CAAC8kB,IAClE,IACCpjB,MAAM,CAAC,SAAAvG,CAAA,SAAYyhB,EAAVA,IAAAA,CAAe1f,MAAM,CAAG,GACtC,EAAG,CAACsnB,EAAaG,EAAgB,EA0D3BI,EAAoBC,GAAqB,CAACX,GAAepqB,GAAW,CAAC8C,EAE3E,MACE,GAAA9D,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,QAAQ,EAAGe,MAAO,CAACE,OAAQ,OAAQ8I,SAAU,QAAQ,YAC1E,GAAAnK,EAAAS,GAAA,EAAC+P,EAAAA,CAAUA,CAAAA,CACT5P,MAAO,GAAAZ,EAAAS,GAAA,EAACgQ,EAAAA,EAAOA,CAAAA,UAAC,aAChBC,KAAM,GAAA1Q,EAAAS,GAAA,EAACf,aAAYA,CAACG,IAAI,OAAOD,aAAcA,MAE/C,GAAAI,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CACFyB,QAAS,CAACmD,WAAY,GAAID,SAAU,EAAE,EACtC1E,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,GAAI2a,KAAM,CAAC,YAE9D2P,EAAY,EAAI,GAAAprB,EAAAS,GAAA,EAACyf,iBAAgBA,CAAAA,GAAM,KACxC,GAAAlgB,EAAAS,GAAA,EAACkb,GAAAA,EAASA,CAAAA,CACRxO,KAAK,SACLe,MAAOiN,EACPuP,aACEoB,EAAoB,GAAA9rB,EAAAS,GAAA,EAAC0oB,mBAAkBA,CAACC,eAAe,kBAAqBxkB,KAAAA,EAE9E+C,SAAU,SAACyJ,CAAAA,SAAMgK,EAAehK,EAAEL,MAAM,CAAC7C,KAAK,GAC9CpC,YAAY,sBACZ3K,MAAO,CAACC,MAAO,OAAO,OAGzBJ,GAAW,CAACoqB,EACX,GAAAprB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,YACZ,GAAA3B,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAGnB4I,WApFJ,GAAI9I,GAAW,CAAC8C,EACd,MACE,GAAA9D,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOC,eAAgB,QAAQ,EAAGc,MAAO,CAAC6qB,WAAY,OAAO,WAClF,GAAAhsB,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,EAAE,YACzD,GAAAd,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,GAAAlB,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACqJ,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,GAAgB,WAAG,uBAM/C,IAAMwhB,EAAiB7L,EAASnc,MAAM,CAAGoc,EAAapc,MAAM,QAE5D,EAAsBA,MAAM,CAuCrB,GAAAjE,EAAAS,GAAA,EAAC+oB,kBAAiBA,CAACC,MAAOmC,IAtC/B,EAEI,GAAA5rB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACqD,IAAK,EAAE,WACpB,GAAAhF,EAAAS,GAAA,EAACsT,GAAAA,CAAaA,CAAAA,CACZ5G,KAAK,SACLvM,MAAM,mBACNoJ,YACEiiB,EACE,GAAAjsB,EAAAC,IAAA,EAACc,MAAAA,WAAI,oBACc,GAAAf,EAAAS,GAAA,EAACyJ,SAAAA,UAAQiR,IAAqB,gDAIjD,GAAAnb,EAAAC,IAAA,EAACc,MAAAA,WAAI,oBACc,GAAAf,EAAAS,GAAA,EAACyJ,SAAAA,UAAQiR,IAAqB,yCAU3D,GAAAnb,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACqD,IAAK,EAAE,WACpB,GAAAhF,EAAAS,GAAA,EAACsT,GAAAA,CAAaA,CAAAA,CACZ5G,KAAK,SACLvM,MAAM,UACNoJ,YACEiiB,EACI,oDACA,4CAQhB,MAmCF,EAUMR,aAAe,SAAC3nB,CAAAA,EACpB,GAAIA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMif,gBAAgB,CAACvW,UAAU,IAAK,YACxC,MAAO,EAAE,CAGX,IAAM0f,EAAUpoB,EAAKif,gBAAgB,CAACkB,eAAe,CAAChe,GAAG,CAAC,SAACkmB,CAAAA,SAAUA,EAAM3H,mBAAmB,GACxFqG,EAAU,EAAE,CAEbjH,EAAA,GAAAC,EAAA,GAAAC,EAAAlf,KAAAA,MAAL,QAAKmf,EAAAC,EAAekI,CAAAA,CAAAA,OAAAA,QAAAA,CAAAA,GAAf,CAAAtI,CAAAA,EAAA,CAAAG,EAAAC,EAAAI,IAAA,IAAAC,IAAA,EAAAT,EAAA,GAAwB,CAAxB,IAAMuI,EAANpI,EAAA7V,KAAA,CACH,GAAIie,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAO3f,UAAU,IAAK,0BAIrB4f,EAAA,GAAAC,EAAA,GAAAC,EAAA1nB,KAAAA,MAAL,QAAK6f,EAAA8H,EAAcJ,EAAMzH,YAAY,CAAAR,OAAAC,QAAA,IAAhC,CAAAiI,CAAAA,EAAA,CAAA3H,EAAA8H,EAAAnI,IAAA,IAAAC,IAAA,EAAA+H,EAAA,GAAkC,CAAlC,IAAM1O,EAAN+G,EAAAvW,KAAA,CACIrB,EAAmB6Q,EAAnB7Q,IAAAA,CAAM8X,EAAajH,EAAbiH,SAAAA,CACPjY,EAAcC,CAAAA,EAAAA,GAAAA,EAAAA,EAAiBE,EAAMsf,EAAMtf,IAAI,EAC/C8W,EAAOgB,EACVlc,MAAM,CAAC,SAAAvG,CAAA,MAAE2K,EAAAA,EAAAA,IAAAA,OAAU,CAAC0Y,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB1Y,KAC1C5G,GAAG,CAAC,SAAC2e,CAAAA,EACJ,MAAO,CACLsB,MAAOtB,EAASsB,KAAK,CACrBrZ,KAAM+X,EAAS/X,IAAI,CAEvB,EAEE8W,CAAAA,EAAK1f,MAAM,CAAG,GAChB4mB,EAAQ7a,IAAI,CAAC,CACXtD,YAAAA,EACAiX,KAAAA,CACF,EAEJ,WAlBK0I,EAAA,GAAAC,EAAAlH,cAAAgH,GAAAG,MAAAA,EAAAlH,MAAA,EAAAkH,EAAAlH,MAAA,cAAAgH,QAAAC,IAmBP,WAxBKzI,EAAA,GAAAC,EAAAsB,cAAAxB,GAAAI,MAAAA,EAAAqB,MAAA,EAAArB,EAAAqB,MAAA,cAAAxB,QAAAC,GA0BL,OAAO8G,gBAAgBC,EACzB,EAEMS,GAAsBvpB,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,kCA6B3BC,EAAAA,CAAqBA,0BC9MZwqB,uBAAyB,SAAAtqB,CAAA,MAAEunB,EAAAA,EAAAA,KAAAA,CAChC3gB,EAAYnG,EAAAA,MAAY,CAAwB,MAChD+mB,EAAU/mB,EAAAA,OAAa,CAC3B,kBAAM8mB,EAAMxjB,GAAG,CAAC,SAAA/D,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,OAAiBga,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,MAC5D,CAAC+c,EAAM,EAGqCE,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAC5CC,GAAAA,CAAsBA,CACtBF,GAFKG,EAAuCF,EAAvCE,YAAAA,CAAc5I,EAAyB0I,EAAzB1I,QAAAA,CAAU6I,EAAeH,EAAfG,WAAAA,CAKzBC,EAAuBpnB,EAAAA,OAAa,CAAC,WACzC,IAAM+kB,EAAkB,EAAE,CAU1B,OATA+B,EAAM9f,OAAO,CAAC,SAAAzH,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CAAa+f,EAAAA,EAAAA,SAAAA,CAC3B/E,EAAK1X,IAAI,CAAC,CAACga,KAAM,SAAUtd,YAAAA,EAAaggB,cAAeD,EAAUxoB,MAAM,GACvE,IAAMimB,EAAUxD,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,GACrCmd,EAAa9iB,QAAQ,CAACmjB,IACxBuC,EAAU9iB,OAAO,CAAC,SAACgjB,CAAAA,EACjBjF,EAAK1X,IAAI,CAAC,GAAAG,EAAA5I,CAAA,GAACyiB,KAAM,WAAYtd,YAAAA,GAAgBigB,GAC/C,EAEJ,GACOjF,CACT,EAAG,CAAC+B,EAAOI,EAAa,EAElBM,EAAqBC,CAAAA,EAAAA,GAAAA,CAAAA,EAAuBX,EAAMxjB,GAAG,CAAC,SAAA/D,CAAA,SAAmBwK,EAAjBA,WAAAA,CAA6BG,IAAI,IAEzF9D,EAAiBC,CAAAA,EAAAA,EAAAA,cAAAA,EAAe,CACpCH,MAAOkhB,EAAU9lB,MAAM,CACvBgF,iBAAkB,kBAAMH,EAAUI,OAAO,EACzCC,aAAc,SAACkhB,CAAAA,EACb,IAAMC,EAAMP,CAAS,CAACM,EAAG,CACzB,MAAOC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAKN,IAAI,IAAK,SAAW,GAAK,EACvC,EACA5gB,SAAU,EACZ,GAEMC,EAAcN,EAAeO,YAAY,GACzCC,EAAQR,EAAeS,eAAe,GAE5C,MACE,GAAAxJ,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAS,GAAA,EAACmsB,GAAAA,CAAyBA,CAAAA,CAAAA,GAC1B,GAAA5sB,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACgJ,SAAU,QAAQ,WAC7B,GAAAnK,EAAAS,GAAA,EAACmb,GAAAA,EAASA,CAAAA,CAACxR,IAAKtB,WACd,GAAA9I,EAAAS,GAAA,EAACsK,GAAAA,EAAKA,CAAAA,CAACC,aAAc3B,WAClBE,EAAMtD,GAAG,CAAC,SAAA/D,CAAA,MAAEiE,EAAAA,EAAAA,KAAAA,CAAO8E,EAAAA,EAAAA,GAAAA,CAAKC,EAAAA,EAAAA,IAAAA,CAAM1G,EAAAA,EAAAA,KAAAA,CACvB8lB,EAAeP,CAAS,CAAC5jB,EAAM,CAErC,MAAO6jB,WADMM,EAAKN,IAAI,CAEpB,GAAAhqB,EAAAS,GAAA,EAAC+pB,GAAAA,EAAOA,CAAAA,CACN9d,YAAa4d,EAAI5d,WAAW,CAE5BrL,OAAQ6J,EACR1G,MAAOA,EACPyc,SAAUA,EACV6I,YAAaA,EACbnN,SAAUkN,EAAa9iB,QAAQ,CAAC2f,CAAAA,EAAAA,GAAAA,EAAAA,EAAyB4D,EAAI5d,WAAW,GACxE+d,aAAcN,EAAmBziB,GAAG,CAAC4iB,EAAI5d,WAAW,CAACG,IAAI,EACzD6d,aACE,GAAA1qB,EAAAS,GAAA,EAAC4oB,GAAAA,CAAOA,CAAAA,CACNvf,QACEwgB,IAAAA,EAAIoC,aAAa,CAAS,aAAe,GAAqBlf,MAAA,CAAlB8c,EAAIoC,aAAa,CAAC,cAEhEpD,UAAU,eAEV,GAAAtpB,EAAAS,GAAA,EAACwY,GAAAA,CAAGA,CAAAA,UAAEqR,EAAIoC,aAAa,MAdtBzhB,GAmBP,GAAAjL,EAAAS,GAAA,EAACosB,GAAAA,CAAsBA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAWxrB,OAAQ6J,EAAM1G,MAAOA,GAAW8lB,GAArCrf,EAEjC,WAMZ,8uBC/EO,IAAM6hB,sBAAwB,WACnCne,CAAAA,EAAAA,EAAAA,EAAAA,IACA8D,CAAAA,EAAAA,GAAAA,CAAAA,EAAiB,wBAEjB,IAA4D9P,EAAAA,EAAAA,UAAgB,CAACwd,GAAAA,EAAgBA,EAAtFC,EAAqDzd,EAArDyd,QAAAA,CAAUC,EAA2C1d,EAA3C0d,YAAAA,CAAcrf,EAA6B2B,EAA7B3B,OAAAA,CACOwB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAA+B,CACnEC,SAAU,SACVwkB,SAAU,CAACC,OAAQ,EAAE,CACvB,MAHO/L,EAA+B3Y,CAAAA,CAAAA,EAAAA,CAAlB4Y,EAAkB5Y,CAAAA,CAAAA,EAAAA,CAKhC4oB,EAAYhL,EAASnc,MAAM,CAE3BonB,EAAsBlf,CAAAA,EAAAA,EAAAA,CAAAA,EAC1B4gB,GACA,CACE1gB,YAAa,eACboO,4BAA6B,EAC/B,GAEK3W,EAAiBunB,EAAjBvnB,IAAAA,CAAM9C,EAAWqqB,EAAXrqB,OAAAA,CAEPpB,EAAe0E,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B+mB,EAAqBzX,EAAAA,EAAeA,EAG7E2X,EAAc5oB,EAAAA,OAAa,CAAC,WAChC,IAAM6oB,EAAcP,gBAAgB5K,GACpC,OAAOoL,mCAAa3nB,GAAM2E,MAAM,CAAC,SAAAvG,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,QACjC8e,EAAY9jB,GAAG,CAACgf,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,KAE7C,EAAG,CAAC5I,EAAMuc,EAAa,EAEjBqL,EAAkBvQ,EAAYf,IAAI,GAAGoF,iBAAiB,GACtDmM,EAAYD,EAAgBznB,MAAM,CAAG,EAErC2nB,EAAmBjpB,EAAAA,OAAa,CAAC,WACrC,IAAMkpB,EAAgBH,EAAgBlM,iBAAiB,GACvD,OAAO+L,EACJtlB,GAAG,CAAC,SAAA/D,CAAA,QAA+B,CAClCwK,YADKA,EAAAA,WAAAA,CAEL+f,UAAWA,EAFOA,SAAAA,CAEGhkB,MAAM,CAAC,SAAAvG,CAAA,SAAY2K,EAAVA,IAAAA,CAAe2S,iBAAiB,GAAGzY,QAAQ,CAAC8kB,IAC5E,IACCpjB,MAAM,CAAC,SAAAvG,CAAA,SAAiBuqB,EAAfA,SAAAA,CAAyBxoB,MAAM,CAAG,GAChD,EAAG,CAACsnB,EAAaG,EAAgB,EA2D3BI,EAAoBC,GAAqB,CAACX,GAAepqB,GAAW,CAAC8C,EAE3E,MACE,GAAA9D,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,QAAQ,EAAGe,MAAO,CAACE,OAAQ,OAAQ8I,SAAU,QAAQ,YAC1E,GAAAnK,EAAAS,GAAA,EAAC+P,EAAAA,CAAUA,CAAAA,CACT5P,MAAO,GAAAZ,EAAAS,GAAA,EAACgQ,EAAAA,EAAOA,CAAAA,UAAC,aAChBC,KAAM,GAAA1Q,EAAAS,GAAA,EAACf,aAAYA,CAACG,IAAI,YAAYD,aAAcA,MAEpD,GAAAI,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CACFyB,QAAS,CAACmD,WAAY,GAAID,SAAU,EAAE,EACtC1E,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,GAAI2a,KAAM,CAAC,YAE9D2P,EAAY,EAAI,GAAAprB,EAAAS,GAAA,EAACyf,iBAAgBA,CAAAA,GAAM,KACxC,GAAAlgB,EAAAS,GAAA,EAACkb,GAAAA,EAASA,CAAAA,CACRxO,KAAK,SACLe,MAAOiN,EACPuP,aACEoB,EACE,GAAA9rB,EAAAS,GAAA,EAAC0oB,mBAAkBA,CAACC,eAAe,uBACjCxkB,KAAAA,EAEN+C,SAAU,SAACyJ,CAAAA,SAAMgK,EAAehK,EAAEL,MAAM,CAAC7C,KAAK,GAC9CpC,YAAY,2BACZ3K,MAAO,CAACC,MAAO,OAAO,OAGzBJ,GAAW,CAACoqB,EACX,GAAAprB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,YACZ,GAAA3B,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAGnB4I,WAvFJ,GAAI9I,GAAW,CAAC8C,EACd,MACE,GAAA9D,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOC,eAAgB,QAAQ,EAAGc,MAAO,CAAC6qB,WAAY,OAAO,WAClF,GAAAhsB,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,EAAE,YACzD,GAAAd,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,GAAAlB,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACqJ,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,GAAgB,WAAG,4BAM/C,IAAMwhB,EAAiB7L,EAASnc,MAAM,CAAGoc,EAAapc,MAAM,QAE5D,EAAsBA,MAAM,CAwCrB,GAAAjE,EAAAS,GAAA,EAAC+rB,uBAAsBA,CAAC/C,MAAOmC,IAvCpC,EAEI,GAAA5rB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACqD,IAAK,EAAE,WACpB,GAAAhF,EAAAS,GAAA,EAACsT,GAAAA,CAAaA,CAAAA,CACZ5G,KAAK,SACLvM,MAAM,wBACNoJ,YACEiiB,EACE,GAAAjsB,EAAAC,IAAA,EAACc,MAAAA,WAAI,yBACmB,GAAAf,EAAAS,GAAA,EAACyJ,SAAAA,UAAQiR,IAAqB,gDAItD,GAAAnb,EAAAC,IAAA,EAACc,MAAAA,WAAI,yBACmB,GAAAf,EAAAS,GAAA,EAACyJ,SAAAA,UAAQiR,IAAqB,yCAWhE,GAAAnb,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACqD,IAAK,EAAE,WACpB,GAAAhF,EAAAS,GAAA,EAACsT,GAAAA,CAAaA,CAAAA,CACZ5G,KAAK,SACLvM,MAAM,eACNoJ,YACEiiB,EACI,yDACA,iDAQhB,MAqCF,EAOMR,mCAAe,SAAC3nB,CAAAA,EACpB,GAAIA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMif,gBAAgB,CAACvW,UAAU,IAAK,YACxC,MAAO,EAAE,CAGX,IAAM0f,EAAUpoB,EAAKif,gBAAgB,CAACkB,eAAe,CAAChe,GAAG,CAAC,SAACkmB,CAAAA,SAAUA,EAAM3H,mBAAmB,GACxFqG,EAAU,EAAE,CAEbjH,EAAA,GAAAC,EAAA,GAAAC,EAAAlf,KAAAA,MAAL,QAAKmf,EAAAC,EAAekI,CAAAA,CAAAA,OAAAA,QAAAA,CAAAA,GAAf,CAAAtI,CAAAA,EAAA,CAAAG,EAAAC,EAAAI,IAAA,IAAAC,IAAA,EAAAT,EAAA,GAAwB,CAAxB,IAAMuI,EAANpI,EAAA7V,KAAA,CACH,GAAIie,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAO3f,UAAU,IAAK,0BAIrB4f,EAAA,GAAAC,EAAA,GAAAC,EAAA1nB,KAAAA,MAAL,QAAK6f,EAAA8H,EAAcJ,EAAMzH,YAAY,CAAAR,OAAAC,QAAA,IAAhC,CAAAiI,CAAAA,EAAA,CAAA3H,EAAA8H,EAAAnI,IAAA,IAAAC,IAAA,EAAA+H,EAAA,GAAkC,CAAlC,IAAM1O,EAAN+G,EAAAvW,KAAA,CACIrB,EAAoC6Q,EAApC7Q,IAAAA,CAAMmgB,EAA8BtP,EAA9BsP,0BAAAA,CACPtgB,EAAcC,CAAAA,EAAAA,GAAAA,EAAAA,EAAiBE,EAAMsf,EAAMtf,IAAI,CAEjDmgB,CAAAA,EAA2B/oB,MAAM,CAAG,GACtC4mB,EAAQ7a,IAAI,CAAC,CACXtD,YAAAA,EACA+f,UAAWO,CACb,EAEJ,WAVKX,EAAA,GAAAC,EAAAlH,cAAAgH,GAAAG,MAAAA,EAAAlH,MAAA,EAAAkH,EAAAlH,MAAA,cAAAgH,QAAAC,IAWP,WAhBKzI,EAAA,GAAAC,EAAAsB,cAAAxB,GAAAI,MAAAA,EAAAqB,MAAA,EAAArB,EAAAqB,MAAA,cAAAxB,QAAAC,GAkBL,OAAO8G,gBAAgBC,EACzB,EAEMkC,GAA2BhrB,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,uCA4BhCC,EAAAA,CAAqBA,CACrBirB,GAAAA,CAAuBA,6GCxMdC,kBAAoB,SAAAhrB,CAAA,MAC/BirB,EAAAA,EAAAA,YAAAA,CAAAA,EAAAA,EACAC,cAAAA,QAKA,EAAkBnpB,MAAM,CAItB,GAAAjE,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,YACxCsoB,KAXPA,IAAAA,GAAiBC,EAWO,GAAArtB,EAAAS,GAAA,EAAC6sB,EAAAA,EAAUA,CAAAA,UAAC,uBAAkC,KAChE,GAAAttB,EAAAS,GAAA,EAAC8sB,qBAAAA,CAAAA,MAEH,GAAAvtB,EAAAC,IAAA,EAAC+H,EAAAA,CAAKA,CAAAA,WACJ,GAAAhI,EAAAS,GAAA,EAACkF,QAAAA,UACC,GAAA3F,EAAAC,IAAA,EAAC2F,KAAAA,WACC,GAAA5F,EAAAS,GAAA,EAACoF,KAAAA,CAAG1E,MAAO,CAACgd,SAAU,MAAM,IAC5B,GAAAne,EAAAS,GAAA,EAACoF,KAAAA,UAAG,gBACJ,GAAA7F,EAAAS,GAAA,EAACoF,KAAAA,CAAG1E,MAAO,CAACC,MAAO,OAAO,WAAG,cAC7B,GAAApB,EAAAS,GAAA,EAACoF,KAAAA,UAAG,kBAGR,GAAA7F,EAAAS,GAAA,EAACqF,QAAAA,UACEqnB,EAAalnB,GAAG,CAAC,SAACunB,CAAAA,QACjB,GAAAxtB,EAAAS,GAAA,EAACgtB,eAAAA,CAAeD,YAAaA,GAAkBA,EAAY7sB,EAAE,YAnB9D,IAyBX,EAEa+sB,oBAAsB,SAAAxrB,CAAA,MACjCyrB,EAAAA,EAAAA,cAAAA,CAAAA,EAAAA,EACAP,cAAAA,QAKA,EAAoBnpB,MAAM,CAIxB,GAAAjE,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,YACxCsoB,KAXPA,IAAAA,GAAiBC,EAWO,GAAArtB,EAAAS,GAAA,EAAC6sB,EAAAA,EAAUA,CAAAA,UAAC,yBAAoC,KAClE,GAAAttB,EAAAS,GAAA,EAACmtB,uBAAAA,CAAAA,MAEH,GAAA5tB,EAAAC,IAAA,EAAC+H,EAAAA,CAAKA,CAAAA,WACJ,GAAAhI,EAAAS,GAAA,EAACkF,QAAAA,UACC,GAAA3F,EAAAC,IAAA,EAAC2F,KAAAA,WACC,GAAA5F,EAAAS,GAAA,EAACoF,KAAAA,CAAG1E,MAAO,CAACgd,SAAU,MAAM,IAC5B,GAAAne,EAAAS,GAAA,EAACoF,KAAAA,UAAG,kBACJ,GAAA7F,EAAAS,GAAA,EAACoF,KAAAA,CAAG1E,MAAO,CAACC,MAAO,OAAO,WAAG,aAC7B,GAAApB,EAAAS,GAAA,EAACoF,KAAAA,CAAG1E,MAAO,CAACC,MAAO,OAAO,WAAG,cAC7B,GAAApB,EAAAS,GAAA,EAACoF,KAAAA,UAAG,aACJ,GAAA7F,EAAAS,GAAA,EAACoF,KAAAA,UAAG,8BAGR,GAAA7F,EAAAS,GAAA,EAACqF,QAAAA,UACE6nB,EAAe1nB,GAAG,CAAC,SAAC+e,CAAAA,QACnB,GAAAhlB,EAAAS,GAAA,EAACotB,iBAAAA,CAAiB7I,cAAeA,GAAoBA,EAAcrkB,EAAE,YArBtE,IA2BX,EAEM4sB,qBAAuB,iBAC3B,GAAAvtB,EAAAS,GAAA,EAACkQ,EAAAA,CAAKA,CAAAA,CACJC,OAAO,UACPhQ,MACE,GAAAZ,EAAAC,IAAA,EAACc,MAAAA,WAAI,yFACoF,OAG3FiJ,YACE,GAAAhK,EAAAS,GAAA,EAACM,MAAAA,UAAI,8QASL6sB,uBAAyB,iBAC7B,GAAA5tB,EAAAS,GAAA,EAACkQ,EAAAA,CAAKA,CAAAA,CACJC,OAAO,UACPhQ,MACE,GAAAZ,EAAAS,GAAA,EAACM,MAAAA,UAAI,6FAIPiJ,YACE,GAAAhK,EAAAS,GAAA,EAACM,MAAAA,UAAI,kRASL0sB,eAAiB,SAAAvrB,CAAA,QA4Bb4rB,EA5BeN,EAAAA,EAAAA,WAAAA,CAChB7sB,EAA0D6sB,EAA1D7sB,EAAAA,CAAIotB,EAAsDP,EAAtDO,UAAAA,CAAYlhB,EAA0C2gB,EAA1C3gB,IAAAA,CAAMrH,EAAoCgoB,EAApChoB,MAAAA,CAAQzB,EAA4BypB,EAA5BzpB,KAAAA,CAAOiqB,EAAqBR,EAArBQ,iBAAAA,CAEOC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAGjDC,GAAAA,EAAoBA,CAAE,CACtBC,YAAaC,GAAAA,EAA2BA,GAC1C,GALOC,EAA4CJ,CAAAA,CAAAA,EAAAA,CAA/BjtB,EAAAA,CAA+BitB,CAAAA,EAAAA,CAA/BjtB,OAAAA,CAMd4N,EAAUC,CAAAA,EAAAA,EAAAA,CAAAA,IAEVyf,KAAiB,GAAAnd,EAAA5J,CAAA,uEACjB/B,IAAWyf,EAAAA,GAAiBA,CAACC,OAAO,CAApC1f,MAAAA,MACF,SAAMoJ,EAAQ,CACZhO,MAAO,iDACPoJ,YACE,mJAGJ,WANAqH,EAAAC,IAAA,GAOA+c,EAAW,CAACzqB,UAAW,CAAC2qB,YAAa5tB,EAAI6tB,cAAeT,CAAU,CAAC,gCAEvE,+CAEMU,EAAkBjpB,IAAWyf,EAAAA,GAAiBA,CAACC,OAAO,EAAI,CAAC8I,EAC3DU,EAAa3qB,EAAME,MAAM,CAAGF,CAAK,CAAC,EAAE,CAAG,KAmB7C,MACE,GAAA/D,EAAAC,IAAA,EAAC2F,KAAAA,WACC,GAAA5F,EAAAS,GAAA,EAAC4F,KAAAA,CAAGlF,MAAO,CAACC,MAAO,EAAE,YAlBjB0sB,EACJ,GAAA9tB,EAAAS,GAAA,EAAC+G,EAAAA,CAAQA,CAAAA,CACPyJ,OAAO,SACPC,SAAUyd,GAAqBnpB,IAAWyf,EAAAA,GAAiBA,CAAC2J,OAAO,EAAIH,EACvEhnB,QAASjC,IAAWyf,EAAAA,GAAiBA,CAACC,OAAO,CAC7Cvd,SAAU2mB,IAIPG,EACL,GAAAzuB,EAAAS,GAAA,EAAC4oB,GAAAA,CAAOA,CAAAA,CAACvf,QAAS+kB,EAAAA,EAAuBA,UAAGf,IAE5CA,KAOA,GAAA9tB,EAAAC,IAAA,EAACoG,KAAAA,WACC,GAAArG,EAAAS,GAAA,EAACquB,GAAAA,CAAKA,CAAAA,CAAC1uB,UAAU,MAAM2uB,QAAS,EAAGzuB,WAAW,kBAC3CuM,IAEH,GAAA7M,EAAAS,GAAA,EAACuuB,GAAAA,CAA6BA,CAAAA,CAACC,gBAAiBzB,OAElD,GAAAxtB,EAAAS,GAAA,EAAC4F,KAAAA,UACEqoB,EACC,GAAA1uB,EAAAS,GAAA,EAACiG,EAAAA,CAAaA,CAAAA,CAACR,KAAMwoB,IAErB,GAAA1uB,EAAAS,GAAA,EAACmZ,OAAAA,CAAKzY,MAAO,CAACqJ,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,GAAgB,WAAG,WAG5C,GAAAzK,EAAAS,GAAA,EAAC4F,KAAAA,UACC,GAAArG,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACkJ,QAAS,MAAM,WAC1B,GAAArK,EAAAS,GAAA,EAACyuB,GAAAA,EAAmBA,CAAAA,CAACC,iBAAkB3B,UAjBpC3gB,EAsBb,EAEMghB,iBAAmB,SAAA3rB,CAAA,QA6Bf4rB,EA7BiB9I,EAAAA,EAAAA,aAAAA,CAC4BiJ,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAGnDmB,GAAAA,EAAsBA,CAAE,CACxBjB,YAAakB,GAAAA,EAA6BA,GAC5C,GALOC,EAA8CrB,CAAAA,CAAAA,EAAAA,CAA/BjtB,EAAAA,CAA+BitB,CAAAA,EAAAA,CAA/BjtB,OAAAA,CAMhB4N,EAAUC,CAAAA,EAAAA,EAAAA,CAAAA,IACTlO,EAAyDqkB,EAAzDrkB,EAAAA,CAAIotB,EAAqD/I,EAArD+I,UAAAA,CAAYlhB,EAAyCmY,EAAzCnY,IAAAA,CAAM9I,EAAmCihB,EAAnCjhB,KAAAA,CAAOyB,EAA4Bwf,EAA5Bxf,MAAAA,CAAQ+pB,EAAoBvK,EAApBuK,gBAAAA,CACtCb,EAAa3qB,EAAME,MAAM,CAAG,EAAIF,CAAK,CAAC,EAAE,CAAG,KAC3CyrB,EACJD,GAAoBA,iBAAAA,EAAiB/iB,UAAU,CAC3C+iB,EAAiBC,YAAY,CAC7B,KACAlB,KAAiB,GAAAnd,EAAA5J,CAAA,uEACjB/B,IAAWyf,EAAAA,GAAiBA,CAACC,OAAO,CAApC1f,MAAAA,MACF,SAAMoJ,EAAQ,CACZhO,MAAO,+CACPoJ,YACE,qJAGJ,WANAqH,EAAAC,IAAA,GAOAge,EAAa,CAAC1rB,UAAW,CAAC6rB,iBAAkB9uB,EAAI+uB,mBAAoB3B,CAAU,CAAC,gCAEnF,+CAEMU,EAAkBjpB,IAAWyf,EAAAA,GAAiBA,CAACC,OAAO,EAAI,CAACF,EAAcgJ,iBAAiB,CAkBhG,MACE,GAAAhuB,EAAAC,IAAA,EAAC2F,KAAAA,WACC,GAAA5F,EAAAS,GAAA,EAAC4F,KAAAA,CAAGlF,MAAO,CAACC,MAAO,EAAE,YAlBjB0sB,EACJ,GAAA9tB,EAAAS,GAAA,EAAC+G,EAAAA,CAAQA,CAAAA,CACPyJ,OAAO,SACPxJ,QAASjC,IAAWyf,EAAAA,GAAiBA,CAACC,OAAO,CAC7ChU,SAAU1L,IAAWyf,EAAAA,GAAiBA,CAACC,OAAO,EAAIyJ,GAAqBF,EACvE9mB,SAAU2mB,IAIPG,EACL,GAAAzuB,EAAAS,GAAA,EAAC4oB,GAAAA,CAAOA,CAAAA,CAACvf,QAAS+kB,EAAAA,EAAuBA,UAAGf,IAE5CA,KAOA,GAAA9tB,EAAAC,IAAA,EAACoG,KAAAA,WACC,GAAArG,EAAAS,GAAA,EAACquB,GAAAA,CAAKA,CAAAA,CAAC1uB,UAAU,MAAM2uB,QAAS,EAAGzuB,WAAW,kBAC5C,GAAAN,EAAAS,GAAA,EAACM,MAAAA,UAAK8L,MAER,GAAA7M,EAAAS,GAAA,EAACuuB,GAAAA,CAA6BA,CAAAA,CAACC,gBAAiBjK,OAElD,GAAAhlB,EAAAS,GAAA,EAAC4F,KAAAA,CAAGlF,MAAO,CAACgd,SAAU,GAAG,WACvB,GAAAne,EAAAS,GAAA,EAACM,MAAAA,CACCI,MAAO,CACLuJ,SAAU,WACVtJ,MAAO,OACP0e,WAAY,WACZzV,QAAS,OACX,WAECmlB,EACC,GAAAxvB,EAAAS,GAAA,EAAC4oB,GAAAA,CAAOA,CAAAA,CAAC3e,SAAS,SAASZ,QAAS0lB,WACjCG,CAAAA,EAAAA,GAAAA,CAAAA,EAAgBH,KAGnB,GAAAxvB,EAAAS,GAAA,EAACM,MAAAA,UAAI,UAIX,GAAAf,EAAAS,GAAA,EAAC4F,KAAAA,UAAIqoB,EAAa,GAAA1uB,EAAAS,GAAA,EAACiG,EAAAA,CAAaA,CAAAA,CAACR,KAAMwoB,IAAiB,OACxD,GAAA1uB,EAAAS,GAAA,EAAC4F,KAAAA,UACC,GAAArG,EAAAS,GAAA,EAACyuB,GAAAA,EAAmBA,CAAAA,CAACC,iBAAkBnK,MAEzC,GAAAhlB,EAAAS,GAAA,EAAC4F,KAAAA,UACC,GAAArG,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACkJ,QAAS,MAAM,WAAG,UA/B1BwC,EAmCb,wEC5Ra+iB,sBAAwB,WACnC,IAAwDjtB,EAAAA,EAAAA,UAAgB,CAACwd,GAAAA,EAAgBA,EAAlFC,EAAiDzd,EAAjDyd,QAAAA,CAAUC,EAAuC1d,EAAvC0d,YAAAA,CAAcwP,EAAyBltB,EAAzBktB,UAAAA,CAAYC,EAAantB,EAAbmtB,SAAAA,CAErCC,EAAmBptB,EAAAA,OAAa,CAAC,WACrC,OAAOyd,EAASna,GAAG,CAAC,SAACyX,CAAAA,QACnB/Q,CAAAA,EAAAA,GAAAA,EAAAA,EAAiB+Q,EAAK9Q,UAAU,CAACC,IAAI,CAAE6Q,EAAKkK,kBAAkB,CAAC/a,IAAI,GAEvE,EAAG,CAACuT,EAAS,EAEP4P,EAAuBrtB,EAAAA,OAAa,CAAC,WACzC,OAAO0d,EAAapc,MAAM,GAAKmc,EAASnc,MAAM,CAC1C,EAAE,CACFoc,EAAapa,GAAG,CAAC,SAACyX,CAAAA,QAChB/Q,CAAAA,EAAAA,GAAAA,EAAAA,EAAiB+Q,EAAK9Q,UAAU,CAACC,IAAI,CAAE6Q,EAAKkK,kBAAkB,CAAC/a,IAAI,GAE3E,EAAG,CAACuT,EAAUC,EAAa,EAE3B,MAAOxN,CAAAA,EAAAA,GAAAA,EAAAA,EAAgC,CACrChG,KAAM,gBACNM,KAAM,SACN8iB,aAAcD,EACdld,UAAWid,EAAiB9pB,GAAG,CAAC,SAACyG,CAAAA,EAC/B,MAAO,CAACwB,MAAOxB,EAAa6F,MAAO,CAACmU,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,GAAa,CAC5E,GACAwjB,OAAQ,SAACxjB,CAAAA,QAAgBga,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,IAClDuG,YAAa,SAAA/Q,CAAA,MAAEgM,EAAAA,EAAAA,KAAAA,OACb,GAAAlO,EAAAS,GAAA,EAAC0vB,GAAAA,EAAgCA,CAAAA,CAACvQ,KAAM8G,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBxY,MAEnEgF,eAAgB,SAAChF,CAAAA,QAAUwY,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBxY,IACpDkiB,eAAgB,SAACjd,CAAAA,EACf,GAAIA,IAAAA,EAAMjI,IAAI,CAAQ,CACpB2kB,EAAWE,GACX,MACF,CAGAD,EADeC,EAAiBtnB,MAAM,CAAC,SAACiE,CAAAA,QAAgB,CAACyG,EAAMzL,GAAG,CAACgF,MAEnEmjB,EAAWtsB,MAAMC,IAAI,CAAC2P,GACxB,EACAkd,UAAW,OACb,EACF,qCCdaC,sBAAwB,SAAApuB,CAAA,MACnCunB,EAAAA,EAAAA,KAAAA,CACA8G,EAAAA,EAAAA,cAAAA,CACAC,EAAAA,EAAAA,WAAAA,CACAC,EAAAA,EAAAA,oBAAAA,CAEM3nB,EAAYnG,EAAAA,MAAY,CAAwB,MAChD+mB,EAAU/mB,EAAAA,OAAa,CAC3B,kBAAM8mB,EAAMxjB,GAAG,CAAC,SAAA/D,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,OAAiBga,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,MAC5D,CAAC+c,EAAM,EAGqCE,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAC5CC,GAAAA,CAAsBA,CACtBF,GAFKG,EAAuCF,EAAvCE,YAAAA,CAAc5I,EAAyB0I,EAAzB1I,QAAAA,CAAU6I,EAAeH,EAAfG,WAAAA,CAKzBC,EAAuBpnB,EAAAA,OAAa,CAAC,WACzC,IAAM+kB,EAAkB,EAAE,CAU1B,OATA+B,EAAM9f,OAAO,CAAC,SAAAzH,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CAAamY,EAAAA,EAAAA,SAAAA,CAC3B6C,EAAK1X,IAAI,CAAC,CAACga,KAAM,SAAUtd,YAAAA,EAAagkB,cAAe7L,EAAU5gB,MAAM,GACvE,IAAMimB,EAAUxD,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,GACrCmd,EAAa9iB,QAAQ,CAACmjB,IACxBrF,EAAUlb,OAAO,CAAC,SAACmb,CAAAA,EACjB4C,EAAK1X,IAAI,CAAC,CAACga,KAAM,WAAYtd,YAAAA,EAAaoY,SAAAA,CAAQ,EACpD,EAEJ,GACO4C,CACT,EAAG,CAAC+B,EAAOI,EAAa,EAElBM,EAAqBC,CAAAA,EAAAA,GAAAA,CAAAA,EAAuBX,EAAMxjB,GAAG,CAAC,SAAA/D,CAAA,SAAmBwK,EAAjBA,WAAAA,CAA6BG,IAAI,IAEzF9D,EAAiBC,CAAAA,EAAAA,EAAAA,cAAAA,EAAe,CACpCH,MAAOkhB,EAAU9lB,MAAM,CACvBgF,iBAAkB,kBAAMH,EAAUI,OAAO,EACzCC,aAAc,SAACkhB,CAAAA,EACb,IAAMC,EAAMP,CAAS,CAACM,EAAG,CACzB,MAAOC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAKN,IAAI,IAAK,SAAW,GAAK,EACvC,EACA5gB,SAAU,EACZ,GAEMC,EAAcN,EAAeO,YAAY,GACzCC,EAAQR,EAAeS,eAAe,GAE5C,MACE,GAAAxJ,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAS,GAAA,EAACkwB,GAAAA,CAAyBA,CAAAA,CAACC,SAAUL,IACrC,GAAAvwB,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACgJ,SAAU,QAAQ,WAC7B,GAAAnK,EAAAS,GAAA,EAACmb,GAAAA,EAASA,CAAAA,CAACxR,IAAKtB,WACd,GAAA9I,EAAAS,GAAA,EAACsK,GAAAA,EAAKA,CAAAA,CAACC,aAAc3B,WAClBE,EAAMtD,GAAG,CAAC,SAAA/D,CAAA,MAAEiE,EAAAA,EAAAA,KAAAA,CAAO8E,EAAAA,EAAAA,GAAAA,CAAKC,EAAAA,EAAAA,IAAAA,CAAM1G,EAAAA,EAAAA,KAAAA,CACvB8lB,EAAeP,CAAS,CAAC5jB,EAAM,CAErC,GAAI6jB,WADSM,EAAKN,IAAI,CAEpB,MACE,GAAAhqB,EAAAS,GAAA,EAAC+pB,GAAAA,EAAOA,CAAAA,CACN9d,YAAa4d,EAAI5d,WAAW,CAE5BrL,OAAQ6J,EACR1G,MAAOA,EACPyc,SAAUA,EACV6I,YAAaA,EACbnN,SAAUkN,EAAa9iB,QAAQ,CAAC2f,CAAAA,EAAAA,GAAAA,EAAAA,EAAyB4D,EAAI5d,WAAW,GACxE+d,aAAcN,EAAmBziB,GAAG,CAAC4iB,EAAI5d,WAAW,CAACG,IAAI,EACzD6d,aACE,GAAA1qB,EAAAS,GAAA,EAAC4oB,GAAAA,CAAOA,CAAAA,CACNvf,QACEwgB,IAAAA,EAAIoG,aAAa,CAAS,aAAe,GAAqBljB,MAAA,CAAlB8c,EAAIoG,aAAa,CAAC,cAEhEpH,UAAU,eAEV,GAAAtpB,EAAAS,GAAA,EAACwY,GAAAA,CAAGA,CAAAA,UAAEqR,EAAIoG,aAAa,MAdtBzlB,GAqBX,IAAM4lB,EAAcC,CAAAA,EAAAA,GAAAA,CAAAA,EAAgBxG,EAAI5d,WAAW,CAAE4d,EAAIxF,QAAQ,CAACjY,IAAI,EAEtE,MACE,GAAA7M,EAAAS,GAAA,EAACswB,GAAAA,CAAsBA,CAAAA,CAErBlkB,KAAMyd,EAAIxF,QAAQ,CAACjY,IAAI,CACvBmY,cAAesF,EAAIxF,QAAQ,CAACE,aAAa,CACzCgM,mBAAoB,CAAC,CAACT,EACtB9oB,QAAS+oB,EAAY9oB,GAAG,CAACmpB,GACzBI,gBAAiBR,EAAqBI,GACtCnkB,YAAa4d,EAAI5d,WAAW,CAC5BrL,OAAQ6J,EACR1G,MAAOA,GARFyG,EAWX,WAMZ,sgDCpFO,IAAMimB,sBAAwB,WACnCviB,CAAAA,EAAAA,EAAAA,EAAAA,IACA8D,CAAAA,EAAAA,GAAAA,CAAAA,EAAiB,wBAEjB,IAA4D9P,EAAAA,EAAAA,UAAgB,CAACwd,GAAAA,EAAgBA,EAAtFC,EAAqDzd,EAArDyd,QAAAA,CAAUC,EAA2C1d,EAA3C0d,YAAAA,CAAcrf,EAA6B2B,EAA7B3B,OAAAA,CACzBoqB,EAAYhL,EAASnc,MAAM,CACKzB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAA+B,CACnEC,SAAU,SACVwkB,SAAU,CAACC,OAAQ,EAAE,CACvB,MAHO/L,EAA+B3Y,CAAAA,CAAAA,EAAAA,CAAlB4Y,EAAkB5Y,CAAAA,CAAAA,EAAAA,CAKhC2uB,EAAqBvB,wBACrBwB,EAAqBC,CAAAA,EAAAA,GAAAA,CAAAA,IAErBhe,EAAU1Q,EAAAA,OAAa,CAC3B,iBAAM,CAACwuB,EAAoBC,EAAmB,EAC9C,CAACD,EAAoBC,EAAmB,EAEOhe,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAW,CAACC,QAAAA,CAAO,GAA7DC,EAA0CF,EAA1CE,MAAAA,CAAsBC,EAAoBH,EAApBG,gBAAAA,CAEvB8X,EAAsBlf,CAAAA,EAAAA,EAAAA,CAAAA,EAC1BmlB,GACA,CACEjlB,YAAa,eACboO,4BAA6B,EAC/B,GAEK3W,EAAiBunB,EAAjBvnB,IAAAA,CAAM9C,EAAWqqB,EAAXrqB,OAAAA,CAEPpB,EAAe0E,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B+mB,EAAqBzX,EAAAA,EAAeA,EAE7E2X,EAAc5oB,EAAAA,OAAa,CAAC,WAChC,IAAM6oB,EAAcP,gBAAgB5K,GACpC,OAAOoL,mCAAa3nB,GAAM2E,MAAM,CAAC,SAAAvG,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,QACjC8e,EAAY9jB,GAAG,CAACgf,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,KAE7C,EAAG,CAAC5I,EAAMuc,EAAa,EAEhBlN,EAAuBie,EAAvBje,KAAAA,CACDoe,EAAkB5uB,EAAAA,OAAa,CAAC,WACpC,OAAO4oB,EAAYtlB,GAAG,CAAC,SAAAurB,CAAA,MAAE3M,EAAAA,EAAAA,SAAAA,CAAc4M,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAd5M,cACvB,MAAO,GAAAxC,GAAA9a,CAAA,KAAA4I,EAAA5I,CAAA,KACFkqB,GAAAA,CACH5M,UAAW6M,EAAaxmB,IAAI,CACxB2Z,EAAUpc,MAAM,CAAC,SAAAvG,CAAA,MAAE8iB,EAAAA,EAAAA,aAAAA,QAAmB0M,EAAahqB,GAAG,CAACsd,EAAcxf,MAAM,IAC3Eqf,GAER,EACF,EAAG,CAAC0G,EAAamG,EAAa,EAExBhG,EAAkBvQ,EAAYf,IAAI,GAAGoF,iBAAiB,GACtDmM,EAAYD,EAAgBznB,MAAM,CAAG,EAErC2nB,EAAmBjpB,EAAAA,OAAa,CAAC,WACrC,IAAMkpB,EAAgBH,EAAgBlM,iBAAiB,GACvD,OAAO+R,EACJtrB,GAAG,CAAC,SAAA/D,CAAA,QAA+B,CAClCwK,YADKA,EAAAA,WAAAA,CAELmY,UAAWA,EAFOA,SAAAA,CAEGpc,MAAM,CAAC,SAAAvG,CAAA,SAAY2K,EAAVA,IAAAA,CAAe2S,iBAAiB,GAAGzY,QAAQ,CAAC8kB,IAC5E,IACCpjB,MAAM,CAAC,SAAAvG,CAAA,SAAiB2iB,EAAfA,SAAAA,CAAyB5gB,MAAM,CAAG,GAChD,EAAG,CAACstB,EAAiB7F,EAAgB,EAE/BiG,EAAsBhvB,EAAAA,OAAa,CACvC,kBAAMipB,EAAiBgG,IAAI,CAAC,SAAA1vB,CAAA,SAAiB2iB,EAAfA,SAAAA,CAAyB5gB,MAAM,CAAG,KAChE,CAAC2nB,EAAiB,EAKdiG,EAA2BlvB,EAAAA,OAAa,CAAC,WAC7C,OAAO4oB,EACJtlB,GAAG,CAAC,SAAA/D,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CACL,OAAOmY,EADWA,SAAAA,CAEfpc,MAAM,CAAC,SAAAvG,CAAA,MAAE8iB,EAAAA,EAAAA,aAAAA,OAAmB8M,CAAAA,EAAAA,GAAAA,CAAAA,EAAmC9M,KAC/D/e,GAAG,CAAC,SAAA/D,CAAA,QAA4B,CAC/BwK,YAAAA,EACAqlB,aAFKllB,EAAAA,IAAAA,CAGLmY,cAHWA,EAAAA,aAAAA,GAKjB,GACC0C,IAAI,EACT,EAAG,CAAC6D,EAAY,EAIVyG,EAA8BrvB,EAAAA,OAAa,CAAC,WAChD,OAAOkvB,EAAyB5rB,GAAG,CAAC,SAAA/D,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CAAaqlB,EAAAA,EAAAA,YAAAA,OACjDjB,CAAAA,EAAAA,GAAAA,CAAAA,EAAgBpkB,EAAaqlB,IAEjC,EAAG,CAACF,EAAyB,EAEuCI,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAClED,GAAAA,GADME,EAAAA,CAA4DD,CAAAA,EAAAA,CAA5DC,UAAAA,CAAAA,EAA4DD,CAAAA,CAAAA,EAAAA,CAAjCE,EAAAA,EAAAA,eAAAA,CAAiBrI,EAAAA,EAAAA,WAAAA,CAK9CsI,EAA2BzvB,EAAAA,OAAa,CAAC,WAC7C,IAAM0vB,EAAe,IAAIxvB,IACvB+oB,EACG3lB,GAAG,CAAC,SAAA/D,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CACL,OAAOmY,EADWA,SAAAA,CACD5e,GAAG,CAAC,SAAA/D,CAAA,MAAE2K,EAAAA,EAAAA,IAAAA,OAAUikB,CAAAA,EAAAA,GAAAA,CAAAA,EAAgBpkB,EAAaG,IAChE,GACC6a,IAAI,IAET,OAAOsK,EAA4BvpB,MAAM,CAAC,SAACwC,CAAAA,SAAQonB,EAAa3qB,GAAG,CAACuD,IACtE,EAAG,CAAC+mB,EAA6BpG,EAAiB,EAI5C0G,EAAmB3vB,EAAAA,OAAa,CAAC,WACrC,IAAM4vB,EAAsB,IAAI1vB,IAC9BuvB,EAAyB3pB,MAAM,CAAC,SAACwC,CAAAA,SAAgBulB,EAAY9oB,GAAG,CAACuD,MAEnE,OAAO4mB,EAAyBppB,MAAM,CAAC,SAAAvG,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CAAaqlB,EAAAA,EAAAA,YAAAA,CACpD,OAAOQ,EAAoB7qB,GAAG,CAACopB,CAAAA,EAAAA,GAAAA,CAAAA,EAAgBpkB,EAAaqlB,GAC9D,EACF,EAAG,CAACK,EAA0BP,EAA0BrB,EAAY,EAE9DgC,EAAoCR,EAA4B/tB,MAAM,CAAG,EACzEwuB,EAAeH,EAAiBruB,MAAM,CA0EtC6nB,EAAoBC,GAAqB,CAACX,GAAepqB,GAAW,CAAC8C,EAE3E,MACE,GAAA9D,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,QAAQ,EAAGe,MAAO,CAACE,OAAQ,OAAQ8I,SAAU,QAAQ,YAC1E,GAAAnK,EAAAS,GAAA,EAAC+P,EAAAA,CAAUA,CAAAA,CACT5P,MAAO,GAAAZ,EAAAS,GAAA,EAACgQ,EAAAA,EAAOA,CAAAA,UAAC,aAChBC,KAAM,GAAA1Q,EAAAS,GAAA,EAACf,aAAYA,CAACG,IAAI,YAAYD,aAAcA,MAEpD,GAAAI,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CACFyB,QAAS,CAACmD,WAAY,GAAID,SAAU,EAAE,EACtC1E,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUD,eAAgB,eAAe,YAE9E,GAAAL,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOU,IAAK,EAAE,YAClC4xB,EACD,GAAA1yB,EAAAS,GAAA,EAACkb,GAAAA,EAASA,CAAAA,CACRxO,KAAK,SACLe,MAAOiN,EACPuP,aACEoB,EACE,GAAA9rB,EAAAS,GAAA,EAAC0oB,mBAAkBA,CAACC,eAAe,uBACjCxkB,KAAAA,EAEN+C,SAAU,SAACyJ,CAAAA,EACTgK,EAAehK,EAAEL,MAAM,CAAC7C,KAAK,EAC7B4b,EAAY,GACd,EACAhe,YAAY,2BACZ3K,MAAO,CAACC,MAAO,OAAO,OAG1B,GAAApB,EAAAS,GAAA,EAAC4oB,GAAAA,CAAOA,CAAAA,CACNvf,QAAQ,8DACRyf,QAASoI,GAAuB,CAACa,EACjClJ,UAAU,UACVqJ,4BAA2B,YAE3B,GAAA3yB,EAAAS,GAAA,EAACmyB,GAAAA,CAAsBA,CAAAA,CACrB/N,UAAWyN,EACXO,OAAQ,kBAAMjzB,EAAamV,OAAO,WAIvCxB,EAAiBtP,MAAM,CACtB,GAAAjE,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CACFyB,QAAS,CAACkD,SAAU,EAAGC,WAAY,EAAE,EACrCG,OAAO,iBACP9E,KAAM,CAACC,UAAW,MAAOU,IAAK,CAAC,WAE9ByS,IAED,KACHvS,GAAW,CAACoqB,EACX,GAAAprB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,YACZ,GAAA3B,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAGnB,GAAAlB,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACGnG,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMgvB,kCAAkC,CAACtmB,UAAU,IAAK,oBACvD,GAAAxM,EAAAS,GAAA,EAACsyB,yBAAAA,CACClqB,MAAO/E,EAAKgvB,kCAAkC,CAAC9kB,OAAO,CAAC/J,MAAM,GAE7D,KACJ,GAAAjE,EAAAS,GAAA,EAACuyB,GAAAA,CAAaA,CAAAA,CACZ7e,aAAcrQ,MAAAA,EAAAA,KAAAA,EAAAA,EAAMoQ,QAAQ,CAACC,YAAY,CACzCxS,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,EACtCG,OAAO,QAER6E,WA1IP,GAAI9I,GAAW,CAAC8C,EACd,MACE,GAAA9D,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOC,eAAgB,QAAQ,EAAGc,MAAO,CAAC6qB,WAAY,OAAO,WAClF,GAAAhsB,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,EAAE,YACzD,GAAAd,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,GAAAlB,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACqJ,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,GAAgB,WAAG,4BAM/C,IAAMwhB,EAAiB7L,EAASnc,MAAM,CAAGoc,EAAapc,MAAM,QAE5D,EAAsBA,MAAM,CAyC1B,GAAAjE,EAAAS,GAAA,EAAC6vB,sBAAqBA,CACpBC,eACEiC,EACE,GAAAxyB,EAAAS,GAAA,EAACwyB,GAAAA,CAAWA,CAAAA,CACVR,aAAcA,EACdS,WAAYd,EAAyBnuB,MAAM,CAC3C6lB,YAAaA,IAEbllB,KAAAA,EAEN6kB,MAAOmC,EACP4E,YAAaA,EACbC,qBAAsB0B,IApDxB,EAEI,GAAAnyB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACqD,IAAK,EAAE,WACpB,GAAAhF,EAAAS,GAAA,EAACsT,GAAAA,CAAaA,CAAAA,CACZ5G,KAAK,SACLvM,MAAM,wBACNoJ,YACEiiB,EACE,GAAAjsB,EAAAC,IAAA,EAACc,MAAAA,WAAI,yBACmB,GAAAf,EAAAS,GAAA,EAACyJ,SAAAA,UAAQiR,IAAqB,gDAItD,GAAAnb,EAAAC,IAAA,EAACc,MAAAA,WAAI,yBACmB,GAAAf,EAAAS,GAAA,EAACyJ,SAAAA,UAAQiR,IAAqB,yCAWhE,GAAAnb,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACqD,IAAK,EAAE,WACpB,GAAAhF,EAAAS,GAAA,EAACsT,GAAAA,CAAaA,CAAAA,CACZ5G,KAAK,SACLvM,MAAM,eACNoJ,YACEiiB,EACI,kEACA,0DAuBhB,SA0EF,EAEM8G,yBAA2B,SAAA7wB,CAAA,MAAE2G,EAAAA,EAAAA,KAAAA,CACLlG,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAApCwF,EAAqBxF,CAAAA,CAAAA,EAAAA,CAAb+I,EAAa/I,CAAAA,CAAAA,EAAAA,QAE5B,EAOE,GAAA3C,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,EAAGG,OAAO,eACnD,GAAAjF,EAAAS,GAAA,EAACkQ,EAAAA,CAAKA,CAAAA,CACJC,OAAO,UACPhQ,MAPMiI,IAAAA,EAAc,wBAA0B,GAAS2E,MAAA,CAAN3E,EAAM,yBAQvDmB,YACE,GAAAhK,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,SAAUU,IAAK,GAAIR,WAAY,YAAY,YAChE,GAAAN,EAAAS,GAAA,EAACM,MAAAA,UAAI,oLAKL,GAAAf,EAAAS,GAAA,EAAC0gB,GAAAA,EAAMA,CAAAA,CAAC7b,QAAS,kBAAMoG,EAAU,cAC9B7C,IAAAA,EAAc,2BAA6B,qCAMtD,GAAA7I,EAAAC,IAAA,EAACwgB,GAAAA,EAAMA,CAAAA,CACLtY,OAAQA,EACRvH,MAAM,uBACNO,MAAO,CAACC,MAAO,OAAQ+c,SAAU,QAAQ,YAEzC,GAAAne,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACC,OAAQ,CAAC,WACtB,GAAA5B,EAAAS,GAAA,EAAC0yB,yBAAAA,CAAAA,KAEH,GAAAnzB,EAAAS,GAAA,EAACygB,GAAAA,EAAYA,CAAAA,UACX,GAAAlhB,EAAAS,GAAA,EAAC0gB,GAAAA,EAAMA,CAAAA,CAACvQ,OAAO,UAAUtL,QAAS,kBAAMoG,EAAU,cAAQ,iBAlCzD,IAyCX,EAEMynB,yBAA2B,WAC/B,IAAMrvB,EAASqI,CAAAA,EAAAA,EAAAA,CAAAA,EACbinB,IADKtvB,IAAAA,QAGP,EAIIA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMgvB,kCAAkC,CAACtmB,UAAU,IAAK,oBAExD,GAAAxM,EAAAS,GAAA,EAACitB,oBAAmBA,CAClBC,eAAgB7pB,EAAKgvB,kCAAkC,CAAC9kB,OAAO,CAC/Dof,eAAgB,KAKf,GAAAptB,EAAAS,GAAA,EAACoT,GAAAA,EAAeA,CAAAA,CAACC,MAAOhQ,MAAAA,EAAAA,KAAAA,EAAAA,EAAMgvB,kCAAkC,GAZ9D,GAAA9yB,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAa5B,EAOMuqB,mCAAe,SAAC3nB,CAAAA,EACpB,GAAIA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMif,gBAAgB,CAACvW,UAAU,IAAK,YACxC,MAAO,EAAE,CAGX,IAAM0f,EAAUpoB,EAAKif,gBAAgB,CAACkB,eAAe,CAAChe,GAAG,CAAC,SAACkmB,CAAAA,SAAUA,EAAM3H,mBAAmB,GAExFqG,EAAU,EAAE,CAEbjH,EAAA,GAAAC,EAAA,GAAAC,EAAAlf,KAAAA,MAAL,QAAKmf,EAAAC,EAAekI,CAAAA,CAAAA,OAAAA,QAAAA,CAAAA,GAAf,CAAAtI,CAAAA,EAAA,CAAAG,EAAAC,EAAAI,IAAA,IAAAC,IAAA,EAAAT,EAAA,GAAwB,CAAxB,IAAMuI,EAANpI,EAAA7V,KAAA,CACH,GAAIie,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAO3f,UAAU,IAAK,0BAIrB4f,EAAA,GAAAC,EAAA,GAAAC,EAAA1nB,KAAAA,MAAL,QAAK6f,EAAA8H,EAAcJ,EAAMzH,YAAY,CAAAR,OAAAC,QAAA,IAAhC,CAAAiI,CAAAA,EAAA,CAAA3H,EAAA8H,EAAAnI,IAAA,IAAAC,IAAA,EAAA+H,EAAA,GAAkC,CAAlC,IAAM1O,EAAN+G,EAAAvW,KAAA,CACIrB,EAAmB6Q,EAAnB7Q,IAAAA,CAAMgY,EAAanH,EAAbmH,SAAAA,CACPnY,EAAcC,CAAAA,EAAAA,GAAAA,EAAAA,EAAiBE,EAAMsf,EAAMtf,IAAI,EAC/CwmB,EAAgBxO,EAAU5e,GAAG,CAAC,SAAA/D,CAAA,MAAE2K,EAAAA,EAAAA,IAAAA,CAAMmY,EAAAA,EAAAA,aAAAA,OAAoB,CAACnY,KAAAA,EAAMmY,cAAAA,CAAa,GAEhFqO,CAAAA,EAAcpvB,MAAM,CAAG,GACzB4mB,EAAQ7a,IAAI,CAAC,CACXtD,YAAAA,EACAmY,UAAWwO,CACb,EAEJ,WAXKhH,EAAA,GAAAC,EAAAlH,cAAAgH,GAAAG,MAAAA,EAAAlH,MAAA,EAAAkH,EAAAlH,MAAA,cAAAgH,QAAAC,IAYP,WAjBKzI,EAAA,GAAAC,EAAAsB,cAAAxB,GAAAI,MAAAA,EAAAqB,MAAA,EAAArB,EAAAqB,MAAA,cAAAxB,QAAAC,GAmBL,OAAO8G,gBAAgBC,EACzB,EAEMyG,GAA2BvvB,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,uCA4ChCuxB,GAAAA,CAAgCA,CAChCtxB,EAAAA,CAAqBA,CACrBiT,GAAAA,CAAwBA,EAGtBme,GAA6BrxB,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,wCAalCwxB,GAAAA,EAA0BA,CAC1BvxB,EAAAA,CAAqBA,kDCtcZwxB,oBAAsB,SAAAtxB,CAAA,MACjCunB,EAAAA,EAAAA,KAAAA,CACA8G,EAAAA,EAAAA,cAAAA,CACAC,EAAAA,EAAAA,WAAAA,CACAC,EAAAA,EAAAA,oBAAAA,CAEM3nB,EAAYnG,EAAAA,MAAY,CAAwB,MAChD+mB,EAAU/mB,EAAAA,OAAa,CAC3B,kBAAM8mB,EAAMxjB,GAAG,CAAC,SAAA/D,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,OAAiBga,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,MAC5D,CAAC+c,EAAM,EAEqCE,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAC5CC,GAAAA,CAAsBA,CACtBF,GAFKG,EAAuCF,EAAvCE,YAAAA,CAAc5I,EAAyB0I,EAAzB1I,QAAAA,CAAU6I,EAAeH,EAAfG,WAAAA,CAKzBC,EAAuBpnB,EAAAA,OAAa,CAAC,WACzC,IAAM+kB,EAAkB,EAAE,CAU1B,OATA+B,EAAM9f,OAAO,CAAC,SAAAzH,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CAAa+mB,EAAAA,EAAAA,OAAAA,CAC3B/L,EAAK1X,IAAI,CAAC,CAACga,KAAM,SAAUtd,YAAAA,EAAagnB,YAAaD,EAAQxvB,MAAM,GACnE,IAAMimB,EAAUxD,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,GACrCmd,EAAa9iB,QAAQ,CAACmjB,IACxBuJ,EAAQ9pB,OAAO,CAAC,SAACgqB,CAAAA,EACfjM,EAAK1X,IAAI,CAAC,CAACga,KAAM,SAAUtd,YAAAA,EAAainB,OAAAA,CAAM,EAChD,EAEJ,GACOjM,CACT,EAAG,CAAC+B,EAAOI,EAAa,EAElBM,EAAqBC,CAAAA,EAAAA,GAAAA,CAAAA,EAAuBX,EAAMxjB,GAAG,CAAC,SAAA/D,CAAA,SAAmBwK,EAAjBA,WAAAA,CAA6BG,IAAI,IAEzF9D,EAAiBC,CAAAA,EAAAA,EAAAA,cAAAA,EAAe,CACpCH,MAAOkhB,EAAU9lB,MAAM,CACvBgF,iBAAkB,kBAAMH,EAAUI,OAAO,EACzCC,aAAc,SAACkhB,CAAAA,EACb,IAAMC,EAAMP,CAAS,CAACM,EAAG,CACzB,MAAOC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAKN,IAAI,IAAK,SAAW,GAAK,EACvC,EACA5gB,SAAU,EACZ,GAEMC,EAAcN,EAAeO,YAAY,GACzCC,EAAQR,EAAeS,eAAe,GAE5C,MACE,GAAAxJ,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAS,GAAA,EAACmzB,GAAAA,CAAuBA,CAAAA,CAAChD,SAAUL,IACnC,GAAAvwB,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACgJ,SAAU,QAAQ,WAC7B,GAAAnK,EAAAS,GAAA,EAACmb,GAAAA,EAASA,CAAAA,CAACxR,IAAKtB,WACd,GAAA9I,EAAAS,GAAA,EAACsK,GAAAA,EAAKA,CAAAA,CAACC,aAAc3B,WAClBE,EAAMtD,GAAG,CAAC,SAAA/D,CAAA,MAAEiE,EAAAA,EAAAA,KAAAA,CAAO8E,EAAAA,EAAAA,GAAAA,CAAKC,EAAAA,EAAAA,IAAAA,CAAM1G,EAAAA,EAAAA,KAAAA,CACvB8lB,EAAeP,CAAS,CAAC5jB,EAAM,CAErC,GAAI6jB,WADSM,EAAKN,IAAI,CAEpB,MACE,GAAAhqB,EAAAS,GAAA,EAAC+pB,GAAAA,EAAOA,CAAAA,CACN9d,YAAa4d,EAAI5d,WAAW,CAE5BrL,OAAQ6J,EACR1G,MAAOA,EACPyc,SAAUA,EACV6I,YAAaA,EACbnN,SAAUkN,EAAa9iB,QAAQ,CAAC2f,CAAAA,EAAAA,GAAAA,EAAAA,EAAyB4D,EAAI5d,WAAW,GACxE+d,aAAcN,EAAmBziB,GAAG,CAAC4iB,EAAI5d,WAAW,CAACG,IAAI,EACzD6d,aACE,GAAA1qB,EAAAS,GAAA,EAAC4oB,GAAAA,CAAOA,CAAAA,CACNvf,QAASwgB,IAAAA,EAAIoJ,WAAW,CAAS,WAAa,GAAmBlmB,MAAA,CAAhB8c,EAAIoJ,WAAW,CAAC,YACjEpK,UAAU,eAEV,GAAAtpB,EAAAS,GAAA,EAACwY,GAAAA,CAAGA,CAAAA,UAAEqR,EAAIoJ,WAAW,MAZpBzoB,GAmBX,IAAM4oB,EAAYC,CAAAA,EAAAA,GAAAA,CAAAA,EAAcxJ,EAAI5d,WAAW,CAAE4d,EAAIqJ,MAAM,CAAC9mB,IAAI,EAEhE,MACE,GAAA7M,EAAAS,GAAA,EAACszB,GAAAA,CAAoBA,CAAAA,CAEnBlnB,KAAMyd,EAAIqJ,MAAM,CAAC9mB,IAAI,CACrB2gB,YAAalD,EAAIqJ,MAAM,CAACnG,WAAW,CACnCwD,mBAAoB,CAAC,CAACT,EACtB9oB,QAAS+oB,EAAY9oB,GAAG,CAACmsB,GACzB5C,gBAAiBR,EAAqBoD,GACtCnnB,YAAa4d,EAAI5d,WAAW,CAC5BrL,OAAQ6J,EACR1G,MAAOA,GARFyG,EAWX,WAMZ,ghDC9EO,IAAM+oB,oBAAsB,WACjCrlB,CAAAA,EAAAA,EAAAA,EAAAA,IACA8D,CAAAA,EAAAA,GAAAA,CAAAA,EAAiB,sBAEjB,IAA4D9P,EAAAA,EAAAA,UAAgB,CAACwd,GAAAA,EAAgBA,EAAtFC,EAAqDzd,EAArDyd,QAAAA,CAAUC,EAA2C1d,EAA3C0d,YAAAA,CAAcrf,EAA6B2B,EAA7B3B,OAAAA,CACzBoqB,EAAYhL,EAASnc,MAAM,CACKzB,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAA+B,CACnEC,SAAU,SACVwkB,SAAU,CAACC,OAAQ,EAAE,CACvB,MAHO/L,EAA+B3Y,CAAAA,CAAAA,EAAAA,CAAlB4Y,EAAkB5Y,CAAAA,CAAAA,EAAAA,CAKhC2uB,EAAqBvB,wBACrBwB,EAAqBC,CAAAA,EAAAA,GAAAA,CAAAA,IAErBhe,EAAU1Q,EAAAA,OAAa,CAC3B,iBAAM,CAACwuB,EAAoBC,EAAmB,EAC9C,CAACD,EAAoBC,EAAmB,EAEOhe,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAW,CAACC,QAAAA,CAAO,GAA7DC,EAA0CF,EAA1CE,MAAAA,CAAsBC,EAAoBH,EAApBG,gBAAAA,CAEvB8X,EAAsBlf,CAAAA,EAAAA,EAAAA,CAAAA,EAC1B8nB,GACA,CACE5nB,YAAa,eACboO,4BAA6B,EAC/B,GAEK3W,EAAiBunB,EAAjBvnB,IAAAA,CAAM9C,EAAWqqB,EAAXrqB,OAAAA,CAEPpB,EAAe0E,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B+mB,EAAqBzX,EAAAA,EAAeA,EAE7E2X,EAAc5oB,EAAAA,OAAa,CAAC,WAChC,IAAM6oB,EAAcP,gBAAgB5K,GACpC,OAAOoL,iCAAa3nB,GAAM2E,MAAM,CAAC,SAAAvG,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,QACjC8e,EAAY9jB,GAAG,CAACgf,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBha,KAE7C,EAAG,CAAC5I,EAAMuc,EAAa,EAEhBlN,EAAuBie,EAAvBje,KAAAA,CACDoe,EAAkB5uB,EAAAA,OAAa,CAAC,WACpC,OAAO4oB,EAAYtlB,GAAG,CAAC,SAAAurB,CAAA,MAAEiC,EAAAA,EAAAA,OAAAA,CAAYhC,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAZgC,YACvB,MAAO,GAAApR,GAAA9a,CAAA,KAAA4I,EAAA5I,CAAA,KACFkqB,GAAAA,CACHgC,QAAS/B,EAAaxmB,IAAI,CACtBuoB,EAAQhrB,MAAM,CAAC,SAAAvG,CAAA,MAAEsrB,EAAAA,EAAAA,WAAAA,QAAiBkE,EAAahqB,GAAG,CAAC8lB,EAAYhoB,MAAM,IACrEiuB,GAER,EACF,EAAG,CAAClI,EAAamG,EAAa,EAExBhG,EAAkBvQ,EAAYf,IAAI,GAAGoF,iBAAiB,GACtDmM,EAAYD,EAAgBznB,MAAM,CAAG,EAErC2nB,EAAmBjpB,EAAAA,OAAa,CAAC,WACrC,IAAMkpB,EAAgBH,EAAgBlM,iBAAiB,GACvD,OAAO+R,EACJtrB,GAAG,CAAC,SAAA/D,CAAA,QAA6B,CAChCwK,YADKA,EAAAA,WAAAA,CAEL+mB,QAASA,EAFSA,OAAAA,CAEDhrB,MAAM,CAAC,SAAAvG,CAAA,SAAY2K,EAAVA,IAAAA,CAAe2S,iBAAiB,GAAGzY,QAAQ,CAAC8kB,IACxE,IACCpjB,MAAM,CAAC,SAAAvG,CAAA,SAAeuxB,EAAbA,OAAAA,CAAqBxvB,MAAM,CAAG,GAC5C,EAAG,CAACstB,EAAiB7F,EAAgB,EAE/BwI,EAAoBvxB,EAAAA,OAAa,CACrC,kBAAMipB,EAAiBgG,IAAI,CAAC,SAAA1vB,CAAA,SAAeuxB,EAAbA,OAAAA,CAAqBxvB,MAAM,CAAG,KAC5D,CAAC2nB,EAAiB,EAKduI,EAAyBxxB,EAAAA,OAAa,CAAC,WAC3C,OAAO4oB,EACJtlB,GAAG,CAAC,SAAA/D,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CACL,OAAO+mB,EADWA,OAAAA,CAEfhrB,MAAM,CAAC,SAAAvG,CAAA,MAAEsrB,EAAAA,EAAAA,WAAAA,OAAiBsE,CAAAA,EAAAA,GAAAA,CAAAA,EAAmCtE,KAC7DvnB,GAAG,CAAC,SAAA/D,CAAA,QAA0B,CAC7BwK,YAAAA,EACA0nB,WAFKvnB,EAAAA,IAAAA,CAGL2gB,YAHWA,EAAAA,WAAAA,GAKjB,GACC9F,IAAI,EACT,EAAG,CAAC6D,EAAY,EAIV8I,EAA4B1xB,EAAAA,OAAa,CAAC,WAC9C,OAAOwxB,EAAuBluB,GAAG,CAAC,SAAA/D,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CAAa0nB,EAAAA,EAAAA,UAAAA,OAC/CN,CAAAA,EAAAA,GAAAA,CAAAA,EAAcpnB,EAAa0nB,IAE/B,EAAG,CAACD,EAAuB,EAGzBlC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAoBoC,GAAAA,GADdnC,EAAAA,CACND,CAAAA,EAAAA,CADMC,UAAAA,CAAAA,EACND,CAAAA,CAAAA,EAAAA,CADiCE,EAAAA,EAAAA,eAAAA,CAAiBrI,EAAAA,EAAAA,WAAAA,CAI9CsI,EAA2BzvB,EAAAA,OAAa,CAAC,WAC7C,IAAM0vB,EAAe,IAAIxvB,IACvB+oB,EACG3lB,GAAG,CAAC,SAAA/D,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CACL,OAAO+mB,EADWA,OAAAA,CACHxtB,GAAG,CAAC,SAAA/D,CAAA,MAAE2K,EAAAA,EAAAA,IAAAA,OAAUinB,CAAAA,EAAAA,GAAAA,CAAAA,EAAcpnB,EAAaG,IAC5D,GACC6a,IAAI,IAET,OAAO2M,EAA0B5rB,MAAM,CAAC,SAACwC,CAAAA,SAAQonB,EAAa3qB,GAAG,CAACuD,IACpE,EAAG,CAACopB,EAA2BzI,EAAiB,EAI1C0I,EAAiB3xB,EAAAA,OAAa,CAAC,WACnC,IAAM4vB,EAAsB,IAAI1vB,IAC9BuvB,EAAyB3pB,MAAM,CAAC,SAACwC,CAAAA,SAAgBulB,EAAY9oB,GAAG,CAACuD,MAEnE,OAAOkpB,EAAuB1rB,MAAM,CAAC,SAAAvG,CAAA,MAAEwK,EAAAA,EAAAA,WAAAA,CAAa0nB,EAAAA,EAAAA,UAAAA,CAClD,OAAO7B,EAAoB7qB,GAAG,CAACosB,CAAAA,EAAAA,GAAAA,CAAAA,EAAcpnB,EAAa0nB,GAC5D,EACF,EAAG,CAAChC,EAA0B+B,EAAwB3D,EAAY,EAE5DgC,EAAoC6B,EAA0BpwB,MAAM,CAAG,EACvEwuB,EAAe6B,EAAerwB,MAAM,CA0EpC6nB,EAAoBC,GAAqB,CAACX,GAAepqB,GAAW,CAAC8C,EAE3E,MACE,GAAA9D,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,QAAQ,EAAGe,MAAO,CAACE,OAAQ,OAAQ8I,SAAU,QAAQ,YAC1E,GAAAnK,EAAAS,GAAA,EAAC+P,EAAAA,CAAUA,CAAAA,CACT5P,MAAO,GAAAZ,EAAAS,GAAA,EAACgQ,EAAAA,EAAOA,CAAAA,UAAC,aAChBC,KAAM,GAAA1Q,EAAAS,GAAA,EAACf,aAAYA,CAACG,IAAI,UAAUD,aAAcA,MAElD,GAAAI,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CACFyB,QAAS,CAACmD,WAAY,GAAID,SAAU,EAAE,EACtC1E,KAAM,CACJC,UAAW,MACXE,WAAY,SACZD,eAAgB,gBAChBS,IAAK,GACL2a,KAAM,CACR,YAEA,GAAAzb,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOU,IAAK,EAAE,YAClC4xB,EACD,GAAA1yB,EAAAS,GAAA,EAACkb,GAAAA,EAASA,CAAAA,CACRxO,KAAK,SACLe,MAAOiN,EACPuP,aACEoB,EACE,GAAA9rB,EAAAS,GAAA,EAAC0oB,mBAAkBA,CAACC,eAAe,qBACjCxkB,KAAAA,EAEN+C,SAAU,SAACyJ,CAAAA,SAAMgK,EAAehK,EAAEL,MAAM,CAAC7C,KAAK,GAC9CpC,YAAY,yBACZ3K,MAAO,CAACC,MAAO,OAAO,OAG1B,GAAApB,EAAAS,GAAA,EAAC4oB,GAAAA,CAAOA,CAAAA,CACNvf,QAAQ,8DACRyf,QAAS2K,GAAqB,CAAC1B,EAC/BlJ,UAAU,UACVqJ,4BAA2B,YAE3B,GAAA3yB,EAAAS,GAAA,EAAC8zB,GAAAA,CAAoBA,CAAAA,CAACd,QAASa,EAAgBzB,OAAQ,kBAAMjzB,EAAamV,OAAO,WAGpFxB,EAAiBtP,MAAM,CACtB,GAAAjE,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CACFyB,QAAS,CAACkD,SAAU,EAAGC,WAAY,EAAE,EACrCG,OAAO,iBACP9E,KAAM,CAACC,UAAW,MAAOU,IAAK,CAAC,WAE9ByS,IAED,KACHvS,GAAW,CAACoqB,EACX,GAAAprB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,YACZ,GAAA3B,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAGnB,GAAAlB,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACGnG,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMgvB,kCAAkC,CAACtmB,UAAU,IAAK,oBACvD,GAAAxM,EAAAS,GAAA,EAAC+zB,uBAAAA,CACC3rB,MAAO/E,EAAKgvB,kCAAkC,CAAC9kB,OAAO,CAAC/J,MAAM,GAE7D,KACJ,GAAAjE,EAAAS,GAAA,EAACg0B,GAAAA,CAAUA,CAAAA,CACTtgB,aAAcrQ,MAAAA,EAAAA,KAAAA,EAAAA,EAAMoQ,QAAQ,CAACC,YAAY,CACzCxS,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,EACtCG,OAAO,QAER6E,WA1IP,GAAI9I,GAAW,CAAC8C,EACd,MACE,GAAA9D,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOC,eAAgB,QAAQ,EAAGc,MAAO,CAAC6qB,WAAY,OAAO,WAClF,GAAAhsB,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,WAAY,SAAUQ,IAAK,EAAE,YACzD,GAAAd,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,GAAAlB,EAAAS,GAAA,EAACM,MAAAA,CAAII,MAAO,CAACqJ,MAAOC,CAAAA,EAAAA,EAAAA,CAAAA,GAAgB,WAAG,0BAM/C,IAAMwhB,EAAiB7L,EAASnc,MAAM,CAAGoc,EAAapc,MAAM,QAE5D,EAAsBA,MAAM,CAyC1B,GAAAjE,EAAAS,GAAA,EAAC+yB,oBAAmBA,CAClBjD,eACEiC,EACE,GAAAxyB,EAAAS,GAAA,EAACwyB,GAAAA,CAAWA,CAAAA,CACVR,aAAcA,EACdS,WAAYd,EAAyBnuB,MAAM,CAC3C6lB,YAAaA,IAEbllB,KAAAA,EAEN6kB,MAAOmC,EACP4E,YAAaA,EACbC,qBAAsB0B,IApDxB,EAEI,GAAAnyB,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACqD,IAAK,EAAE,WACpB,GAAAhF,EAAAS,GAAA,EAACsT,GAAAA,CAAaA,CAAAA,CACZ5G,KAAK,SACLvM,MAAM,sBACNoJ,YACEiiB,EACE,GAAAjsB,EAAAC,IAAA,EAACc,MAAAA,WAAI,uBACiB,GAAAf,EAAAS,GAAA,EAACyJ,SAAAA,UAAQiR,IAAqB,gDAIpD,GAAAnb,EAAAC,IAAA,EAACc,MAAAA,WAAI,uBACiB,GAAAf,EAAAS,GAAA,EAACyJ,SAAAA,UAAQiR,IAAqB,yCAW9D,GAAAnb,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACqD,IAAK,EAAE,WACpB,GAAAhF,EAAAS,GAAA,EAACsT,GAAAA,CAAaA,CAAAA,CACZ5G,KAAK,SACLvM,MAAM,aACNoJ,YACEiiB,EACI,uDACA,+CAuBhB,SA0EF,EAEMuI,uBAAyB,SAAAtyB,CAAA,MAAE2G,EAAAA,EAAAA,KAAAA,CACHlG,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAApCwF,EAAqBxF,CAAAA,CAAAA,EAAAA,CAAb+I,EAAa/I,CAAAA,CAAAA,EAAAA,QAE5B,EAOE,GAAA3C,EAAAC,IAAA,EAAAD,EAAAiK,QAAA,YACE,GAAAjK,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACkD,SAAU,GAAIC,WAAY,EAAE,EAAGG,OAAO,eACnD,GAAAjF,EAAAS,GAAA,EAACkQ,EAAAA,CAAKA,CAAAA,CACJC,OAAO,UACPhQ,MAPMiI,IAAAA,EAAc,sBAAwB,GAAS2E,MAAA,CAAN3E,EAAM,uBAQrDmB,YACE,GAAAhK,EAAAC,IAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,SAAUU,IAAK,GAAIR,WAAY,YAAY,YAChE,GAAAN,EAAAS,GAAA,EAACM,MAAAA,UAAI,kLAKL,GAAAf,EAAAS,GAAA,EAAC0gB,GAAAA,EAAMA,CAAAA,CAAC7b,QAAS,kBAAMoG,EAAU,cAC9B7C,IAAAA,EAAc,yBAA2B,mCAMpD,GAAA7I,EAAAC,IAAA,EAACwgB,GAAAA,EAAMA,CAAAA,CACLtY,OAAQA,EACRvH,MAAM,uBACNO,MAAO,CAACC,MAAO,OAAQ+c,SAAU,QAAQ,YAEzC,GAAAne,EAAAS,GAAA,EAACP,EAAAA,CAAGA,CAAAA,CAACyB,QAAS,CAACC,OAAQ,CAAC,WACtB,GAAA5B,EAAAS,GAAA,EAACi0B,uBAAAA,CAAAA,KAEH,GAAA10B,EAAAS,GAAA,EAACygB,GAAAA,EAAYA,CAAAA,UACX,GAAAlhB,EAAAS,GAAA,EAAC0gB,GAAAA,EAAMA,CAAAA,CAACvQ,OAAO,UAAUtL,QAAS,kBAAMoG,EAAU,cAAQ,iBAlCzD,IAyCX,EAEMgpB,uBAAyB,WAC7B,IAAM5wB,EAASqI,CAAAA,EAAAA,EAAAA,CAAAA,EACbwoB,IADK7wB,IAAAA,QAGP,EAIIA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMgvB,kCAAkC,CAACtmB,UAAU,IAAK,oBAExD,GAAAxM,EAAAS,GAAA,EAACysB,kBAAiBA,CAChBC,aAAcrpB,EAAKgvB,kCAAkC,CAAC9kB,OAAO,CAC7Dof,eAAgB,KAKf,GAAAptB,EAAAS,GAAA,EAACoT,GAAAA,EAAeA,CAAAA,CAACC,MAAOhQ,MAAAA,EAAAA,KAAAA,EAAAA,EAAMgvB,kCAAkC,GAZ9D,GAAA9yB,EAAAS,GAAA,EAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAa5B,EAOMuqB,iCAAe,SAAC3nB,CAAAA,EACpB,GAAIA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMif,gBAAgB,CAACvW,UAAU,IAAK,YACxC,MAAO,EAAE,CAGX,IAAM0f,EAAUpoB,EAAKif,gBAAgB,CAACkB,eAAe,CAAChe,GAAG,CAAC,SAACkmB,CAAAA,SAAUA,EAAM3H,mBAAmB,GAExFqG,EAAU,EAAE,CAEbjH,EAAA,GAAAC,EAAA,GAAAC,EAAAlf,KAAAA,MAAL,QAAKmf,EAAAC,EAAekI,CAAAA,CAAAA,OAAAA,QAAAA,CAAAA,GAAf,CAAAtI,CAAAA,EAAA,CAAAG,EAAAC,EAAAI,IAAA,IAAAC,IAAA,EAAAT,EAAA,GAAwB,CAAxB,IAAMuI,EAANpI,EAAA7V,KAAA,CACH,GAAIie,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAO3f,UAAU,IAAK,0BAIrB4f,EAAA,GAAAC,EAAA,GAAAC,EAAA1nB,KAAAA,MAAL,QAAK6f,EAAA8H,EAAcJ,EAAMzH,YAAY,CAAAR,OAAAC,QAAA,IAAhC,CAAAiI,CAAAA,EAAA,CAAA3H,EAAA8H,EAAAnI,IAAA,IAAAC,IAAA,EAAA+H,EAAA,GAAkC,CAAlC,IAAM1O,EAAN+G,EAAAvW,KAAA,CACIrB,EAAiB6Q,EAAjB7Q,IAAAA,CAAM4mB,EAAW/V,EAAX+V,OAAAA,CACP/mB,EAAcC,CAAAA,EAAAA,GAAAA,EAAAA,EAAiBE,EAAMsf,EAAMtf,IAAI,CAEjD4mB,CAAAA,EAAQxvB,MAAM,CAAG,GACnB4mB,EAAQ7a,IAAI,CAAC,CACXtD,YAAAA,EACA+mB,QAAAA,CACF,EAEJ,WAVKpH,EAAA,GAAAC,EAAAlH,cAAAgH,GAAAG,MAAAA,EAAAlH,MAAA,EAAAkH,EAAAlH,MAAA,cAAAgH,QAAAC,IAWP,WAhBKzI,EAAA,GAAAC,EAAAsB,cAAAxB,GAAAI,MAAAA,EAAAqB,MAAA,EAAArB,EAAAqB,MAAA,cAAAxB,QAAAC,GAkBL,OAAO8G,gBAAgBC,EACzB,EAEMoJ,GAAyBlyB,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,qCA6C9BuxB,GAAAA,CAAgCA,CAChCtxB,EAAAA,CAAqBA,CACrBiT,GAAAA,CAAwBA,EAGtB0f,GAA2B5yB,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,sCAahCwxB,GAAAA,EAA0BA,CAC1BvxB,EAAAA,CAAqBA,EC1dZ4yB,aAAe,WAC1B,MACE,GAAA50B,EAAAC,IAAA,EAACyoB,EAAAA,EAAMA,CAAAA,WACL,GAAA1oB,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CAAChgB,KAAK,8BACV,GAAA3I,EAAAS,GAAA,EAACynB,qBAAoBA,CAAAA,KAEvB,GAAAloB,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CAAChgB,KAAK,0BACV,GAAA3I,EAAAS,GAAA,EAAC0qB,iBAAgBA,CAAAA,KAEnB,GAAAnrB,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CAAChgB,KAAK,+BACV,GAAA3I,EAAAS,GAAA,EAACywB,sBAAqBA,CAAAA,KAExB,GAAAlxB,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CAAChgB,KAAK,6BACV,GAAA3I,EAAAS,GAAA,EAACuzB,oBAAmBA,CAAAA,KAEtB,GAAAh0B,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CAAChgB,KAAK,qCACV,GAAA3I,EAAAS,GAAA,EAAC+N,wBAAuBA,CAAAA,KAE1B,GAAAxO,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CAAChgB,KAAK,2CACV,GAAA3I,EAAAS,GAAA,EAAC6U,aAAYA,CAAAA,KAEf,GAAAtV,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CAAChgB,KAAK,sBAAsBksB,MAAK,YACrC,GAAA70B,EAAAS,GAAA,EAAC+R,kBAAiBA,CAAAA,KAEpB,GAAAxS,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CAAChgB,KAAK,+BACV,GAAA3I,EAAAS,GAAA,EAACqsB,sBAAqBA,CAAAA,KAExB,GAAA9sB,EAAAS,GAAA,EAACkoB,EAAAA,EAAKA,CAAAA,CAAChgB,KAAK,IAAIigB,OAAQ,iBAAM,GAAA5oB,EAAAS,GAAA,EAACooB,EAAAA,EAAQA,CAAAA,CAAChoB,GAAG,4BAGjD,EAIAi0B,GAAeF","sources":["webpack://_N_E/../ui-core/src/overview/OverviewTabs.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AssetDaemonTicksQuery.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationTickDetailDialog.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializeRunHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationRoot.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewAssetsRoot.tsx","webpack://_N_E/../ui-core/src/instance/RepoFilterButton.tsx","webpack://_N_E/../ui-core/src/runs/useHourWindow.tsx","webpack://_N_E/../ui-core/src/instance/NextTick.tsx","webpack://_N_E/../ui-core/src/runs/useRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTimelineRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewActivityRoot.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesRoot.tsx","webpack://_N_E/../ui-core/src/instigation/Unloadable.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useCodeLocationFilter.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewRoot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {QueryResult} from '@apollo/client';\nimport {Box, Spinner, Tabs, colorAccentBlue, colorAccentGray} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {useAutomaterializeDaemonStatus} from '../assets/AutomaterializeDaemonStatusTag';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Activity\" to=\"/overview/activity\" />\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />\n        <TabLink\n          id=\"amp\"\n          title={\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <div>Auto-materialize</div>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <div\n                  style={{\n                    width: '10px',\n                    height: '10px',\n                    borderRadius: '50%',\n                    backgroundColor:\n                      automaterialize.paused === false ? colorAccentBlue() : colorAccentGray(),\n                  }}\n                />\n              )}\n            </Box>\n          }\n          to=\"/overview/automaterialize\"\n        />\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql} from '@apollo/client';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\n\nexport const ASSET_DAEMON_TICKS_QUERY = gql`\n  query AssetDaemonTicksQuery(\n    $dayRange: Int\n    $dayOffset: Int\n    $statuses: [InstigationTickStatus!]\n    $limit: Int\n    $cursor: String\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    autoMaterializeTicks(\n      dayRange: $dayRange\n      dayOffset: $dayOffset\n      statuses: $statuses\n      limit: $limit\n      cursor: $cursor\n      beforeTimestamp: $beforeTimestamp\n      afterTimestamp: $afterTimestamp\n    ) {\n      id\n      ...AssetDaemonTickFragment\n    }\n  }\n\n  fragment AssetDaemonTickFragment on InstigationTick {\n    id\n    timestamp\n    endTimestamp\n    status\n    instigationType\n    error {\n      ...PythonErrorFragment\n    }\n    requestedAssetKeys {\n      path\n    }\n    requestedAssetMaterializationCount\n    autoMaterializeAssetEvaluationId\n    requestedMaterializationsForAssets {\n      assetKey {\n        path\n      }\n      partitionKeys\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Body2,\n  Box,\n  ButtonGroup,\n  ButtonLink,\n  Checkbox,\n  CursorHistoryControls,\n  Spinner,\n  Table,\n} from '@dagster-io/ui-components';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {TimeElapsed} from '../../runs/TimeElapsed';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\nimport {TickStatusTag} from '../../ticks/TickStatusTag';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n  AssetDaemonTickFragment,\n} from './types/AssetDaemonTicksQuery.types';\n\nconst PAGE_SIZE = 15;\n\nexport const AutomaterializationEvaluationHistoryTable = ({\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: {\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}) => {\n  const [statuses, setStatuses] = useQueryPersistedState<Set<InstigationTickStatus>>({\n    queryKey: 'statuses',\n    decode: React.useCallback(({statuses}: {statuses?: string}) => {\n      return new Set<InstigationTickStatus>(\n        statuses\n          ? JSON.parse(statuses)\n          : [\n              InstigationTickStatus.STARTED,\n              InstigationTickStatus.SUCCESS,\n              InstigationTickStatus.FAILURE,\n            ],\n      );\n    }, []),\n    encode: React.useCallback((raw: Set<InstigationTickStatus>) => {\n      return {statuses: JSON.stringify(Array.from(raw))};\n    }, []),\n  });\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetDaemonTicksQuery,\n    AssetDaemonTicksQueryVariables\n  >({\n    query: ASSET_DAEMON_TICKS_QUERY,\n    variables: {\n      statuses: React.useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      const ticks = data.autoMaterializeTicks;\n      if (!ticks.length) {\n        return undefined;\n      }\n      return ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data?.autoMaterializeTicks) {\n        return [];\n      }\n      return data.autoMaterializeTicks;\n    },\n    pageSize: PAGE_SIZE,\n  });\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      const ticks = queryResult.data?.autoMaterializeTicks;\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, queryResult.data?.autoMaterializeTicks, setTimerange]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <Box>\n      <Box\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n        padding={{vertical: 12, horizontal: 24}}\n        margin={{top: 32}}\n        border=\"top\"\n      >\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <ButtonGroup\n            activeItems={new Set(['evaluations'])}\n            buttons={[\n              {id: 'evaluations', label: 'Evaluations'},\n              {id: 'runs', label: 'Runs'},\n            ]}\n            onClick={(id: 'evaluations' | 'runs') => {\n              setTableView(id);\n            }}\n          />\n          {!queryResult.data ? <Spinner purpose=\"body-text\" /> : null}\n        </Box>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.STARTED}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.SUCCESS}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.FAILURE}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.SKIPPED}\n          />\n        </Box>\n      </Box>\n      <TableWrapper>\n        <thead>\n          <tr>\n            <th style={{width: 120}}>Timestamp</th>\n            <th style={{width: 90}}>Status</th>\n            <th style={{width: 90}}>Duration</th>\n            <th style={{width: 180}}>Result</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Use previous data to stop page from jumping while new data loads */}\n          {(queryResult.data || queryResult.previousData)?.autoMaterializeTicks.map(\n            (tick, index) => {\n              // This is a hack for ticks that get stuck in started\n              const isTickStuckInStartedState =\n                index !== 0 &&\n                tick.status === InstigationTickStatus.STARTED &&\n                !paginationProps.hasPrevCursor;\n\n              return (\n                <tr key={tick.id}>\n                  <td>\n                    <Timestamp\n                      timestamp={{unix: tick.timestamp}}\n                      timeFormat={{showTimezone: true}}\n                    />\n                  </td>\n                  <td>\n                    <TickStatusTag tick={tick} isStuckStarted={isTickStuckInStartedState} />\n                  </td>\n                  <td>\n                    {isTickStuckInStartedState ? (\n                      ' - '\n                    ) : (\n                      <TimeElapsed startUnix={tick.timestamp} endUnix={tick.endTimestamp} />\n                    )}\n                  </td>\n                  <td>\n                    {[InstigationTickStatus.SKIPPED, InstigationTickStatus.SUCCESS].includes(\n                      tick.status,\n                    ) ? (\n                      <ButtonLink\n                        onClick={() => {\n                          setSelectedTick(tick);\n                        }}\n                      >\n                        <Body2>\n                          {tick.requestedAssetMaterializationCount} materializations requested\n                        </Body2>\n                      </ButtonLink>\n                    ) : (\n                      ' - '\n                    )}\n                  </td>\n                </tr>\n              );\n            },\n          )}\n        </tbody>\n      </TableWrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\nconst StatusLabels = {\n  [InstigationTickStatus.SKIPPED]: 'None requested',\n  [InstigationTickStatus.STARTED]: 'Started',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n};\n\nfunction StatusCheckbox({\n  status,\n  statuses,\n  setStatuses,\n}: {\n  status: InstigationTickStatus;\n  statuses: Set<InstigationTickStatus>;\n  setStatuses: (statuses: Set<InstigationTickStatus>) => void;\n}) {\n  return (\n    <Checkbox\n      label={StatusLabels[status]}\n      checked={statuses.has(status)}\n      onChange={() => {\n        const newStatuses = new Set(statuses);\n        if (statuses.has(status)) {\n          newStatuses.delete(status);\n        } else {\n          newStatuses.add(status);\n        }\n        setStatuses(newStatuses);\n      }}\n    />\n  );\n}\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Subtitle2,\n  Caption,\n  Icon,\n  Spinner,\n  colorTextLight,\n  colorBackgroundDefault,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {AssetKeyInput, InstigationTickStatus} from '../../graphql/types';\nimport {TickDetailSummary} from '../../instigation/TickDetailsDialog';\nimport {HeaderCell, Inner, Row, RowCell} from '../../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../../workspace/workspacePath';\nimport {AssetLink} from '../AssetLink';\nimport {\n  AssetKeysDialog,\n  AssetKeysDialogHeader,\n  AssetKeysDialogEmptyState,\n} from '../AutoMaterializePolicyPage/AssetKeysDialog';\nimport {assetDetailsPathForKey} from '../assetDetailsPathForKey';\n\nimport {AssetDaemonTickFragment} from './types/AssetDaemonTicksQuery.types';\nimport {\n  AssetGroupAndLocationQuery,\n  AssetGroupAndLocationQueryVariables,\n} from './types/AutomaterializationTickDetailDialog.types';\nconst TEMPLATE_COLUMNS = '30% 17% 53%';\n\nexport const AutomaterializationTickDetailDialog = React.memo(\n  ({\n    tick,\n    isOpen,\n    close,\n  }: {\n    tick: AssetDaemonTickFragment | null;\n    isOpen: boolean;\n    close: () => void;\n  }) => {\n    const [queryString, setQueryString] = React.useState('');\n\n    const filteredAssetKeys = React.useMemo(\n      () =>\n        tick\n          ? tick.requestedAssetKeys.filter((assetKey) =>\n              assetKey.path.join('/').includes(queryString),\n            )\n          : [],\n      [tick, queryString],\n    );\n\n    const count = tick?.requestedAssetKeys.length || 0;\n\n    const parentRef = React.useRef<HTMLDivElement | null>(null);\n    const rowVirtualizer = useVirtualizer({\n      count: filteredAssetKeys.length,\n      getScrollElement: () => parentRef.current,\n      estimateSize: () => 34,\n      overscan: 10,\n    });\n    const totalHeight = rowVirtualizer.getTotalSize();\n    const items = rowVirtualizer.getVirtualItems();\n\n    const assetKeyToPartitionsMap = React.useMemo(() => {\n      const map: Record<string, string[]> = {};\n      tick?.requestedMaterializationsForAssets.forEach(({assetKey, partitionKeys}) => {\n        map[tokenForAssetKey(assetKey)] = partitionKeys;\n      });\n      return map;\n    }, [tick?.requestedMaterializationsForAssets]);\n\n    const content = React.useMemo(() => {\n      if (queryString && !filteredAssetKeys.length) {\n        return (\n          <AssetKeysDialogEmptyState\n            title=\"No matching asset keys\"\n            description={\n              <>\n                No matching asset keys for <strong>{queryString}</strong>\n              </>\n            }\n          />\n        );\n      }\n      if (!tick?.requestedAssetKeys.length) {\n        return (\n          <Box padding={{vertical: 12, horizontal: 24}}>\n            <Caption color={colorTextLight()}>None</Caption>\n          </Box>\n        );\n      }\n      return (\n        <div style={{overflow: 'scroll'}} ref={parentRef}>\n          <Box\n            border=\"top-and-bottom\"\n            style={{\n              display: 'grid',\n              gridTemplateColumns: TEMPLATE_COLUMNS,\n              height: '32px',\n              fontSize: '12px',\n              color: colorTextLight(),\n              position: 'sticky',\n              top: 0,\n              zIndex: 1,\n              background: colorBackgroundDefault(),\n            }}\n          >\n            <HeaderCell>Asset</HeaderCell>\n            <HeaderCell>Group</HeaderCell>\n            <HeaderCell>Result</HeaderCell>\n          </Box>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const assetKey = filteredAssetKeys[index]!;\n              return (\n                <AssetDetailRow\n                  key={key}\n                  $height={size}\n                  $start={start}\n                  assetKey={assetKey}\n                  partitionKeys={assetKeyToPartitionsMap[tokenForAssetKey(assetKey)]}\n                  evaluationId={tick.autoMaterializeAssetEvaluationId!}\n                />\n              );\n            })}\n          </Inner>\n        </div>\n      );\n    }, [assetKeyToPartitionsMap, filteredAssetKeys, items, queryString, tick, totalHeight]);\n\n    return (\n      <AssetKeysDialog\n        isOpen={isOpen}\n        setIsOpen={close}\n        height={400}\n        header={\n          <AssetKeysDialogHeader\n            title={\n              tick ? (\n                <div>\n                  <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n                </div>\n              ) : (\n                ''\n              )\n            }\n            showSearch={count > 0}\n            placeholder=\"Filter by asset key…\"\n            queryString={queryString}\n            setQueryString={setQueryString}\n          />\n        }\n        content={\n          <div\n            style={{\n              display: 'grid',\n              gridTemplateRows: 'auto auto minmax(0, 1fr)',\n              height: '100%',\n            }}\n          >\n            <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n              {tick ? <TickDetailSummary tick={tick} /> : null}\n            </Box>\n            {tick?.status === InstigationTickStatus.STARTED ? null : (\n              <>\n                <Box\n                  padding={{vertical: 12, horizontal: 24}}\n                  border={filteredAssetKeys.length > 0 ? undefined : 'bottom'}\n                >\n                  <Subtitle2>Materializations requested</Subtitle2>\n                </Box>\n                {content}\n              </>\n            )}\n          </div>\n        }\n      />\n    );\n  },\n);\n\nconst AssetDetailRow = ({\n  $start,\n  $height,\n  assetKey,\n  partitionKeys,\n  evaluationId,\n}: {\n  $start: number;\n  $height: number;\n  assetKey: AssetKeyInput;\n  partitionKeys?: string[];\n  evaluationId: number;\n}) => {\n  const numMaterializations = partitionKeys?.length || 1;\n  const {data} = useQuery<AssetGroupAndLocationQuery, AssetGroupAndLocationQueryVariables>(\n    ASSET_GROUP_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        assetKey: {path: assetKey.path},\n      },\n    },\n  );\n  const asset = data?.assetOrError.__typename === 'Asset' ? data.assetOrError : null;\n  const definition = asset?.definition;\n  const repoAddress = definition\n    ? buildRepoAddress(definition.repository.name, definition.repository.location.name)\n    : null;\n  return (\n    <Row $start={$start} $height={$height}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <AssetLink path={assetKey.path} icon=\"asset\" textStyle=\"middle-truncate\" />\n        </RowCell>\n        <RowCell>\n          {data ? (\n            definition && definition.groupName && repoAddress ? (\n              <Link\n                to={workspacePathFromAddress(repoAddress, `/asset-groups/${definition.groupName}`)}\n              >\n                <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                  <Icon color={colorTextLight()} name=\"asset_group\" />\n                  {definition.groupName}\n                </Box>\n              </Link>\n            ) : (\n              <Caption color={colorTextLight()}>Asset not found</Caption>\n            )\n          ) : (\n            <Spinner purpose=\"body-text\" />\n          )}\n        </RowCell>\n        <RowCell>\n          <Link\n            to={assetDetailsPathForKey(assetKey, {\n              view: 'auto-materialize-history',\n              evaluation: `${evaluationId}`,\n            })}\n          >\n            {numMaterializations} materialization{numMaterializations === 1 ? '' : 's'} requested\n          </Link>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    justify-content: center;\n  }\n`;\n\nconst ASSET_GROUP_QUERY = gql`\n  query AssetGroupAndLocationQuery($assetKey: AssetKeyInput!) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        definition {\n          id\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {ButtonGroup, Box, CursorHistoryControls} from '@dagster-io/ui-components';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {RunTable} from '../../runs/RunTable';\nimport {RUNS_ROOT_QUERY} from '../../runs/RunsRoot';\nimport {RunsRootQuery, RunsRootQueryVariables} from '../../runs/types/RunsRoot.types';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\nexport const AutomaterializeRunHistoryTable = ({\n  setTableView,\n}: {\n  setTableView: (view: 'evaluations' | 'runs') => void;\n}) => {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    RunsRootQuery,\n    RunsRootQueryVariables\n  >({\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    variables: {\n      filter: {\n        tags: [{key: 'dagster/auto_materialize', value: 'true'}],\n      },\n    },\n    query: RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  useQueryRefreshAtInterval(queryResult, 15 * 1000);\n\n  const runData = (queryResult.data || queryResult.previousData)?.pipelineRunsOrError;\n\n  return (\n    <Box>\n      <Wrapper>\n        <Box padding={{vertical: 12, horizontal: 24}} margin={{top: 32}} border=\"top\">\n          <ButtonGroup\n            activeItems={new Set(['runs'])}\n            buttons={[\n              {id: 'evaluations', label: 'Evaluations'},\n              {id: 'runs', label: 'Runs'},\n            ]}\n            onClick={(id: 'evaluations' | 'runs') => {\n              setTableView(id);\n            }}\n          />\n        </Box>\n        <RunTable runs={runData?.__typename === 'Runs' ? runData.results : []} />\n      </Wrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\n// Super hacky but easiest solution to position the action button\nconst Wrapper = styled.div`\n  position: relative;\n  > *:nth-child(2) {\n    position: absolute;\n    right: 0;\n    top: 0;\n  }\n`;\n","import {useLazyQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Page,\n  Checkbox,\n  Spinner,\n  Subtitle2,\n  Heading,\n  PageHeader,\n  Table,\n} from '@dagster-io/ui-components';\nimport React, {useLayoutEffect} from 'react';\n\nimport {useConfirmation} from '../../app/CustomConfirmationProvider';\nimport {useUnscopedPermissions} from '../../app/Permissions';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../../instigation/LiveTickTimeline2';\nimport {isOldTickWithoutEndtimestamp} from '../../instigation/util';\nimport {OverviewTabs} from '../../overview/OverviewTabs';\nimport {useAutomaterializeDaemonStatus} from '../AutomaterializeDaemonStatusTag';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationEvaluationHistoryTable} from './AutomaterializationEvaluationHistoryTable';\nimport {AutomaterializationTickDetailDialog} from './AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from './AutomaterializeRunHistoryTable';\nimport {\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n  AssetDaemonTickFragment,\n} from './types/AssetDaemonTicksQuery.types';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\nexport const AutomaterializationRoot = () => {\n  useTrackPageView();\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const confirm = useConfirmation();\n\n  const {permissions: {canToggleAutoMaterialize} = {}} = useUnscopedPermissions();\n\n  const [fetch, queryResult] = useLazyQuery<AssetDaemonTicksQuery, AssetDaemonTicksQueryVariables>(\n    ASSET_DAEMON_TICKS_QUERY,\n  );\n  const [isPaused, setIsPaused] = React.useState(false);\n  const [statuses, setStatuses] = React.useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = React.useState<undefined | [number, number]>(undefined);\n  const variables: AssetDaemonTicksQueryVariables = React.useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {\n      afterTimestamp: (Date.now() - TWENTY_MINUTES) / 1000,\n    };\n  }, [statuses, timeRange]);\n  function fetchData() {\n    fetch({\n      variables,\n    });\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(fetchData, [variables]);\n  useQueryRefreshAtInterval(queryResult, 2 * 1000, !isPaused && !timeRange && !statuses, fetchData);\n\n  const [selectedTick, setSelectedTick] = React.useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    React.useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const ids = data ? data.autoMaterializeTicks.map((tick) => `${tick.id}:${tick.status}`) : [];\n  while (ids.length < 100) {\n    // Super hacky but we need to keep the memo args length the same...\n    // And the memo below prevents us from changing the ticks reference every second\n    // which avoids a bunch of re-rendering\n    ids.push('');\n  }\n  const ticks = React.useMemo(\n    () => {\n      const ticks = data?.autoMaterializeTicks;\n      return (\n        ticks?.map((tick, index) => {\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (index !== 0 && !isOldTickWithoutEndtimestamp(tick) && !tick.endTimestamp) {\n            const copy = {...tick};\n            copy.endTimestamp = ticks[index - 1]!.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...ids.slice(0, 100)],\n  );\n  const onHoverTick = React.useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  return (\n    <Page>\n      <PageHeader title={<Heading>Overview</Heading>} tabs={<OverviewTabs tab=\"amp\" />} />\n      <Box padding={{vertical: 12, horizontal: 24}} flex={{direction: 'column', gap: 12}}>\n        <Alert\n          intent=\"info\"\n          title=\"[Experimental] Dagster can automatically materialize assets when criteria are met.\"\n          description={\n            <>\n              Auto-materialization enables a declarative approach to asset scheduling – instead of\n              defining imperative workflows to materialize your assets, you just describe the\n              conditions under which they should be materialized.{' '}\n              <a\n                href=\"https://docs.dagster.io/concepts/assets/asset-auto-execution\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Learn more about auto-materialization here\n              </a>\n              .\n            </>\n          }\n        />\n      </Box>\n      <Table>\n        <tbody>\n          <tr>\n            <td>Running</td>\n            <td>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <Checkbox\n                  format=\"switch\"\n                  checked={!automaterialize.paused}\n                  disabled={!canToggleAutoMaterialize}\n                  onChange={async (e) => {\n                    const checked = e.target.checked;\n                    if (!checked) {\n                      await confirm({\n                        title: 'Pause Auto-materializing?',\n                        description:\n                          'Pausing Auto-materializing will prevent new materializations triggered by an Auto-materializing policy.',\n                      });\n                    }\n                    automaterialize.setPaused(!checked);\n                  }}\n                />\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Evaluation frequency</td>\n            <td>~30s</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!data ? (\n        <Box padding={{vertical: 48}}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            key={selectedTick?.id}\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <AutomaterializationEvaluationHistoryTable\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable setTableView={setTableView} />\n          )}\n        </>\n      )}\n    </Page>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  CursorPaginationControls,\n  NonIdealState,\n  PageHeader,\n  Heading,\n  Page,\n  Spinner,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {BulkActionStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewTabs} from '../overview/OverviewTabs';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {useFilters} from '../ui/Filters';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\n\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from './backfill/BackfillTable';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\n\nconst PAGE_SIZE = 10;\n\nconst labelForBackfillStatus = (key: BulkActionStatus) => {\n  switch (key) {\n    case BulkActionStatus.CANCELED:\n      return 'Canceled';\n    case BulkActionStatus.CANCELING:\n      return 'Canceling';\n    case BulkActionStatus.COMPLETED:\n      return 'Completed';\n    case BulkActionStatus.FAILED:\n      return 'Failed';\n    case BulkActionStatus.REQUESTED:\n      return 'In progress';\n  }\n};\n\nconst backfillStatusValues = Object.keys(BulkActionStatus).map((key) => {\n  const status = key as BulkActionStatus;\n  const label = labelForBackfillStatus(status);\n  return {\n    label,\n    value: status,\n    match: [status, label],\n  };\n});\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const statusFilter = useStaticSetFilter<BulkActionStatus>({\n    name: 'Status',\n    icon: 'status',\n    allValues: backfillStatusValues,\n    allowMultipleSelections: false,\n    closeOnSelect: true,\n    renderLabel: ({value}) => <div>{labelForBackfillStatus(value)}</div>,\n    getStringValue: (status) => labelForBackfillStatus(status),\n  });\n\n  const {state: statusState} = statusFilter;\n\n  const {button, activeFiltersJsx} = useFilters({filters: [statusFilter]});\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {\n      status: statusState.size > 0 ? Array.from(statusState)[0]! : undefined,\n    },\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {loading, data} = queryResult;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box padding={{vertical: 64}} flex={{direction: 'column', alignItems: 'center'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: colorTextLight()}}>Loading backfills…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const partitionBackfillsOrError = data?.partitionBackfillsOrError;\n    if (partitionBackfillsOrError?.__typename === 'PythonError') {\n      return <PythonErrorInfo error={partitionBackfillsOrError} />;\n    }\n\n    if (!partitionBackfillsOrError || !partitionBackfillsOrError?.results.length) {\n      if (statusState.size > 0) {\n        return (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"no-results\"\n              title=\"No matching backfills\"\n              description=\"No backfills were found for this filter.\"\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"No backfills found\"\n            description=\"This instance does not have any backfill jobs.\"\n          />\n        </Box>\n      );\n    }\n\n    const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n    const backfillHealths = daemonHealths\n      .filter((daemon) => daemon.daemonType === 'BACKFILL')\n      .map((daemon) => daemon.required && daemon.healthy);\n    const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n\n    return (\n      <div>\n        {isBackfillHealthy ? null : (\n          <Box padding={{horizontal: 24, vertical: 16}}>\n            <DaemonNotRunningAlertBody />\n          </Box>\n        )}\n        <BackfillTable\n          backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n          refetch={queryResult.refetch}\n        />\n        {partitionBackfillsOrError.results.length > 0 ? (\n          <Box margin={{top: 16}}>\n            <CursorPaginationControls {...paginationProps} />\n          </Box>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"backfills\" refreshState={refreshState} />}\n      />\n      <Box padding={{vertical: 12, horizontal: 20}}>\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>{button}</div>\n          {activeFiltersJsx}\n        </Box>\n      </Box>\n      {content()}\n    </Page>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($status: BulkActionStatus, $cursor: String, $limit: Int) {\n    partitionBackfillsOrError(status: $status, cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useApolloClient, useQuery} from '@apollo/client';\nimport {\n  Box,\n  ButtonLink,\n  Heading,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Spinner,\n  Table,\n  Tag,\n  colorAccentBlue,\n  colorAccentGreen,\n  colorAccentRed,\n  colorBackgroundLight,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport React from 'react';\nimport {Link, useHistory, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {asAssetKeyInput} from '../../assets/asInput';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {AssetViewParams} from '../../assets/types';\nimport {AssetKey, BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT, BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {TargetPartitionsDisplay} from './TargetPartitionsDisplay';\nimport {\n  BackfillPartitionsForAssetKeyQuery,\n  BackfillPartitionsForAssetKeyQueryVariables,\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n} from './types/BackfillPage.types';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {variables: {backfillId}},\n  );\n\n  const {data} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    function getRunsUrl(status: 'inProgress' | 'complete' | 'failed' | 'targeted') {\n      const filters: RunFilterToken[] = [\n        {\n          token: 'tag',\n          value: `dagster/backfill=${backfillId}`,\n        },\n      ];\n      switch (status) {\n        case 'inProgress':\n          filters.push(\n            {\n              token: 'status',\n              value: RunStatus.STARTED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.QUEUED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.STARTING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.CANCELING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.NOT_STARTED,\n            },\n          );\n          break;\n        case 'complete':\n          filters.push({\n            token: 'status',\n            value: RunStatus.SUCCESS,\n          });\n          break;\n        case 'failed':\n          filters.push({\n            token: 'status',\n            value: RunStatus.FAILURE,\n          });\n          filters.push({\n            token: 'status',\n            value: RunStatus.CANCELED,\n          });\n          break;\n      }\n      return runsPathWithFilters(filters);\n    }\n\n    const onShowAssetDetails = async (assetKey: AssetKey, isPartitioned: boolean) => {\n      let params: AssetViewParams = {};\n\n      if (isPartitioned) {\n        const resp = await client.query<\n          BackfillPartitionsForAssetKeyQuery,\n          BackfillPartitionsForAssetKeyQueryVariables\n        >({\n          query: BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY,\n          variables: {backfillId, assetKey: asAssetKeyInput(assetKey)},\n        });\n        const data =\n          resp.data.partitionBackfillOrError.__typename === 'PartitionBackfill'\n            ? resp.data.partitionBackfillOrError.partitionsTargetedForAssetKey\n            : null;\n\n        if (data && data.ranges?.length) {\n          params = {default_range: data.ranges.map((r) => `[${r.start}...${r.end}]`).join(',')};\n        }\n      }\n      return history.push(assetDetailsPathForKey(assetKey, params));\n    };\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n          data-testid={testId('backfill-page-details')}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition selection\"\n            detail={\n              <TargetPartitionsDisplay\n                targetPartitionCount={backfill.numPartitions || 0}\n                targetPartitions={backfill.assetBackfillData?.rootTargetedPartitions}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<BackfillStatusTagForPage backfill={backfill} />} />\n        </Box>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '50%'}}>Asset name</th>\n              <th>\n                <Link to={getRunsUrl('targeted')}>Partitions targeted</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('inProgress')}>In progress</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('complete')}>Completed</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('failed')}>Failed</Link>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {backfill.assetBackfillData?.assetBackfillStatuses.map((asset) => {\n              let targeted;\n              let inProgress;\n              let completed;\n              let failed;\n              if (asset.__typename === 'AssetPartitionsStatusCounts') {\n                targeted = asset.numPartitionsTargeted;\n                inProgress = asset.numPartitionsInProgress;\n                completed = asset.numPartitionsMaterialized;\n                failed = asset.numPartitionsFailed;\n              } else {\n                targeted = 1;\n                failed = asset.failed ? 1 : 0;\n                inProgress = asset.inProgress ? 1 : 0;\n                completed = asset.materialized ? 1 : 0;\n              }\n              return (\n                <tr\n                  key={tokenForAssetKey(asset.assetKey)}\n                  data-testid={testId(`backfill-asset-row-${tokenForAssetKey(asset.assetKey)}`)}\n                >\n                  <td>\n                    <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                      <div>\n                        <ButtonLink\n                          onClick={() =>\n                            onShowAssetDetails(\n                              asset.assetKey,\n                              asset.__typename === 'AssetPartitionsStatusCounts',\n                            )\n                          }\n                        >\n                          {asset.assetKey.path.join('/')}\n                        </ButtonLink>\n                      </div>\n                      <div>\n                        <StatusBar\n                          targeted={targeted}\n                          inProgress={inProgress}\n                          completed={completed}\n                          failed={failed}\n                        />\n                      </div>\n                    </Box>\n                  </td>\n                  {asset.__typename === 'AssetPartitionsStatusCounts' ? (\n                    <>\n                      <td>{targeted}</td>\n                      <td>{inProgress}</td>\n                      <td>{completed}</td>\n                      <td>{failed}</td>\n                    </>\n                  ) : (\n                    <>\n                      <td>-</td>\n                      <td>\n                        {inProgress ? (\n                          <Tag icon=\"spinner\" intent=\"primary\">\n                            In progress\n                          </Tag>\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      <td>{completed ? <Tag intent=\"success\">Completed</Tag> : '-'}</td>\n                      <td>{failed ? <Tag intent=\"danger\">Failed</Tag> : '-'}</td>\n                    </>\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: colorTextLight()}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Page>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nfunction StatusBar({\n  targeted,\n  inProgress,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  inProgress: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: colorBackgroundLight(),\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * inProgress) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: colorAccentGreen()}} />\n      <div style={{background: colorAccentRed()}} />\n      <div style={{background: colorAccentBlue()}} />\n    </div>\n  );\n}\n\nconst Label = styled.div`\n  color: ${colorTextLight()};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = React.useReducer((s: number, _: any) => s + 1, 0);\n  React.useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...PartitionBackfillFragment\n      ...PythonErrorFragment\n      ... on BackfillNotFoundError {\n        message\n      }\n    }\n  }\n\n  fragment PartitionBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    ...BackfillActionsBackfillFragment\n\n    error {\n      ...PythonErrorFragment\n    }\n    assetBackfillData {\n      rootTargetedPartitions {\n        partitionKeys\n        ranges {\n          start\n          end\n        }\n      }\n      assetBackfillStatuses {\n        ... on AssetPartitionsStatusCounts {\n          assetKey {\n            path\n          }\n          numPartitionsTargeted\n          numPartitionsInProgress\n          numPartitionsMaterialized\n          numPartitionsFailed\n        }\n        ... on UnpartitionedAssetStatus {\n          assetKey {\n            path\n          }\n          inProgress\n          materialized\n          failed\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n\nexport const BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY = gql`\n  query BackfillPartitionsForAssetKey($backfillId: String!, $assetKey: AssetKeyInput!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionsTargetedForAssetKey(assetKey: $assetKey) {\n          partitionKeys\n          ranges {\n            start\n            end\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n","import {useQuery} from '@apollo/client';\nimport {\n  Box,\n  Caption,\n  Icon,\n  MenuItem,\n  Select,\n  Spinner,\n  Tag,\n  TextInput,\n  colorAccentGreen,\n  colorBackgroundDefault,\n  colorBorderDefault,\n  colorTextDefault,\n  colorTextLight,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetsLiveData} from '../asset-data/AssetLiveDataProvider';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {displayNameForAssetKey, tokenForAssetKey} from '../asset-graph/Utils';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {ASSET_CATALOG_TABLE_QUERY} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {\n  AssetCatalogTableQuery,\n  AssetCatalogTableQueryVariables,\n} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const query = useQuery<AssetCatalogTableQuery, AssetCatalogTableQueryVariables>(\n    ASSET_CATALOG_TABLE_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const refreshState = useQueryRefreshAtInterval(query, FIFTEEN_SECONDS);\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (query.data?.assetsOrError.__typename === 'AssetConnection') {\n      const assets = query.data.assetsOrError.nodes;\n      return groupAssets(assets);\n    }\n    return [];\n  }, [query.data?.assetsOrError]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    const result = query.data?.assetsOrError;\n    if (!query.data && query.loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (result?.__typename === 'PythonError') {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={result} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nfunction VirtualHeaderRow() {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: colorTextLight(),\n        position: 'sticky',\n        top: 0,\n        zIndex: 1,\n        background: colorBackgroundDefault(),\n      }}\n    >\n      <HeaderCell>Group name</HeaderCell>\n      <HeaderCell>Missing</HeaderCell>\n      <HeaderCell>Failed/Overdue</HeaderCell>\n      <HeaderCell>In progress</HeaderCell>\n      <HeaderCell>Materialized</HeaderCell>\n    </Box>\n  );\n}\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(\n    () => group.assets.map((asset) => ({path: asset.key.path})),\n    [group.assets],\n  );\n\n  const {liveDataByNode} = useAssetsLiveData(assetKeys);\n\n  const statuses = React.useMemo(() => {\n    type assetType = (typeof group)['assets'][0];\n    type StatusesType = {asset: assetType; status: ReturnType<typeof buildAssetNodeStatusContent>};\n    const statuses = {\n      successful: [] as StatusesType[],\n      failed: [] as StatusesType[],\n      inprogress: [] as StatusesType[],\n      missing: [] as StatusesType[],\n      loading: false,\n    };\n    if (!Object.keys(liveDataByNode).length) {\n      statuses.loading = true;\n      return statuses;\n    }\n    Object.keys(liveDataByNode).forEach((key) => {\n      const assetLiveData = liveDataByNode[key];\n      const asset = group.assets.find((asset) => tokenForAssetKey(asset.key) === key);\n      if (!asset?.definition) {\n        console.warn('Expected a definition for asset with key', key);\n        return;\n      }\n      const status = buildAssetNodeStatusContent({\n        assetKey: asset.key,\n        definition: asset.definition,\n        liveData: assetLiveData,\n        expanded: true,\n      });\n      switch (status.case) {\n        case StatusCase.LOADING:\n          statuses.loading = true;\n          break;\n        case StatusCase.SOURCE_OBSERVING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.SOURCE_OBSERVED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NEVER_OBSERVED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NO_STATE:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.LATE_OR_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.NEVER_MATERIALIZED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MISSING:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n      }\n    });\n    return statuses;\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  const isBatchStillLoading = assetKeys.length !== Object.keys(liveDataByNode).length;\n  const zeroOrBlank = isBatchStillLoading ? '' : '0';\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <Cell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between', grow: 1}}>\n            <Box flex={{direction: 'column', gap: 2, grow: 1}}>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <Icon name=\"asset_group\" />\n                {group.groupName ? (\n                  <Link\n                    style={{fontWeight: 700}}\n                    to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                  >\n                    {group.groupName}\n                  </Link>\n                ) : (\n                  UNGROUPED_ASSETS\n                )}\n              </Box>\n              <div {...containerProps}>\n                <RepositoryLinkWrapper maxWidth={viewport.width}>\n                  <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                </RepositoryLinkWrapper>\n              </div>\n            </Box>\n            <Box flex={{direction: 'column', justifyContent: 'center'}}>\n              {isBatchStillLoading ? <Spinner purpose=\"body-text\" /> : null}\n            </Box>\n          </Box>\n        </Cell>\n        <Cell>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${colorBorderDefault()}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: colorAccentGreen(),\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    vertical-align: middle;\n  }\n`;\n\nconst Cell = ({children}: {children: React.ReactNode}) => {\n  return (\n    <RowCell style={{color: colorTextDefault()}}>\n      <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${colorTextLight()};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: colorTextLight()}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","import {Box, Button, DialogFooter, DialogHeader, Dialog, Icon} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton = () => {\n  const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        outlined\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import * as React from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagster.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = React.useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = React.useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return React.useMemo(\n    () => [hourWindow, setHourWindowWithDefault],\n    [hourWindow, setHourWindowWithDefault],\n  );\n};\n","import {gql} from '@apollo/client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {isHiddenAssetGroupJob, __ASSET_JOB_PREFIX} from '../asset-graph/Utils';\nimport {InstigationStatus, RunsFilter, RunStatus} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/useRunsForTimeline.types';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    // With a very large number of runs, operating on the Apollo cache is too expensive and\n    // can block the main thread. This data has to be up-to-the-second fresh anyway, so just\n    // skip the cache entirely.\n    fetchPolicy: 'no-cache',\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = React.useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = React.useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs: TimelineJob[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const jobsAndTicksToAdd = [...jobRuns, ...jobTicks];\n          if (isAdHoc) {\n            const adHocJobs = jobs.find(\n              (job) => job.jobType === 'asset' && job.repoAddress === repoAddress,\n            );\n            if (adHocJobs) {\n              adHocJobs.runs.push(...jobsAndTicksToAdd);\n              continue;\n            }\n          }\n\n          jobs.push({\n            key: jobKey,\n            jobName,\n            jobType: isAdHoc ? 'asset' : 'job',\n            repoAddress,\n            path: workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: pipeline.name,\n              isJob: pipeline.isJob,\n            }),\n            runs: [...jobRuns, ...jobTicks],\n          } as TimelineJob);\n        }\n      }\n    }\n\n    const earliest = jobs.reduce(\n      (accum, job) => {\n        const startTimes = job.runs.map((job) => job.startTime);\n        return {...accum, [job.key]: Math.min(...startTimes)};\n      },\n      {} as {[jobKey: string]: number},\n    );\n\n    return jobs.sort((a, b) => earliest[a.key]! - earliest[b.key]!);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return React.useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {Box, TextInput, Button, ButtonGroup, ErrorBoundary} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {useHourWindow, HourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\n\nexport const OverviewTimelineRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(\n    () => jobs.filter(({key}) => visibleJobKeys.has(key)),\n    [jobs, visibleJobKeys],\n  );\n\n  return (\n    <>\n      <Header refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          <TabButton selected=\"timeline\" />\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import {PageHeader, Heading, Box, JoinedButtons} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\n\nexport const OverviewActivityRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"activity\" refreshState={refreshState} />}\n      />\n    ),\n    [],\n  );\n\n  const [defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        <Route path=\"/overview/activity/assets\">\n          <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import * as React from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [value, setValue] = React.useState(false);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setValue(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return value;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewJobsTable} from './OverviewJobsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/OverviewJobsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: colorTextLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"jobs\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable = ({repos}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.resourceCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: colorTextLight()}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"resources\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? (\n              <SearchInputSpinner tooltipContent=\"Loading resources…\" />\n            ) : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (data?: OverviewResourcesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  id\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {useMutation} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Checkbox,\n  Group,\n  Table,\n  Subheading,\n  Tooltip,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {InstigationStatus} from '../graphql/types';\nimport {\n  displayScheduleMutationErrors,\n  STOP_SCHEDULE_MUTATION,\n} from '../schedules/ScheduleMutations';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {displaySensorMutationErrors, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {InstigatorSelectorInformation} from '../workspace/RepositoryInformation';\n\nimport {InstigatedRunStatus} from './InstigationUtils';\nimport {InstigationStateFragment} from './types/InstigationUtils.types';\n\nexport const UnloadableSensors = ({\n  sensorStates,\n  showSubheading = true,\n}: {\n  sensorStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}) => {\n  if (!sensorStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable sensors</Subheading> : null}\n        <UnloadableSensorInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Sensor name</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sensorStates.map((sensorState) => (\n            <SensorStateRow sensorState={sensorState} key={sensorState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport const UnloadableSchedules = ({\n  scheduleStates,\n  showSubheading = true,\n}: {\n  scheduleStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}) => {\n  if (!scheduleStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable schedules</Subheading> : null}\n        <UnloadableScheduleInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Schedule name</th>\n            <th style={{width: '150px'}}>Schedule</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n            <th>Partition set status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {scheduleStates.map((scheduleState) => (\n            <ScheduleStateRow scheduleState={scheduleState} key={scheduleState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nconst UnloadableSensorInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following sensors, but you cannot turn them back on.{' '}\n      </div>\n    }\n    description={\n      <div>\n        The following sensors were previously started but now cannot be loaded. They may be part of\n        a different workspace or from a sensor or code location that no longer exists in code. You\n        can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst UnloadableScheduleInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following schedules, but you cannot turn them back on.\n      </div>\n    }\n    description={\n      <div>\n        The following schedules were previously started but now cannot be loaded. They may be part\n        of a different workspace or from a schedule or code location that no longer exists in code.\n        You can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst SensorStateRow = ({sensorState}: {sensorState: InstigationStateFragment}) => {\n  const {id, selectorId, name, status, ticks, hasStopPermission} = sensorState;\n\n  const [stopSensor, {loading: toggleOffInFlight}] = useMutation<\n    StopRunningSensorMutation,\n    StopRunningSensorMutationVariables\n  >(STOP_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const confirm = useConfirmation();\n\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to turn off this sensor?',\n        description:\n          'The definition for this sensor is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSensor({variables: {jobOriginId: id, jobSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !hasStopPermission;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        disabled={toggleOffInFlight || status === InstigationStatus.STOPPED || lacksPermission}\n        checked={status === InstigationStatus.RUNNING}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          {name}\n        </Group>\n        <InstigatorSelectorInformation instigatorState={sensorState} />\n      </td>\n      <td>\n        {latestTick ? (\n          <TickStatusTag tick={latestTick} />\n        ) : (\n          <span style={{color: colorTextLight()}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nconst ScheduleStateRow = ({scheduleState}: {scheduleState: InstigationStateFragment}) => {\n  const [stopSchedule, {loading: toggleOffInFlight}] = useMutation<\n    StopScheduleMutation,\n    StopScheduleMutationVariables\n  >(STOP_SCHEDULE_MUTATION, {\n    onCompleted: displayScheduleMutationErrors,\n  });\n  const confirm = useConfirmation();\n  const {id, selectorId, name, ticks, status, typeSpecificData} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n  const cronSchedule =\n    typeSpecificData && typeSpecificData.__typename === 'ScheduleData'\n      ? typeSpecificData.cronSchedule\n      : null;\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to stop this schedule?',\n        description:\n          'The definition for this schedule is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSchedule({variables: {scheduleOriginId: id, scheduleSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !scheduleState.hasStopPermission;\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        checked={status === InstigationStatus.RUNNING}\n        disabled={status !== InstigationStatus.RUNNING || toggleOffInFlight || lacksPermission}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          <div>{name}</div>\n        </Group>\n        <InstigatorSelectorInformation instigatorState={scheduleState} />\n      </td>\n      <td style={{maxWidth: 150}}>\n        <div\n          style={{\n            position: 'relative',\n            width: '100%',\n            whiteSpace: 'pre-wrap',\n            display: 'block',\n          }}\n        >\n          {cronSchedule ? (\n            <Tooltip position=\"bottom\" content={cronSchedule}>\n              {humanCronString(cronSchedule)}\n            </Tooltip>\n          ) : (\n            <div>&mdash;</div>\n          )}\n        </div>\n      </td>\n      <td>{latestTick ? <TickStatusTag tick={latestTick} /> : null}</td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>&mdash;</div>\n      </td>\n    </tr>\n  );\n};\n","import * as React from 'react';\n\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {WorkspaceContext} from '../../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\n\nimport {useStaticSetFilter} from './useStaticSetFilter';\n\nexport const useCodeLocationFilter = () => {\n  const {allRepos, visibleRepos, setVisible, setHidden} = React.useContext(WorkspaceContext);\n\n  const allRepoAddresses = React.useMemo(() => {\n    return allRepos.map((repo) =>\n      buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n    );\n  }, [allRepos]);\n\n  const visibleRepoAddresses = React.useMemo(() => {\n    return visibleRepos.length === allRepos.length\n      ? []\n      : visibleRepos.map((repo) =>\n          buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n        );\n  }, [allRepos, visibleRepos]);\n\n  return useStaticSetFilter<RepoAddress>({\n    name: 'Code location',\n    icon: 'folder',\n    initialState: visibleRepoAddresses,\n    allValues: allRepoAddresses.map((repoAddress) => {\n      return {value: repoAddress, match: [repoAddressAsHumanString(repoAddress)]};\n    }),\n    getKey: (repoAddress) => repoAddressAsHumanString(repoAddress),\n    renderLabel: ({value}) => (\n      <TruncatedTextWithFullTextOnHover text={repoAddressAsHumanString(value)} />\n    ),\n    getStringValue: (value) => repoAddressAsHumanString(value),\n    onStateChanged: (state: Set<RepoAddress>) => {\n      if (state.size === 0) {\n        setVisible(allRepoAddresses);\n        return;\n      }\n\n      const hidden = allRepoAddresses.filter((repoAddress) => !state.has(repoAddress));\n      setHidden(hidden);\n      setVisible(Array.from(state));\n    },\n    menuWidth: '500px',\n  });\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n  UnloadableSchedulesQuery,\n  UnloadableSchedulesQueryVariables,\n} from './types/OverviewSchedulesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = React.useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = React.useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: colorTextLight()}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"schedules\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading schedules…\" />\n              ) : undefined\n            }\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSchedulesAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSchedulesAlert = ({count}: {count: number}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable schedule' : `${count} unloadable schedules`;\n\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 24}} border=\"top\">\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Schedules were previously started but now cannot be loaded. They may be part of a\n                code locations that no longer exist. You can turn them off, but you cannot turn them\n                back on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable schedule' : 'View unloadable schedules'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableScheduleDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableScheduleDialog = () => {\n  const {data} = useQuery<UnloadableSchedulesQuery, UnloadableSchedulesQueryVariables>(\n    UNLOADABLE_SCHEDULES_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSchedules\n        scheduleStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SCHEDULES_QUERY = gql`\n  query UnloadableSchedulesQuery {\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                        placement=\"top\"\n                      >\n                        <Tag>{row.sensorCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n              return (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.sensor.name}\n                  sensorState={row.sensor.sensorState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(sensorKey)}\n                  onToggleChecked={onToggleCheckFactory(sensorKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSensorsQuery,\n  OverviewSensorsQueryVariables,\n  UnloadableSensorsQuery,\n  UnloadableSensorsQueryVariables,\n} from './types/OverviewSensorsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: runningState.size\n          ? sensors.filter(({sensorState}) => runningState.has(sensorState.status))\n          : sensors,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = React.useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = React.useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(allPermissionedSensorKeys);\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: colorTextLight()}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"sensors\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading sensors…\" />\n              ) : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSensorsAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSensorsAlert = ({count}: {count: number}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable sensor' : `${count} unloadable sensors`;\n\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 24}} border=\"top\">\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Sensors were previously started but now cannot be loaded. They may be part of a code\n                location that no longer exists. You can turn them off, but you cannot turn them back\n                on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable sensor' : 'View unloadable sensors'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableSensorDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableSensorDialog = () => {\n  const {data} = useQuery<UnloadableSensorsQuery, UnloadableSensorsQueryVariables>(\n    UNLOADABLE_SENSORS_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSensors\n        sensorStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: {name: string; sensorState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SENSORS_QUERY = gql`\n  query UnloadableSensorsQuery {\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {AutomaterializationRoot} from '../assets/auto-materialization/AutomaterializationRoot';\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\">\n        <OverviewActivityRoot />\n      </Route>\n      <Route path=\"/overview/jobs\">\n        <OverviewJobsRoot />\n      </Route>\n      <Route path=\"/overview/schedules\">\n        <OverviewSchedulesRoot />\n      </Route>\n      <Route path=\"/overview/sensors\">\n        <OverviewSensorsRoot />\n      </Route>\n      <Route path=\"/overview/automaterialize\">\n        <AutomaterializationRoot />\n      </Route>\n      <Route path=\"/overview/backfills/:backfillId\">\n        <BackfillPage />\n      </Route>\n      <Route path=\"/overview/backfills\" exact>\n        <InstanceBackfills />\n      </Route>\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n"],"names":["_obj","OverviewTabs","props","refreshState","tab","automaterialize","useAutomaterializeDaemonStatus","jsx_runtime","jsxs","Box","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","jsx","TabLink","id","title","to","gap","div","loading","Spinner","purpose","style","width","height","borderRadius","backgroundColor","paused","colorAccentBlue","colorAccentGray","padding","bottom","QueryRefreshCountdown","ASSET_DAEMON_TICKS_QUERY","gql","PYTHON_ERROR_FRAGMENT","AutomaterializationEvaluationHistoryTable","param","queryResult","setSelectedTick","setTableView","setTimerange","setParentStatuses","useQueryPersistedState","queryKey","decode","React","statuses","Set","JSON","parse","InstigationTickStatus","STARTED","SUCCESS","FAILURE","encode","raw","stringify","Array","from","setStatuses","useCursorPaginatedQuery","query","variables","nextCursorForResult","data","ticks","autoMaterializeTicks","length","PAGE_SIZE","getResultArray","pageSize","paginationProps","useQueryRefreshAtInterval","hasPrevCursor","start","timestamp","end","endTimestamp","undefined","vertical","horizontal","margin","top","border","ButtonGroup","activeItems","buttons","label","onClick","StatusCheckbox","status","SKIPPED","TableWrapper","thead","tr","th","tbody","previousData","_this","map","tick","index","isTickStuckInStartedState","td","Timestamp","unix","timeFormat","showTimezone","TickStatusTag","isStuckStarted","TimeElapsed","startUnix","endUnix","includes","ButtonLink","Body2","requestedAssetMaterializationCount","paddingBottom","CursorHistoryControls","StatusLabels","_define_property","_","Checkbox","checked","has","onChange","newStatuses","delete","add","styled","Table","TEMPLATE_COLUMNS","AutomaterializationTickDetailDialog","isOpen","close","queryString","setQueryString","filteredAssetKeys","requestedAssetKeys","filter","assetKey","path","join","count","parentRef","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","assetKeyToPartitionsMap","requestedMaterializationsForAssets","forEach","partitionKeys","tokenForAssetKey","content","AssetKeysDialogEmptyState","description","Fragment","strong","overflow","ref","display","gridTemplateColumns","fontSize","color","colorTextLight","position","zIndex","background","colorBackgroundDefault","HeaderCell","Inner","$totalHeight","key","size","AssetDetailRow","$height","$start","evaluationId","autoMaterializeAssetEvaluationId","Caption","AssetKeysDialog","setIsOpen","header","AssetKeysDialogHeader","showSearch","placeholder","gridTemplateRows","TickDetailSummary","Subtitle2","numMaterializations","useQuery","ASSET_GROUP_QUERY","fetchPolicy","asset","assetOrError","__typename","definition","repoAddress","buildRepoAddress","repository","name","location","Row","RowGrid","RowCell","AssetLink","icon","textStyle","groupName","Link","workspacePathFromAddress","concat","Icon","assetDetailsPathForKey","view","evaluation","AutomaterializeRunHistoryTable","runs","pipelineRunsOrError","results","tags","value","RUNS_ROOT_QUERY","runData","Wrapper","RunTable","withConfig","AutomaterializationRoot","fetchData","fetch","useTrackPageView","confirm","useConfirmation","tmp","useUnscopedPermissions","permissions","canToggleAutoMaterialize","useLazyQuery","isPaused","setIsPaused","timeRange","afterTimestamp","beforeTimestamp","Date","now","TWENTY_MINUTES","useLayoutEffect","selectedTick","cursor","tableView","ids","push","isOldTickWithoutEndtimestamp","copy","_object_spread","_to_consumable_array","slice","onHoverTick","Page","PageHeader","Heading","tabs","Alert","intent","a","href","target","rel","format","disabled","_async_to_generator","e","_state","sent","setPaused","LiveTickTimeline","onSelectTick","exactRange","tickGrid","timeAfter","labelForBackfillStatus","BulkActionStatus","CANCELED","CANCELING","COMPLETED","FAILED","REQUESTED","backfillStatusValues","Object","keys","match","InstanceBackfills","useDocumentTitle","queryData","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","statusFilter","useStaticSetFilter","allValues","allowMultipleSelections","closeOnSelect","renderLabel","getStringValue","state","useFilters","filters","button","activeFiltersJsx","BACKFILLS_QUERY","statusState","result","partitionBackfillsOrError","FIFTEEN_SECONDS","PythonErrorInfo","error","NonIdealState","backfillHealths","daemonHealths","instance","daemonHealth","allDaemonStatuses","daemon","daemonType","required","healthy","isBackfillHealthy","every","x","DaemonNotRunningAlertBody","BackfillTable","backfills","refetch","CursorPaginationControls","INSTANCE_HEALTH_FRAGMENT","BACKFILL_TABLE_FRAGMENT","dayjs","duration","relativeTime","BackfillPage","client","useApolloClient","history","useHistory","backfillId","useParams","BACKFILL_DETAILS_QUERY","backfill","partitionBackfillOrError","isInProgress","right","BackfillActionsMenu","canCancelRuns","data-testid","testId","message","getRunsUrl","token","RunStatus","QUEUED","STARTING","NOT_STARTED","runsPathWithFilters","onShowAssetDetails","isPartitioned","params","resp","BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY","asAssetKeyInput","partitionsTargetedForAssetKey","ranges","default_range","r","wrap","Detail","detail","ms","Number","showSeconds","Duration","TargetPartitionsDisplay","targetPartitionCount","numPartitions","targetPartitions","assetBackfillData","rootTargetedPartitions","BackfillStatusTagForPage","assetBackfillStatuses","targeted","inProgress","completed","failed","numPartitionsTargeted","numPartitionsInProgress","numPartitionsMaterialized","numPartitionsFailed","materialized","StatusBar","Tag","minWidth","Label","colorBackgroundLight","colorAccentGreen","colorAccentRed","s","rerender","intervalId","setInterval","clearInterval","span","formatDuration","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","minutes","Math","floor","hours","days","trim","OverviewAssetsRoot","Header","TabButton","ASSET_CATALOG_TABLE_QUERY","notifyOnNetworkStatusChange","groupedAssetsUnfiltered","assets","groups","assetsOrError","nodes","repositoryName","values","qs","searchQuery","searchValue","setSearchValue","groupedAssets","group","UNGROUPED_ASSETS","toLowerCase","grow","selected","TextInput","Container","VirtualHeaderRow","VirtualRow","assetKeys","liveDataByNode","useAssetsLiveData","successful","inprogress","missing","assetLiveData","find","console","warn","buildAssetNodeStatusContent","liveData","expanded","case","StatusCase","LOADING","SOURCE_OBSERVING","SOURCE_OBSERVED","SOURCE_NEVER_OBSERVED","SOURCE_NO_STATE","MATERIALIZING","LATE_OR_FAILED","NEVER_MATERIALIZED","MATERIALIZED","PARTITIONS_FAILED","PARTITIONS_MISSING","PARTITIONS_MATERIALIZED","repo","useViewport","containerProps","viewport","isBatchStillLoading","zeroOrBlank","Cell","fontWeight","RepositoryLinkWrapper","maxWidth","RepositoryLink","showRefresh","SelectOnHover","getCount","numMissing","adjective","colorBorderDefault","numFailed","borderLeft","borderRight","borderBottom","numMaterializing","numMaterialized","children","colorTextDefault","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","toLocaleLowerCase","itemRenderer","LinkWithNoUnderline","MenuItem","text","paddingLeft","whiteSpace","textOverflow","partitionCountString","onItemSelect","RepoFilterButton","WorkspaceContext","allRepos","visibleRepos","toggleVisible","open","setOpen","Dialog","canOutsideClickClose","canEscapeKeyClose","onClose","DialogHeader","RepoSelector","options","onBrowse","onToggle","DialogFooter","Button","outlined","rightIcon","useHourWindow","defaultValue","validate","useStateWithStorage","hourWindow","setHourWindow","setHourWindowWithDefault","SCHEDULE_FUTURE_TICKS_FRAGMENT","useRunsForTimeline","range","runsFilter","startSec","endSec","RUN_TIMELINE_QUERY","inProgressFilter","_object_spread_props","createdBefore","terminatedFilter","doneStatuses","updatedAfter","tickCursor","ticksUntil","initialLoading","unterminated","terminated","workspaceOrError","runsByJobKey","run","startTime","repositoryOrigin","overlap","endTime","runJobKey","makeJobKey","repositoryLocationName","pipelineName","jobsWithRuns","jobs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","locationEntries","Symbol","iterator","next","done","_loop","locationEntry","locationOrLoadError","_step1","repositories","pipelines","pipeline","schedules","schedule","jobTicks","scheduleState","InstigationStatus","RUNNING","futureTicks","err","return","isAdHoc","isHiddenAssetGroupJob","jobKey","jobName","jobRuns","jobsAndTicksToAdd","adHocJobs","job","jobType","workspacePipelinePath","repoName","repoLocation","isJob","earliest","reduce","accum","startTimes","min","sort","b","repoAddressAsHumanString","RUN_TIME_FRAGMENT","hourWindowToOffset","OverviewTimelineRoot","setNow","offsetMsec","setOffsetMsec","defaults","search","timer","onPageEarlier","onPageLater","onPageNow","LOOKAHEAD_HOURS","visibleJobKeys","searchLower","flat","flatMap","repositoryLocation","visibleJobs","hrWindow","ErrorBoundary","region","RunTimeline","OverviewActivityRoot","json","defaultTab","setDefaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","render","Redirect","useDelayedState","delayMsec","setValue","setTimeout","clearTimeout","SearchInputSpinner","tooltipContent","Tooltip","placement","canShow","OverviewJobsTable","repos","allKeys","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","type","jobCount","repoKey","duplicateRepoNames","findDuplicateRepoNames","ii","row","VirtualizedJobHeader","RepoRow","showLocation","rightElement","VirtualizedJobRow","sortRepoBuckets","buckets","aString","bString","localeCompare","visibleRepoKeys","option","OverviewJobsRoot","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","repoBuckets","visibleKeys","buildBuckets","sanitizedSearch","anySearch","filteredBySearch","searchToLower","showSearchSpinner","workspaceLoading","paddingTop","anyReposHidden","entries","entry","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_iterator1","OverviewResourcesTable","resources","resourceCount","resource","VirtualizedResourceHeader","VirtualizedResourceRow","OverviewResourcesRoot","OVERVIEW_RESOURCES_QUERY","allTopLevelResourceDetails","RESOURCE_ENTRY_FRAGMENT","UnloadableSensors","sensorStates","showSubheading","_param_showSubheading","Subheading","UnloadableSensorInfo","sensorState","SensorStateRow","UnloadableSchedules","scheduleStates","UnloadableScheduleInfo","ScheduleStateRow","element","selectorId","hasStopPermission","useMutation","STOP_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","stopSensor","onChangeSwitch","jobOriginId","jobSelectorId","lacksPermission","latestTick","toggleOffInFlight","STOPPED","DEFAULT_DISABLED_REASON","Group","spacing","InstigatorSelectorInformation","instigatorState","InstigatedRunStatus","instigationState","STOP_SCHEDULE_MUTATION","displayScheduleMutationErrors","stopSchedule","typeSpecificData","cronSchedule","scheduleOriginId","scheduleSelectorId","humanCronString","useCodeLocationFilter","setVisible","setHidden","allRepoAddresses","visibleRepoAddresses","initialState","getKey","TruncatedTextWithFullTextOnHover","onStateChanged","menuWidth","OverviewScheduleTable","headerCheckbox","checkedKeys","onToggleCheckFactory","scheduleCount","VirtualizedScheduleHeader","checkbox","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","showCheckboxColumn","onToggleChecked","OverviewSchedulesRoot","codeLocationFilter","runningStateFilter","useInstigationStatusFilter","OVERVIEW_SCHEDULES_QUERY","filteredBuckets","_param","rest","runningState","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","useSelectionReducer","checkedIds","onToggleFactory","permissionedKeysOnScreen","filteredKeys","checkedSchedules","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","filterButton","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","unloadableInstigationStatesOrError","UnloadableSchedulesAlert","SchedulerInfo","CheckAllBox","totalCount","UnloadableScheduleDialog","UNLOADABLE_SCHEDULES_QUERY","scheduleNames","BASIC_INSTIGATION_STATE_FRAGMENT","INSTIGATION_STATE_FRAGMENT","OverviewSensorTable","sensors","sensorCount","sensor","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","OverviewSensorsRoot","OVERVIEW_SENSORS_QUERY","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","SensorBulkActionMenu","UnloadableSensorsAlert","SensorInfo","UnloadableSensorDialog","UNLOADABLE_SENSORS_QUERY","OverviewRoot","exact","overview_OverviewRoot"],"sourceRoot":""}