{"version":3,"file":"static/chunks/704.5f8aff3a5e886388.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/InstanceConcurrency.tsx","webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx","webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {gql, useQuery, useMutation} from '@apollo/client';\nimport {\n  Subheading,\n  MetadataTableWIP,\n  StyledRawCodeMirror,\n  PageHeader,\n  Heading,\n  Box,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Icon,\n  Menu,\n  MenuItem,\n  Mono,\n  Popover,\n  Spinner,\n  ButtonLink,\n  Table,\n  Tag,\n  TextInput,\n  Button,\n  NonIdealState,\n  Page,\n  Tooltip,\n  colorAccentGray,\n  colorTextLight,\n  colorBackgroundYellow,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RunStatusDot} from '../runs/RunStatusDots';\nimport {failedStatuses} from '../runs/RunStatuses';\nimport {titleForRun} from '../runs/RunUtils';\nimport {TimeElapsed} from '../runs/TimeElapsed';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {\n  ConcurrencyKeyDetailsQuery,\n  ConcurrencyKeyDetailsQueryVariables,\n  ConcurrencyLimitFragment,\n  ConcurrencyStepFragment,\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n  InstanceConcurrencyLimitsQuery,\n  InstanceConcurrencyLimitsQueryVariables,\n  RunsForConcurrencyKeyQuery,\n  RunsForConcurrencyKeyQueryVariables,\n  RunQueueConfigFragment,\n  SetConcurrencyLimitMutation,\n  SetConcurrencyLimitMutationVariables,\n} from './types/InstanceConcurrency.types';\n\nconst InstanceConcurrencyPage = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Concurrency');\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const queryResult = useQuery<\n    InstanceConcurrencyLimitsQuery,\n    InstanceConcurrencyLimitsQueryVariables\n  >(INSTANCE_CONCURRENCY_LIMITS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"concurrency\" refreshState={refreshState} />}\n      />\n      {data ? (\n        <>\n          <Box margin={{bottom: 64}}>\n            <RunConcurrencyContent\n              hasRunQueue={!!data?.instance.runQueuingSupported}\n              runQueueConfig={data?.instance.runQueueConfig}\n            />\n          </Box>\n          <ConcurrencyLimits\n            instanceConfig={data.instance.info}\n            limits={data.instance.concurrencyLimits}\n            hasSupport={data.instance.supportsConcurrencyLimits}\n            refetch={queryResult.refetch}\n          />\n        </>\n      ) : (\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      )}\n    </Page>\n  );\n});\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConcurrencyPage;\n\ntype DialogAction =\n  | {\n      actionType: 'add';\n    }\n  | {\n      actionType: 'edit';\n      concurrencyKey: string;\n      concurrencyLimit: number;\n    }\n  | {\n      actionType: 'delete';\n      concurrencyKey: string;\n    }\n  | undefined;\n\nexport const RunConcurrencyContent = ({\n  hasRunQueue,\n  runQueueConfig,\n  onEdit,\n}: {\n  hasRunQueue: boolean;\n  runQueueConfig: RunQueueConfigFragment | null | undefined;\n  onEdit?: () => void;\n}) => {\n  if (!hasRunQueue) {\n    return (\n      <>\n        <Box padding={{vertical: 16, horizontal: 24}} border=\"bottom\">\n          <Subheading>Run concurrency</Subheading>\n        </Box>\n        <div>\n          Run concurrency is not supported with this run coordinator. To enable run concurrency\n          limits, configure your instance to use the <Mono>QueuedRunCoordinator</Mono> in your{' '}\n          <Mono>dagster.yaml</Mono>. See the{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://docs.dagster.io/deployment/dagster-instance#queuedruncoordinator\"\n          >\n            QueuedRunCoordinator documentation\n          </a>{' '}\n          for more information.\n        </div>\n      </>\n    );\n  }\n\n  const info_content = (\n    <Box padding={{vertical: 16, horizontal: 24}}>\n      Run concurrency can be set in your run queue settings. See the{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        href=\"https://docs.dagster.io/guides/limiting-concurrency-in-data-pipelines#configuring-run-level-concurrency\"\n      >\n        run concurrency documentation\n      </a>{' '}\n      for more information.\n    </Box>\n  );\n\n  const settings_content = runQueueConfig ? (\n    <MetadataTableWIP>\n      <tbody>\n        <tr>\n          <td>Max concurrent runs:</td>\n          <td>\n            <Mono>{runQueueConfig.maxConcurrentRuns}</Mono>\n          </td>\n        </tr>\n        <tr>\n          <td>Tag concurrency limits:</td>\n          <td>\n            {runQueueConfig.tagConcurrencyLimitsYaml ? (\n              <StyledRawCodeMirror\n                value={runQueueConfig.tagConcurrencyLimitsYaml}\n                options={{readOnly: true, lineNumbers: true, mode: 'yaml'}}\n              />\n            ) : (\n              '-'\n            )}\n          </td>\n        </tr>\n      </tbody>\n    </MetadataTableWIP>\n  ) : null;\n\n  return (\n    <>\n      <RunConcurrencyLimitHeader onEdit={onEdit} />\n      {info_content}\n      {settings_content}\n    </>\n  );\n};\n\nconst RunConcurrencyLimitHeader = ({onEdit}: {onEdit?: () => void}) => (\n  <Box\n    flex={{justifyContent: 'space-between', alignItems: 'center'}}\n    padding={{vertical: 16, horizontal: 24}}\n    border=\"bottom\"\n  >\n    <Subheading>Run concurrency</Subheading>\n    {onEdit ? (\n      <Button icon={<Icon name=\"edit\" />} onClick={() => onEdit()}>\n        Edit configuration\n      </Button>\n    ) : (\n      <span />\n    )}\n  </Box>\n);\n\nexport const ConcurrencyLimits = ({\n  instanceConfig,\n  hasSupport,\n  limits,\n  refetch,\n}: {\n  limits: ConcurrencyLimitFragment[];\n  refetch: () => void;\n  instanceConfig?: string | null;\n  hasSupport?: boolean;\n}) => {\n  const [action, setAction] = React.useState<DialogAction>();\n  const [selectedKey, setSelectedKey] = React.useState<string | undefined>(undefined);\n  const onConcurrencyStepsDialogClose = React.useCallback(() => {\n    setSelectedKey(undefined);\n  }, [setSelectedKey]);\n\n  const limitsByKey = Object.fromEntries(\n    limits.map(({concurrencyKey, slotCount}) => [concurrencyKey, slotCount]),\n  );\n\n  const sortedLimits = React.useMemo(() => {\n    return [...limits].sort((a, b) => COMMON_COLLATOR.compare(a.concurrencyKey, b.concurrencyKey));\n  }, [limits]);\n\n  const onAdd = () => {\n    setAction({actionType: 'add'});\n  };\n  const onEdit = (concurrencyKey: string) => {\n    setAction({actionType: 'edit', concurrencyKey, concurrencyLimit: limitsByKey[concurrencyKey]!});\n  };\n  const onDelete = (concurrencyKey: string) => {\n    setAction({actionType: 'delete', concurrencyKey});\n  };\n\n  if (!hasSupport && instanceConfig && instanceConfig.includes('SqliteEventLogStorage')) {\n    return (\n      <>\n        <ConcurrencyLimitHeader />\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency support\"\n            description={\n              'This instance does not support global concurrency limits. You will need to ' +\n              'configure a different storage implementation (e.g. Postgres/MySQL) to use this ' +\n              'feature.'\n            }\n          />\n        </Box>\n      </>\n    );\n  } else if (hasSupport === false) {\n    return (\n      <>\n        <ConcurrencyLimitHeader />\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency support\"\n            description={\n              'This instance does not currently support global concurrency limits. You may need to ' +\n              'run `dagster instance migrate` to add the necessary tables to your dagster storage ' +\n              'to support this feature.'\n            }\n          />\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <ConcurrencyLimitHeader onAdd={onAdd} />\n      {limits.length === 0 ? (\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency limits\"\n            description={\n              <>\n                No concurrency limits have been configured for this instance.&nbsp;\n                <ButtonLink onClick={() => onAdd()}>Add a concurrency limit</ButtonLink>.\n              </>\n            }\n          />\n        </Box>\n      ) : (\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '260px'}}>Concurrency key</th>\n              <th style={{width: '20%'}}>Total slots</th>\n              <th style={{width: '20%'}}>Assigned steps</th>\n              <th style={{width: '20%'}}>Pending steps</th>\n              <th style={{width: '20%'}}>All steps</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedLimits.map((limit) => (\n              <tr key={limit.concurrencyKey}>\n                <td>{limit.concurrencyKey}</td>\n                <td>{limit.slotCount}</td>\n                <td>{limit.pendingSteps.filter((x) => !!x.assignedTimestamp).length}</td>\n                <td>{limit.pendingSteps.filter((x) => !x.assignedTimestamp).length}</td>\n                <td>\n                  <span style={{marginRight: 16}}>{limit.pendingSteps.length}</span>\n                  <Tag intent=\"primary\" interactive>\n                    <ButtonLink\n                      onClick={() => {\n                        setSelectedKey(limit.concurrencyKey);\n                      }}\n                    >\n                      View all\n                    </ButtonLink>\n                  </Tag>\n                </td>\n                <td>\n                  <ConcurrencyLimitActionMenu\n                    concurrencyKey={limit.concurrencyKey}\n                    onEdit={onEdit}\n                    onDelete={onDelete}\n                  />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n      <AddConcurrencyLimitDialog\n        open={action?.actionType === 'add'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <DeleteConcurrencyLimitDialog\n        concurrencyKey={action && action.actionType === 'delete' ? action.concurrencyKey : ''}\n        open={action?.actionType === 'delete'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <EditConcurrencyLimitDialog\n        open={action?.actionType === 'edit'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        concurrencyKey={action?.actionType === 'edit' ? action.concurrencyKey : ''}\n      />\n      <ConcurrencyStepsDialog\n        title={\n          <span>\n            Concurrency steps for <strong>{selectedKey}</strong>\n          </span>\n        }\n        onClose={onConcurrencyStepsDialogClose}\n        concurrencyKey={selectedKey}\n        onUpdate={refetch}\n      />\n    </>\n  );\n};\n\nconst ConcurrencyLimitHeader = ({onAdd}: {onAdd?: () => void}) => (\n  <Box\n    flex={{justifyContent: 'space-between', alignItems: 'center'}}\n    padding={{vertical: 16, horizontal: 24}}\n    border=\"top-and-bottom\"\n  >\n    <Subheading>\n      <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n        <span>Global op/asset concurrency</span>\n        <Tag>Experimental</Tag>\n      </Box>\n    </Subheading>\n    {onAdd ? (\n      <Button icon={<Icon name=\"add_circle\" />} onClick={() => onAdd()}>\n        Add concurrency limit\n      </Button>\n    ) : null}\n  </Box>\n);\n\nconst ConcurrencyLimitActionMenu = ({\n  concurrencyKey,\n  onDelete,\n  onEdit,\n}: {\n  concurrencyKey: string;\n  onEdit: (key: string) => void;\n  onDelete: (key: string) => void;\n}) => {\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem icon=\"edit\" text=\"Edit\" onClick={() => onEdit(concurrencyKey)} />\n          <MenuItem\n            icon=\"delete\"\n            intent=\"danger\"\n            text=\"Delete\"\n            onClick={() => onDelete(concurrencyKey)}\n          />\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst isValidLimit = (concurrencyLimit?: string) => {\n  if (!concurrencyLimit) {\n    return false;\n  }\n  const value = parseInt(concurrencyLimit);\n  if (isNaN(value)) {\n    return false;\n  }\n  if (String(value) !== concurrencyLimit.trim()) {\n    return false;\n  }\n  return value > 0 && value < 1000;\n};\n\nconst AddConcurrencyLimitDialog = ({\n  open,\n  onClose,\n  onComplete,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n  const [keyInput, setKeyInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n    setKeyInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey: keyInput, limit: parseInt(limitInput.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={open} title=\"Add concurrency limit\" onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <TextInput\n            value={keyInput || ''}\n            onChange={(e) => setKeyInput(e.target.value)}\n            placeholder=\"Concurrency key\"\n          />\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          intent=\"primary\"\n          onClick={save}\n          disabled={!isValidLimit(limitInput.trim()) || !keyInput || isSubmitting}\n        >\n          {isSubmitting ? 'Adding...' : 'Add limit'}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst EditConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: parseInt(limitInput!.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Edit <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <strong>{concurrencyKey}</strong>\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"primary\" disabled>\n            Updating...\n          </Button>\n        ) : (\n          <Button intent=\"primary\" onClick={save} disabled={!isValidLimit(limitInput.trim())}>\n            Update limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst DeleteConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: 0},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Delete <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        Delete concurrency limit&nbsp;<strong>{concurrencyKey}</strong>?\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"danger\" disabled>\n            Deleting...\n          </Button>\n        ) : (\n          <Button intent=\"danger\" onClick={save}>\n            Delete limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ConcurrencyActionMenu = ({\n  pendingStep,\n  onUpdate,\n}: {\n  pendingStep: ConcurrencyStepFragment;\n  onUpdate: () => void;\n}) => {\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem\n            key=\"free-concurrency-slots-step\"\n            icon=\"status\"\n            text=\"Free concurrency slot for step\"\n            onClick={async () => {\n              const resp = await freeSlots({\n                variables: {runId: pendingStep.runId, stepKey: pendingStep.stepKey},\n              });\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slot',\n                });\n              }\n            }}\n          />\n          <MenuItem\n            key=\"free-concurrency-slots-run\"\n            icon=\"status\"\n            text=\"Free all concurrency slots for run\"\n            onClick={async () => {\n              await showSharedToaster({message: 'Freeing concurrency slots...'});\n              const resp = await freeSlots({variables: {runId: pendingStep.runId}});\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slots',\n                });\n              }\n            }}\n          />\n        </Menu>\n      }\n      position=\"bottom-right\"\n    >\n      <Button rightIcon={<Icon name=\"expand_more\" />}>Actions</Button>\n    </Popover>\n  );\n};\n\nconst ConcurrencyStepsDialog = ({\n  concurrencyKey,\n  onClose,\n  title,\n  onUpdate,\n}: {\n  concurrencyKey?: string;\n  title: string | React.ReactNode;\n  onClose: () => void;\n  onUpdate: () => void;\n}) => {\n  const queryResult = useQuery<ConcurrencyKeyDetailsQuery, ConcurrencyKeyDetailsQueryVariables>(\n    CONCURRENCY_KEY_DETAILS_QUERY,\n    {\n      variables: {\n        concurrencyKey: concurrencyKey || '',\n      },\n      skip: !concurrencyKey,\n    },\n  );\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n  const refetch = React.useCallback(() => {\n    queryResult.refetch();\n    onUpdate();\n  }, [queryResult, onUpdate]);\n\n  return (\n    <Dialog\n      isOpen={!!concurrencyKey}\n      title={title}\n      onClose={onClose}\n      style={{\n        minWidth: '400px',\n        maxWidth: '1000px',\n        width: '90vw',\n        maxHeight: '90vh',\n      }}\n    >\n      <Box padding={{vertical: 16}} flex={{grow: 1}} style={{overflowY: 'auto'}}>\n        {!data ? (\n          <Box padding={{vertical: 64}}>\n            <Spinner purpose=\"section\" />\n          </Box>\n        ) : (\n          <PendingStepsTable keyInfo={data.instance.concurrencyLimit} refresh={refetch} />\n        )}\n      </Box>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst PendingStepsTable = ({\n  keyInfo,\n  refresh,\n}: {\n  keyInfo: ConcurrencyLimitFragment;\n  refresh: () => void;\n}) => {\n  const runIds = [...new Set(keyInfo.pendingSteps.map((step) => step.runId))];\n  const queryResult = useQuery<RunsForConcurrencyKeyQuery, RunsForConcurrencyKeyQueryVariables>(\n    RUNS_FOR_CONCURRENCY_KEY_QUERY,\n    {\n      variables: {\n        filter: {runIds},\n      },\n      skip: !keyInfo.pendingSteps.length,\n    },\n  );\n  const statusByRunId: {[id: string]: RunStatus} = {};\n  const runs =\n    queryResult.data?.pipelineRunsOrError.__typename === 'Runs'\n      ? queryResult.data.pipelineRunsOrError.results\n      : [];\n  runs.forEach((run) => {\n    statusByRunId[run.id] = run.status;\n  });\n\n  const steps = [...keyInfo.pendingSteps];\n  steps.sort((a, b) => {\n    if (a.priority && b.priority && a.priority !== b.priority) {\n      return a.priority - b.priority;\n    }\n    return a.enqueuedTimestamp - b.enqueuedTimestamp;\n  });\n  const assignedSteps = steps.filter((step) => !!step.assignedTimestamp);\n  const pendingSteps = steps.filter((step) => !step.assignedTimestamp);\n\n  const tableHeader = (\n    <thead>\n      <tr>\n        <th>Run ID</th>\n        <th>Step key</th>\n        <th>Assigned</th>\n        <th>Queued</th>\n        <th>\n          <Box flex={{alignItems: 'center', direction: 'row', gap: 4}}>\n            Priority\n            <Tooltip\n              placement=\"top\"\n              content=\"Priority can be set on each op/asset using the 'dagster/priority' tag. Higher priority steps will be assigned slots first.\"\n            >\n              <Icon name=\"info\" color={colorAccentGray()} />\n            </Tooltip>\n          </Box>\n        </th>\n        <th></th>\n      </tr>\n    </thead>\n  );\n\n  if (!steps.length) {\n    return (\n      <Table>\n        {tableHeader}\n        <tbody>\n          <tr>\n            <td colSpan={6}>\n              <Box\n                flex={{alignItems: 'center', justifyContent: 'center'}}\n                style={{color: colorTextLight()}}\n                padding={16}\n              >\n                There are no active or pending steps for this concurrency key.\n              </Box>\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n    );\n  }\n\n  return (\n    <Table>\n      {tableHeader}\n      <tbody style={{backgroundColor: colorBackgroundYellow()}}>\n        {assignedSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n      <tbody>\n        {pendingSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst PendingStepRow = ({\n  step,\n  statusByRunId,\n  onUpdate,\n}: {\n  step: ConcurrencyStepFragment;\n  statusByRunId: {[id: string]: RunStatus};\n  onUpdate: () => void;\n}) => {\n  const runStatus = statusByRunId[step.runId];\n  return (\n    <tr>\n      <td>\n        {runStatus ? (\n          <Link to={`/runs/${step.runId}`}>\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <RunStatusDot status={runStatus} size={10} />\n              <Mono>{titleForRun({id: step.runId})}</Mono>\n              {failedStatuses.has(runStatus) ? (\n                <Tooltip\n                  placement=\"top\"\n                  content=\"Slots for canceled / failed runs can automatically be freed by configuring a run monitoring setting.\"\n                >\n                  <Icon name=\"info\" color={colorAccentGray()} />\n                </Tooltip>\n              ) : null}\n            </Box>\n          </Link>\n        ) : (\n          <Mono>{titleForRun({id: step.runId})}</Mono>\n        )}\n      </td>\n      <td>\n        <Mono>{step.stepKey}</Mono>\n      </td>\n      <td>\n        {step.assignedTimestamp ? (\n          <TimeElapsed startUnix={step.assignedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>\n        {step.enqueuedTimestamp ? (\n          <TimeElapsed startUnix={step.enqueuedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>{step.priority}</td>\n      <td>\n        <ConcurrencyActionMenu pendingStep={step} onUpdate={onUpdate} />\n      </td>\n    </tr>\n  );\n};\n\nexport const CONCURRENCY_STEP_FRAGMENT = gql`\n  fragment ConcurrencyStepFragment on PendingConcurrencyStep {\n    runId\n    stepKey\n    enqueuedTimestamp\n    assignedTimestamp\n    priority\n  }\n`;\nexport const CONCURRENCY_LIMIT_FRAGMENT = gql`\n  fragment ConcurrencyLimitFragment on ConcurrencyKeyInfo {\n    concurrencyKey\n    slotCount\n    claimedSlots {\n      runId\n      stepKey\n    }\n    pendingSteps {\n      ...ConcurrencyStepFragment\n    }\n  }\n  ${CONCURRENCY_STEP_FRAGMENT}\n`;\nexport const RUN_QUEUE_CONFIG_FRAGMENT = gql`\n  fragment RunQueueConfigFragment on RunQueueConfig {\n    maxConcurrentRuns\n    tagConcurrencyLimitsYaml\n  }\n`;\n\nexport const INSTANCE_CONCURRENCY_LIMITS_QUERY = gql`\n  query InstanceConcurrencyLimitsQuery {\n    instance {\n      id\n      info\n      supportsConcurrencyLimits\n      runQueuingSupported\n      runQueueConfig {\n        ...RunQueueConfigFragment\n      }\n      concurrencyLimits {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n  ${RUN_QUEUE_CONFIG_FRAGMENT}\n`;\n\nconst SET_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation SetConcurrencyLimit($concurrencyKey: String!, $limit: Int!) {\n    setConcurrencyLimit(concurrencyKey: $concurrencyKey, limit: $limit)\n  }\n`;\n\nexport const FREE_CONCURRENCY_SLOTS_MUTATION = gql`\n  mutation FreeConcurrencySlots($runId: String!, $stepKey: String) {\n    freeConcurrencySlots(runId: $runId, stepKey: $stepKey)\n  }\n`;\n\nconst CONCURRENCY_KEY_DETAILS_QUERY = gql`\n  query ConcurrencyKeyDetailsQuery($concurrencyKey: String!) {\n    instance {\n      id\n      concurrencyLimit(concurrencyKey: $concurrencyKey) {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n`;\n\nconst RUNS_FOR_CONCURRENCY_KEY_QUERY = gql`\n  query RunsForConcurrencyKeyQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          status\n        }\n      }\n    }\n  }\n`;\n","import {Icon, colorAccentYellow} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const InstanceWarningIcon = React.memo(() => {\n  const {daemons} = React.useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={colorAccentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {\n  Icon,\n  Tooltip,\n  Spinner,\n  colorAccentGray,\n  colorAccentYellow,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const WorkspaceStatus = React.memo(({placeholder}: {placeholder: boolean}) => {\n  const {codeLocations} = React.useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={colorAccentGray()} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={colorAccentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = React.useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n"],"names":["InstanceConcurrencyPage","React","useTrackPageView","useDocumentTitle","pageTitle","InstancePageContext","queryResult","useQuery","INSTANCE_CONCURRENCY_LIMITS_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","Page","jsx","PageHeader","title","Heading","tabs","InstanceTabs","tab","Fragment","Box","margin","bottom","RunConcurrencyContent","hasRunQueue","instance","runQueuingSupported","runQueueConfig","ConcurrencyLimits","instanceConfig","info","limits","concurrencyLimits","hasSupport","supportsConcurrencyLimits","refetch","padding","vertical","Spinner","purpose","__webpack_exports__","param","onEdit","horizontal","border","Subheading","div","Mono","a","target","rel","href","info_content","settings_content","MetadataTableWIP","tbody","tr","td","maxConcurrentRuns","tagConcurrencyLimitsYaml","StyledRawCodeMirror","value","options","readOnly","lineNumbers","mode","RunConcurrencyLimitHeader","flex","justifyContent","alignItems","Button","icon","Icon","name","onClick","span","action","setAction","undefined","selectedKey","setSelectedKey","onConcurrencyStepsDialogClose","limitsByKey","Object","fromEntries","map","concurrencyKey","slotCount","sortedLimits","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_25__","_","sort","b","COMMON_COLLATOR","compare","onAdd","actionType","concurrencyLimit","onDelete","includes","ConcurrencyLimitHeader","NonIdealState","description","length","ButtonLink","Table","thead","th","style","width","limit","pendingSteps","filter","x","assignedTimestamp","marginRight","Tag","intent","interactive","ConcurrencyLimitActionMenu","AddConcurrencyLimitDialog","open","onClose","onComplete","DeleteConcurrencyLimitDialog","EditConcurrencyLimitDialog","ConcurrencyStepsDialog","strong","onUpdate","direction","gap","Popover","content","Menu","MenuItem","text","position","isValidLimit","parseInt","isNaN","String","trim","isSubmitting","setIsSubmitting","limitInput","setLimitInput","keyInput","setKeyInput","setConcurrencyLimit","useMutation","SET_CONCURRENCY_LIMIT_MUTATION","save","_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_33__","variables","_state","sent","Dialog","isOpen","DialogBody","TextInput","onChange","e","placeholder","DialogFooter","disabled","ConcurrencyActionMenu","pendingStep","freeSlots","FREE_CONCURRENCY_SLOTS_MUTATION","resp","runId","stepKey","freeConcurrencySlots","showSharedToaster","message","rightIcon","CONCURRENCY_KEY_DETAILS_QUERY","skip","minWidth","maxWidth","maxHeight","grow","overflowY","PendingStepsTable","keyInfo","refresh","runIds","Set","step","RUNS_FOR_CONCURRENCY_KEY_QUERY","statusByRunId","runs","pipelineRunsOrError","__typename","results","forEach","run","id","status","steps","priority","enqueuedTimestamp","assignedSteps","tableHeader","Tooltip","placement","color","colorAccentGray","backgroundColor","colorBackgroundYellow","PendingStepRow","colSpan","colorTextLight","runStatus","Link","to","concat","RunStatusDot","size","titleForRun","failedStatuses","has","TimeElapsed","startUnix","endUnix","CONCURRENCY_STEP_FRAGMENT","gql","CONCURRENCY_LIMIT_FRAGMENT","RUN_QUEUE_CONFIG_FRAGMENT","InstanceWarningIcon","daemons","DeploymentStatusContext","jsx_runtime","WarningTooltip","modifiers","offset","enabled","colorAccentYellow","WorkspaceStatus","codeLocations","type","fillColor","props","healthTitle","canSeeConfig","useCanSeeConfig","Tabs","selectedTabId","TabLink","QueryRefreshCountdown","INSTANCE_CONFIG_HAS_INFO","hasInfo"],"sourceRoot":""}